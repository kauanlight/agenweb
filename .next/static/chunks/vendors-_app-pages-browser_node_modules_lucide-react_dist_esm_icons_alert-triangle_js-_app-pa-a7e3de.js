/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors-_app-pages-browser_node_modules_lucide-react_dist_esm_icons_alert-triangle_js-_app-pa-a7e3de"],{

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/alert-triangle.js":
/*!********************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/alert-triangle.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AlertTriangle; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst AlertTriangle = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"AlertTriangle\", [\n    [\n        \"path\",\n        {\n            d: \"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\",\n            key: \"c3ski4\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 9v4\",\n            key: \"juzpu7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 17h.01\",\n            key: \"p32p05\"\n        }\n    ]\n]);\n //# sourceMappingURL=alert-triangle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYWxlcnQtdHJpYW5nbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxnQkFBZ0JELGdFQUFnQkEsQ0FBQyxpQkFBaUI7SUFDdEQ7UUFDRTtRQUNBO1lBQ0VFLEdBQUc7WUFDSEMsS0FBSztRQUNQO0tBQ0Q7SUFDRDtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFXQyxLQUFLO1FBQVM7S0FBRTtJQUN6QztRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFjQyxLQUFLO1FBQVM7S0FBRTtDQUM3QztBQUVtQyxDQUNwQywwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9hbGVydC10cmlhbmdsZS5qcz80MmU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjMyMS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgQWxlcnRUcmlhbmdsZSA9IGNyZWF0ZUx1Y2lkZUljb24oXCJBbGVydFRyaWFuZ2xlXCIsIFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwibTIxLjczIDE4LTgtMTRhMiAyIDAgMCAwLTMuNDggMGwtOCAxNEEyIDIgMCAwIDAgNCAyMWgxNmEyIDIgMCAwIDAgMS43My0zWlwiLFxuICAgICAga2V5OiBcImMzc2tpNFwiXG4gICAgfVxuICBdLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMTIgOXY0XCIsIGtleTogXCJqdXpwdTdcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTEyIDE3aC4wMVwiLCBrZXk6IFwicDMycDA1XCIgfV1cbl0pO1xuXG5leHBvcnQgeyBBbGVydFRyaWFuZ2xlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFsZXJ0LXRyaWFuZ2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJBbGVydFRyaWFuZ2xlIiwiZCIsImtleSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/alert-triangle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-right.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/arrow-right.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ArrowRight; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst ArrowRight = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ArrowRight\", [\n    [\n        \"path\",\n        {\n            d: \"M5 12h14\",\n            key: \"1ays0h\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m12 5 7 7-7 7\",\n            key: \"xquz4c\"\n        }\n    ]\n]);\n //# sourceMappingURL=arrow-right.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYXJyb3ctcmlnaHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxhQUFhRCxnRUFBZ0JBLENBQUMsY0FBYztJQUNoRDtRQUFDO1FBQVE7WUFBRUUsR0FBRztZQUFZQyxLQUFLO1FBQVM7S0FBRTtJQUMxQztRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFpQkMsS0FBSztRQUFTO0tBQUU7Q0FDaEQ7QUFFZ0MsQ0FDakMsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYXJyb3ctcmlnaHQuanM/YTcwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC4zMjEuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IEFycm93UmlnaHQgPSBjcmVhdGVMdWNpZGVJY29uKFwiQXJyb3dSaWdodFwiLCBbXG4gIFtcInBhdGhcIiwgeyBkOiBcIk01IDEyaDE0XCIsIGtleTogXCIxYXlzMGhcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwibTEyIDUgNyA3LTcgN1wiLCBrZXk6IFwieHF1ejRjXCIgfV1cbl0pO1xuXG5leHBvcnQgeyBBcnJvd1JpZ2h0IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycm93LXJpZ2h0LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJBcnJvd1JpZ2h0IiwiZCIsImtleSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/arrow-right.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/bot.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/bot.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Bot; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Bot = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Bot\", [\n    [\n        \"path\",\n        {\n            d: \"M12 8V4H8\",\n            key: \"hb8ula\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            width: \"16\",\n            height: \"12\",\n            x: \"4\",\n            y: \"8\",\n            rx: \"2\",\n            key: \"enze0r\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M2 14h2\",\n            key: \"vft8re\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M20 14h2\",\n            key: \"4cs60a\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M15 13v2\",\n            key: \"1xurst\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M9 13v2\",\n            key: \"rq6x2g\"\n        }\n    ]\n]);\n //# sourceMappingURL=bot.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYm90LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsTUFBTUQsZ0VBQWdCQSxDQUFDLE9BQU87SUFDbEM7UUFBQztRQUFRO1lBQUVFLEdBQUc7WUFBYUMsS0FBSztRQUFTO0tBQUU7SUFDM0M7UUFBQztRQUFRO1lBQUVDLE9BQU87WUFBTUMsUUFBUTtZQUFNQyxHQUFHO1lBQUtDLEdBQUc7WUFBS0MsSUFBSTtZQUFLTCxLQUFLO1FBQVM7S0FBRTtJQUMvRTtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFXQyxLQUFLO1FBQVM7S0FBRTtJQUN6QztRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFZQyxLQUFLO1FBQVM7S0FBRTtJQUMxQztRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFZQyxLQUFLO1FBQVM7S0FBRTtJQUMxQztRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFXQyxLQUFLO1FBQVM7S0FBRTtDQUMxQztBQUV5QixDQUMxQiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9ib3QuanM/OTYyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC4zMjEuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IEJvdCA9IGNyZWF0ZUx1Y2lkZUljb24oXCJCb3RcIiwgW1xuICBbXCJwYXRoXCIsIHsgZDogXCJNMTIgOFY0SDhcIiwga2V5OiBcImhiOHVsYVwiIH1dLFxuICBbXCJyZWN0XCIsIHsgd2lkdGg6IFwiMTZcIiwgaGVpZ2h0OiBcIjEyXCIsIHg6IFwiNFwiLCB5OiBcIjhcIiwgcng6IFwiMlwiLCBrZXk6IFwiZW56ZTByXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0yIDE0aDJcIiwga2V5OiBcInZmdDhyZVwiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMjAgMTRoMlwiLCBrZXk6IFwiNGNzNjBhXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0xNSAxM3YyXCIsIGtleTogXCIxeHVyc3RcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTkgMTN2MlwiLCBrZXk6IFwicnE2eDJnXCIgfV1cbl0pO1xuXG5leHBvcnQgeyBCb3QgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym90LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJCb3QiLCJkIiwia2V5Iiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsInJ4IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/bot.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/globe.js":
/*!***********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/globe.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Globe; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Globe = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Globe\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20\",\n            key: \"13o1zl\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M2 12h20\",\n            key: \"9i4pu4\"\n        }\n    ]\n]);\n //# sourceMappingURL=globe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvZ2xvYmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxRQUFRRCxnRUFBZ0JBLENBQUMsU0FBUztJQUN0QztRQUFDO1FBQVU7WUFBRUUsSUFBSTtZQUFNQyxJQUFJO1lBQU1DLEdBQUc7WUFBTUMsS0FBSztRQUFTO0tBQUU7SUFDMUQ7UUFBQztRQUFRO1lBQUVDLEdBQUc7WUFBbURELEtBQUs7UUFBUztLQUFFO0lBQ2pGO1FBQUM7UUFBUTtZQUFFQyxHQUFHO1lBQVlELEtBQUs7UUFBUztLQUFFO0NBQzNDO0FBRTJCLENBQzVCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2dsb2JlLmpzPzBkNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtcmVhY3QgdjAuMzIxLjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24uanMnO1xuXG5jb25zdCBHbG9iZSA9IGNyZWF0ZUx1Y2lkZUljb24oXCJHbG9iZVwiLCBbXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjEyXCIsIGN5OiBcIjEyXCIsIHI6IFwiMTBcIiwga2V5OiBcIjFtZ2xheVwiIH1dLFxuICBbXCJwYXRoXCIsIHsgZDogXCJNMTIgMmExNC41IDE0LjUgMCAwIDAgMCAyMCAxNC41IDE0LjUgMCAwIDAgMC0yMFwiLCBrZXk6IFwiMTNvMXpsXCIgfV0sXG4gIFtcInBhdGhcIiwgeyBkOiBcIk0yIDEyaDIwXCIsIGtleTogXCI5aTRwdTRcIiB9XVxuXSk7XG5cbmV4cG9ydCB7IEdsb2JlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JlLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJHbG9iZSIsImN4IiwiY3kiLCJyIiwia2V5IiwiZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/globe.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/headphones.js":
/*!****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/headphones.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Headphones; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Headphones = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Headphones\", [\n    [\n        \"path\",\n        {\n            d: \"M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3\",\n            key: \"1xhozi\"\n        }\n    ]\n]);\n //# sourceMappingURL=headphones.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvaGVhZHBob25lcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztDQUtDLEdBRXFEO0FBRXRELE1BQU1DLGFBQWFELGdFQUFnQkEsQ0FBQyxjQUFjO0lBQ2hEO1FBQ0U7UUFDQTtZQUNFRSxHQUFHO1lBQ0hDLEtBQUs7UUFDUDtLQUNEO0NBQ0Y7QUFFZ0MsQ0FDakMsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvaGVhZHBob25lcy5qcz85N2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjMyMS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgSGVhZHBob25lcyA9IGNyZWF0ZUx1Y2lkZUljb24oXCJIZWFkcGhvbmVzXCIsIFtcbiAgW1xuICAgIFwicGF0aFwiLFxuICAgIHtcbiAgICAgIGQ6IFwiTTMgMTRoM2EyIDIgMCAwIDEgMiAydjNhMiAyIDAgMCAxLTIgMkg1YTIgMiAwIDAgMS0yLTJ2LTdhOSA5IDAgMCAxIDE4IDB2N2EyIDIgMCAwIDEtMiAyaC0xYTIgMiAwIDAgMS0yLTJ2LTNhMiAyIDAgMCAxIDItMmgzXCIsXG4gICAgICBrZXk6IFwiMXhob3ppXCJcbiAgICB9XG4gIF1cbl0pO1xuXG5leHBvcnQgeyBIZWFkcGhvbmVzIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYWRwaG9uZXMuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlTHVjaWRlSWNvbiIsIkhlYWRwaG9uZXMiLCJkIiwia2V5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/headphones.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/mic.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/mic.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Mic; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Mic = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Mic\", [\n    [\n        \"path\",\n        {\n            d: \"M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z\",\n            key: \"131961\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M19 10v2a7 7 0 0 1-14 0v-2\",\n            key: \"1vc78b\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"19\",\n            y2: \"22\",\n            key: \"x3vr5v\"\n        }\n    ]\n]);\n //# sourceMappingURL=mic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvbWljLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsTUFBTUQsZ0VBQWdCQSxDQUFDLE9BQU87SUFDbEM7UUFBQztRQUFRO1lBQUVFLEdBQUc7WUFBd0RDLEtBQUs7UUFBUztLQUFFO0lBQ3RGO1FBQUM7UUFBUTtZQUFFRCxHQUFHO1lBQThCQyxLQUFLO1FBQVM7S0FBRTtJQUM1RDtRQUFDO1FBQVE7WUFBRUMsSUFBSTtZQUFNQyxJQUFJO1lBQU1DLElBQUk7WUFBTUMsSUFBSTtZQUFNSixLQUFLO1FBQVM7S0FBRTtDQUNwRTtBQUV5QixDQUMxQiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9taWMuanM/NzRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC4zMjEuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IE1pYyA9IGNyZWF0ZUx1Y2lkZUljb24oXCJNaWNcIiwgW1xuICBbXCJwYXRoXCIsIHsgZDogXCJNMTIgMmEzIDMgMCAwIDAtMyAzdjdhMyAzIDAgMCAwIDYgMFY1YTMgMyAwIDAgMC0zLTNaXCIsIGtleTogXCIxMzE5NjFcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTE5IDEwdjJhNyA3IDAgMCAxLTE0IDB2LTJcIiwga2V5OiBcIjF2Yzc4YlwiIH1dLFxuICBbXCJsaW5lXCIsIHsgeDE6IFwiMTJcIiwgeDI6IFwiMTJcIiwgeTE6IFwiMTlcIiwgeTI6IFwiMjJcIiwga2V5OiBcIngzdnI1dlwiIH1dXG5dKTtcblxuZXhwb3J0IHsgTWljIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pYy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVMdWNpZGVJY29uIiwiTWljIiwiZCIsImtleSIsIngxIiwieDIiLCJ5MSIsInkyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/mic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/send.js":
/*!**********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/send.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Send; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Send = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Send\", [\n    [\n        \"path\",\n        {\n            d: \"m22 2-7 20-4-9-9-4Z\",\n            key: \"1q3vgg\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M22 2 11 13\",\n            key: \"nzbqef\"\n        }\n    ]\n]);\n //# sourceMappingURL=send.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc2VuZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztDQUtDLEdBRXFEO0FBRXRELE1BQU1DLE9BQU9ELGdFQUFnQkEsQ0FBQyxRQUFRO0lBQ3BDO1FBQUM7UUFBUTtZQUFFRSxHQUFHO1lBQXVCQyxLQUFLO1FBQVM7S0FBRTtJQUNyRDtRQUFDO1FBQVE7WUFBRUQsR0FBRztZQUFlQyxLQUFLO1FBQVM7S0FBRTtDQUM5QztBQUUwQixDQUMzQixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9zZW5kLmpzP2E2NGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBsdWNpZGUtcmVhY3QgdjAuMzIxLjAgLSBJU0NcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBJU0MgbGljZW5zZS5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBjcmVhdGVMdWNpZGVJY29uIGZyb20gJy4uL2NyZWF0ZUx1Y2lkZUljb24uanMnO1xuXG5jb25zdCBTZW5kID0gY3JlYXRlTHVjaWRlSWNvbihcIlNlbmRcIiwgW1xuICBbXCJwYXRoXCIsIHsgZDogXCJtMjIgMi03IDIwLTQtOS05LTRaXCIsIGtleTogXCIxcTN2Z2dcIiB9XSxcbiAgW1wicGF0aFwiLCB7IGQ6IFwiTTIyIDIgMTEgMTNcIiwga2V5OiBcIm56YnFlZlwiIH1dXG5dKTtcblxuZXhwb3J0IHsgU2VuZCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW5kLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUx1Y2lkZUljb24iLCJTZW5kIiwiZCIsImtleSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/send.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/stop-circle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/stop-circle.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ StopCircle; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst StopCircle = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"StopCircle\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            width: \"6\",\n            height: \"6\",\n            x: \"9\",\n            y: \"9\",\n            key: \"1wrtvo\"\n        }\n    ]\n]);\n //# sourceMappingURL=stop-circle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc3RvcC1jaXJjbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUVxRDtBQUV0RCxNQUFNQyxhQUFhRCxnRUFBZ0JBLENBQUMsY0FBYztJQUNoRDtRQUFDO1FBQVU7WUFBRUUsSUFBSTtZQUFNQyxJQUFJO1lBQU1DLEdBQUc7WUFBTUMsS0FBSztRQUFTO0tBQUU7SUFDMUQ7UUFBQztRQUFRO1lBQUVDLE9BQU87WUFBS0MsUUFBUTtZQUFLQyxHQUFHO1lBQUtDLEdBQUc7WUFBS0osS0FBSztRQUFTO0tBQUU7Q0FDckU7QUFFZ0MsQ0FDakMsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc3RvcC1jaXJjbGUuanM/ODNhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIGx1Y2lkZS1yZWFjdCB2MC4zMjEuMCAtIElTQ1xuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIElTQyBsaWNlbnNlLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUx1Y2lkZUljb24gZnJvbSAnLi4vY3JlYXRlTHVjaWRlSWNvbi5qcyc7XG5cbmNvbnN0IFN0b3BDaXJjbGUgPSBjcmVhdGVMdWNpZGVJY29uKFwiU3RvcENpcmNsZVwiLCBbXG4gIFtcImNpcmNsZVwiLCB7IGN4OiBcIjEyXCIsIGN5OiBcIjEyXCIsIHI6IFwiMTBcIiwga2V5OiBcIjFtZ2xheVwiIH1dLFxuICBbXCJyZWN0XCIsIHsgd2lkdGg6IFwiNlwiLCBoZWlnaHQ6IFwiNlwiLCB4OiBcIjlcIiwgeTogXCI5XCIsIGtleTogXCIxd3J0dm9cIiB9XVxuXSk7XG5cbmV4cG9ydCB7IFN0b3BDaXJjbGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RvcC1jaXJjbGUuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlTHVjaWRlSWNvbiIsIlN0b3BDaXJjbGUiLCJjeCIsImN5IiwiciIsImtleSIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/stop-circle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js":
/*!*********************************************************!*\
  !*** ./node_modules/lucide-react/dist/esm/icons/zap.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Zap; }\n/* harmony export */ });\n/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/createLucideIcon.js\");\n/**\n * @license lucide-react v0.321.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ \nconst Zap = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"Zap\", [\n    [\n        \"polygon\",\n        {\n            points: \"13 2 3 14 12 14 11 22 21 10 12 10 13 2\",\n            key: \"45s27k\"\n        }\n    ]\n]);\n //# sourceMappingURL=zap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvemFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7O0NBS0MsR0FFcUQ7QUFFdEQsTUFBTUMsTUFBTUQsZ0VBQWdCQSxDQUFDLE9BQU87SUFDbEM7UUFBQztRQUFXO1lBQUVFLFFBQVE7WUFBMENDLEtBQUs7UUFBUztLQUFFO0NBQ2pGO0FBRXlCLENBQzFCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL3phcC5qcz82YzdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgbHVjaWRlLXJlYWN0IHYwLjMyMS4wIC0gSVNDXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlTHVjaWRlSWNvbiBmcm9tICcuLi9jcmVhdGVMdWNpZGVJY29uLmpzJztcblxuY29uc3QgWmFwID0gY3JlYXRlTHVjaWRlSWNvbihcIlphcFwiLCBbXG4gIFtcInBvbHlnb25cIiwgeyBwb2ludHM6IFwiMTMgMiAzIDE0IDEyIDE0IDExIDIyIDIxIDEwIDEyIDEwIDEzIDJcIiwga2V5OiBcIjQ1czI3a1wiIH1dXG5dKTtcblxuZXhwb3J0IHsgWmFwIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXphcC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVMdWNpZGVJY29uIiwiWmFwIiwicG9pbnRzIiwia2V5IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/zap.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/navigation.js":
/*!**************************************************!*\
  !*** ./node_modules/next/dist/api/navigation.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/components/navigation */ \"(app-pages-browser)/./node_modules/next/dist/client/components/navigation.js\");\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_components_navigation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n //# sourceMappingURL=navigation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL25hdmlnYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdELENBRWhELHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2FwaS9uYXZpZ2F0aW9uLmpzPzFkMjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4uL2NsaWVudC9jb21wb25lbnRzL25hdmlnYXRpb25cIjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF2aWdhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/navigation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\"); //# sourceMappingURL=process.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxpQkFBaUJDO0FBQ3JCQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQyxDQUFDSCxrQkFBa0JJLHFCQUFNQSxDQUFDQyxPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlMLGdCQUFnQk0sR0FBRyxLQUFLLE9BQVEsRUFBQ0wsbUJBQW1CRyxxQkFBTUEsQ0FBQ0MsT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJSixpQkFBaUJLLEdBQUcsTUFBTSxXQUFXRixxQkFBTUEsQ0FBQ0MsT0FBTyxHQUFHRSxtQkFBT0EsQ0FBQyw0R0FBNEIsR0FFelAsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/Y2E2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOlsiX2dsb2JhbF9wcm9jZXNzIiwiX2dsb2JhbF9wcm9jZXNzMSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnbG9iYWwiLCJwcm9jZXNzIiwiZW52IiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __dirname = \"/\";\n\n(()=>{\n    \"use strict\";\n    var e = {\n        686: (e, r, t)=>{\n            var n = t(808);\n            var i = Object.create(null);\n            var a = typeof document === \"undefined\";\n            var o = Array.prototype.forEach;\n            function debounce(e, r) {\n                var t = 0;\n                return function() {\n                    var n = this;\n                    var i = arguments;\n                    var a = function functionCall() {\n                        return e.apply(n, i);\n                    };\n                    clearTimeout(t);\n                    t = setTimeout(a, r);\n                };\n            }\n            function noop() {}\n            function getCurrentScriptUrl(e) {\n                var r = i[e];\n                if (!r) {\n                    if (document.currentScript) {\n                        r = document.currentScript.src;\n                    } else {\n                        var t = document.getElementsByTagName(\"script\");\n                        var a = t[t.length - 1];\n                        if (a) {\n                            r = a.src;\n                        }\n                    }\n                    i[e] = r;\n                }\n                return function(e) {\n                    if (!r) {\n                        return null;\n                    }\n                    var t = r.split(/([^\\\\/]+)\\.js$/);\n                    var i = t && t[1];\n                    if (!i) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    if (!e) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    return e.split(\",\").map(function(e) {\n                        var t = new RegExp(\"\".concat(i, \"\\\\.js$\"), \"g\");\n                        return n(r.replace(t, \"\".concat(e.replace(/{fileName}/g, i), \".css\")));\n                    });\n                };\n            }\n            function updateCss(e, r) {\n                if (!r) {\n                    if (!e.href) {\n                        return;\n                    }\n                    r = e.href.split(\"?\")[0];\n                }\n                if (!isUrlRequest(r)) {\n                    return;\n                }\n                if (e.isLoaded === false) {\n                    return;\n                }\n                if (!r || !(r.indexOf(\".css\") > -1)) {\n                    return;\n                }\n                e.visited = true;\n                var t = e.cloneNode();\n                t.isLoaded = false;\n                t.addEventListener(\"load\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.addEventListener(\"error\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.href = \"\".concat(r, \"?\").concat(Date.now());\n                if (e.nextSibling) {\n                    e.parentNode.insertBefore(t, e.nextSibling);\n                } else {\n                    e.parentNode.appendChild(t);\n                }\n            }\n            function getReloadUrl(e, r) {\n                var t;\n                e = n(e, {\n                    stripWWW: false\n                });\n                r.some(function(n) {\n                    if (e.indexOf(r) > -1) {\n                        t = n;\n                    }\n                });\n                return t;\n            }\n            function reloadStyle(e) {\n                if (!e) {\n                    return false;\n                }\n                var r = document.querySelectorAll(\"link\");\n                var t = false;\n                o.call(r, function(r) {\n                    if (!r.href) {\n                        return;\n                    }\n                    var n = getReloadUrl(r.href, e);\n                    if (!isUrlRequest(n)) {\n                        return;\n                    }\n                    if (r.visited === true) {\n                        return;\n                    }\n                    if (n) {\n                        updateCss(r, n);\n                        t = true;\n                    }\n                });\n                return t;\n            }\n            function reloadAll() {\n                var e = document.querySelectorAll(\"link\");\n                o.call(e, function(e) {\n                    if (e.visited === true) {\n                        return;\n                    }\n                    updateCss(e);\n                });\n            }\n            function isUrlRequest(e) {\n                if (!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)) {\n                    return false;\n                }\n                return true;\n            }\n            e.exports = function(e, r) {\n                if (a) {\n                    console.log(\"no window.document found, will not HMR CSS\");\n                    return noop;\n                }\n                var t = getCurrentScriptUrl(e);\n                function update() {\n                    var e = t(r.filename);\n                    var n = reloadStyle(e);\n                    if (r.locals) {\n                        console.log(\"[HMR] Detected local css modules. Reload all css\");\n                        reloadAll();\n                        return;\n                    }\n                    if (n) {\n                        console.log(\"[HMR] css reload %s\", e.join(\" \"));\n                    } else {\n                        console.log(\"[HMR] Reload all css\");\n                        reloadAll();\n                    }\n                }\n                return debounce(update, 50);\n            };\n        },\n        808: (e)=>{\n            function normalizeUrl(e) {\n                return e.reduce(function(e, r) {\n                    switch(r){\n                        case \"..\":\n                            e.pop();\n                            break;\n                        case \".\":\n                            break;\n                        default:\n                            e.push(r);\n                    }\n                    return e;\n                }, []).join(\"/\");\n            }\n            e.exports = function(e) {\n                e = e.trim();\n                if (/^data:/i.test(e)) {\n                    return e;\n                }\n                var r = e.indexOf(\"//\") !== -1 ? e.split(\"//\")[0] + \"//\" : \"\";\n                var t = e.replace(new RegExp(r, \"i\"), \"\").split(\"/\");\n                var n = t[0].toLowerCase().replace(/\\.$/, \"\");\n                t[0] = \"\";\n                var i = normalizeUrl(t);\n                return r + n + i;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(t) {\n        var n = r[t];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var i = r[t] = {\n            exports: {}\n        };\n        var a = true;\n        try {\n            e[t](i, i.exports, __nccwpck_require__);\n            a = false;\n        } finally{\n            if (a) delete r[t];\n        }\n        return i.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var t = __nccwpck_require__(686);\n    module.exports = t;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __dirname = \"/\";\n\n(function() {\n    var e = {\n        229: function(e) {\n            var t = e.exports = {};\n            var r;\n            var n;\n            function defaultSetTimout() {\n                throw new Error(\"setTimeout has not been defined\");\n            }\n            function defaultClearTimeout() {\n                throw new Error(\"clearTimeout has not been defined\");\n            }\n            (function() {\n                try {\n                    if (typeof setTimeout === \"function\") {\n                        r = setTimeout;\n                    } else {\n                        r = defaultSetTimout;\n                    }\n                } catch (e) {\n                    r = defaultSetTimout;\n                }\n                try {\n                    if (typeof clearTimeout === \"function\") {\n                        n = clearTimeout;\n                    } else {\n                        n = defaultClearTimeout;\n                    }\n                } catch (e) {\n                    n = defaultClearTimeout;\n                }\n            })();\n            function runTimeout(e) {\n                if (r === setTimeout) {\n                    return setTimeout(e, 0);\n                }\n                if ((r === defaultSetTimout || !r) && setTimeout) {\n                    r = setTimeout;\n                    return setTimeout(e, 0);\n                }\n                try {\n                    return r(e, 0);\n                } catch (t) {\n                    try {\n                        return r.call(null, e, 0);\n                    } catch (t) {\n                        return r.call(this, e, 0);\n                    }\n                }\n            }\n            function runClearTimeout(e) {\n                if (n === clearTimeout) {\n                    return clearTimeout(e);\n                }\n                if ((n === defaultClearTimeout || !n) && clearTimeout) {\n                    n = clearTimeout;\n                    return clearTimeout(e);\n                }\n                try {\n                    return n(e);\n                } catch (t) {\n                    try {\n                        return n.call(null, e);\n                    } catch (t) {\n                        return n.call(this, e);\n                    }\n                }\n            }\n            var i = [];\n            var o = false;\n            var u;\n            var a = -1;\n            function cleanUpNextTick() {\n                if (!o || !u) {\n                    return;\n                }\n                o = false;\n                if (u.length) {\n                    i = u.concat(i);\n                } else {\n                    a = -1;\n                }\n                if (i.length) {\n                    drainQueue();\n                }\n            }\n            function drainQueue() {\n                if (o) {\n                    return;\n                }\n                var e = runTimeout(cleanUpNextTick);\n                o = true;\n                var t = i.length;\n                while(t){\n                    u = i;\n                    i = [];\n                    while(++a < t){\n                        if (u) {\n                            u[a].run();\n                        }\n                    }\n                    a = -1;\n                    t = i.length;\n                }\n                u = null;\n                o = false;\n                runClearTimeout(e);\n            }\n            t.nextTick = function(e) {\n                var t = new Array(arguments.length - 1);\n                if (arguments.length > 1) {\n                    for(var r = 1; r < arguments.length; r++){\n                        t[r - 1] = arguments[r];\n                    }\n                }\n                i.push(new Item(e, t));\n                if (i.length === 1 && !o) {\n                    runTimeout(drainQueue);\n                }\n            };\n            function Item(e, t) {\n                this.fun = e;\n                this.array = t;\n            }\n            Item.prototype.run = function() {\n                this.fun.apply(null, this.array);\n            };\n            t.title = \"browser\";\n            t.browser = true;\n            t.env = {};\n            t.argv = [];\n            t.version = \"\";\n            t.versions = {};\n            function noop() {}\n            t.on = noop;\n            t.addListener = noop;\n            t.once = noop;\n            t.off = noop;\n            t.removeListener = noop;\n            t.removeAllListeners = noop;\n            t.emit = noop;\n            t.prependListener = noop;\n            t.prependOnceListener = noop;\n            t.listeners = function(e) {\n                return [];\n            };\n            t.binding = function(e) {\n                throw new Error(\"process.binding is not supported\");\n            };\n            t.cwd = function() {\n                return \"/\";\n            };\n            t.chdir = function(e) {\n                throw new Error(\"process.chdir is not supported\");\n            };\n            t.umask = function() {\n                return 0;\n            };\n        }\n    };\n    var t = {};\n    function __nccwpck_require__(r) {\n        var n = t[r];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var i = t[r] = {\n            exports: {}\n        };\n        var o = true;\n        try {\n            e[r](i, i.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete t[r];\n        }\n        return i.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var r = __nccwpck_require__(229);\n    module.exports = r;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/base64-js/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/base64-js/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    ;\n    var parts = [];\n    var maxChunkLength = 16383 // must be multiple of 3\n    ;\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + \"=\");\n    }\n    return parts.join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/buffer/index.js":
/*!******************************************!*\
  !*** ../../node_modules/buffer/index.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ /* eslint-disable no-proto */ \nconst base64 = __webpack_require__(/*! base64-js */ \"(app-pages-browser)/../../node_modules/base64-js/index.js\");\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"(app-pages-browser)/../../node_modules/ieee754/index.js\");\nconst customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" // eslint-disable-line dot-notation\n ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") // eslint-disable-line dot-notation\n : null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nconst K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(\"This browser lacks typed array (Uint8Array) support which is required by \" + \"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n}\nfunction typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n        const arr = new Uint8Array(1);\n        const proto = {\n            foo: function() {\n                return 42;\n            }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n    } catch (e) {\n        return false;\n    }\n}\nObject.defineProperty(Buffer.prototype, \"parent\", {\n    enumerable: true,\n    get: function() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.buffer;\n    }\n});\nObject.defineProperty(Buffer.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.byteOffset;\n    }\n});\nfunction createBuffer(length) {\n    if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    }\n    // Return an augmented `Uint8Array` instance\n    const buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */ function Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        }\n        return allocUnsafe(arg);\n    }\n    return from(arg, encodingOrOffset, length);\n}\n_c = Buffer;\nBuffer.poolSize = 8192 // not used by this implementation\n;\nfunction from(value, encodingOrOffset, length) {\n    if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n    }\n    if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n    }\n    if (value == null) {\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof value);\n    }\n    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof value === \"number\") {\n        throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    }\n    const valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) {\n        return Buffer.from(valueOf, encodingOrOffset, length);\n    }\n    const b = fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n    }\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/ Buffer.from = function(value, encodingOrOffset, length) {\n    return from(value, encodingOrOffset, length);\n};\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\nfunction assertSize(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n    } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n    }\n}\nfunction alloc(size, fill, encoding) {\n    assertSize(size);\n    if (size <= 0) {\n        return createBuffer(size);\n    }\n    if (fill !== undefined) {\n        // Only pay attention to encoding if it's a string. This\n        // prevents accidentally sending in a number that would\n        // be interpreted as a start offset.\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n    }\n    return createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/ Buffer.alloc = function(size, fill, encoding) {\n    return alloc(size, fill, encoding);\n};\nfunction allocUnsafe(size) {\n    assertSize(size);\n    return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */ Buffer.allocUnsafe = function(size) {\n    return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */ Buffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(size);\n};\nfunction fromString(string, encoding) {\n    if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n    }\n    if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n    }\n    const length = byteLength(string, encoding) | 0;\n    let buf = createBuffer(length);\n    const actual = buf.write(string, encoding);\n    if (actual !== length) {\n        // Writing a hex string, for example, that contains invalid characters will\n        // cause everything after the first invalid character to be ignored. (e.g.\n        // 'abxxcd' will be treated as 'ab')\n        buf = buf.slice(0, actual);\n    }\n    return buf;\n}\nfunction fromArrayLike(array) {\n    const length = array.length < 0 ? 0 : checked(array.length) | 0;\n    const buf = createBuffer(length);\n    for(let i = 0; i < length; i += 1){\n        buf[i] = array[i] & 255;\n    }\n    return buf;\n}\nfunction fromArrayView(arrayView) {\n    if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return fromArrayLike(arrayView);\n}\nfunction fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n    }\n    if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n    }\n    let buf;\n    if (byteOffset === undefined && length === undefined) {\n        buf = new Uint8Array(array);\n    } else if (length === undefined) {\n        buf = new Uint8Array(array, byteOffset);\n    } else {\n        buf = new Uint8Array(array, byteOffset, length);\n    }\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\nfunction fromObject(obj) {\n    if (Buffer.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n            return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n    }\n    if (obj.length !== undefined) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n    }\n    if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n    }\n}\nfunction checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum \" + \"size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n    }\n    return length | 0;\n}\nfunction SlowBuffer(length) {\n    if (+length != length) {\n        length = 0;\n    }\n    return Buffer.alloc(+length);\n}\n_c1 = SlowBuffer;\nBuffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n    ;\n};\nBuffer.compare = function compare(a, b) {\n    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n        throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    }\n    if (a === b) return 0;\n    let x = a.length;\n    let y = b.length;\n    for(let i = 0, len = Math.min(x, y); i < len; ++i){\n        if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n        }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch(String(encoding).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return true;\n        default:\n            return false;\n    }\n};\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n    if (list.length === 0) {\n        return Buffer.alloc(0);\n    }\n    let i;\n    if (length === undefined) {\n        length = 0;\n        for(i = 0; i < list.length; ++i){\n            length += list[i].length;\n        }\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    let pos = 0;\n    for(i = 0; i < list.length; ++i){\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n                buf.copy(buffer, pos);\n            } else {\n                Uint8Array.prototype.set.call(buffer, buf, pos);\n            }\n        } else if (!Buffer.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n            buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n    }\n    return buffer;\n};\nfunction byteLength(string, encoding) {\n    if (Buffer.isBuffer(string)) {\n        return string.length;\n    }\n    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n    }\n    if (typeof string !== \"string\") {\n        throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + \"Received type \" + typeof string);\n    }\n    const len = string.length;\n    const mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n    // Use a for loop to avoid recursion\n    let loweredCase = false;\n    for(;;){\n        switch(encoding){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return len;\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return len * 2;\n            case \"hex\":\n                return len >>> 1;\n            case \"base64\":\n                return base64ToBytes(string).length;\n            default:\n                if (loweredCase) {\n                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n                    ;\n                }\n                encoding = (\"\" + encoding).toLowerCase();\n                loweredCase = true;\n        }\n    }\n}\nBuffer.byteLength = byteLength;\nfunction slowToString(encoding, start, end) {\n    let loweredCase = false;\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n        start = 0;\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n        return \"\";\n    }\n    if (end === undefined || end > this.length) {\n        end = this.length;\n    }\n    if (end <= 0) {\n        return \"\";\n    }\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) {\n        return \"\";\n    }\n    if (!encoding) encoding = \"utf8\";\n    while(true){\n        switch(encoding){\n            case \"hex\":\n                return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8Slice(this, start, end);\n            case \"ascii\":\n                return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n                return latin1Slice(this, start, end);\n            case \"base64\":\n                return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return utf16leSlice(this, start, end);\n            default:\n                if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                encoding = (encoding + \"\").toLowerCase();\n                loweredCase = true;\n        }\n    }\n}\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true;\nfunction swap(b, n, m) {\n    const i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n}\nBuffer.prototype.swap16 = function swap16() {\n    const len = this.length;\n    if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    }\n    for(let i = 0; i < len; i += 2){\n        swap(this, i, i + 1);\n    }\n    return this;\n};\nBuffer.prototype.swap32 = function swap32() {\n    const len = this.length;\n    if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    }\n    for(let i = 0; i < len; i += 4){\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n    }\n    return this;\n};\nBuffer.prototype.swap64 = function swap64() {\n    const len = this.length;\n    if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    }\n    for(let i = 0; i < len; i += 8){\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n    }\n    return this;\n};\nBuffer.prototype.toString = function toString() {\n    const length = this.length;\n    if (length === 0) return \"\";\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n};\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\nBuffer.prototype.equals = function equals(b) {\n    if (!Buffer.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n    if (this === b) return true;\n    return Buffer.compare(this, b) === 0;\n};\nBuffer.prototype.inspect = function inspect() {\n    let str = \"\";\n    const max = exports.INSPECT_MAX_BYTES;\n    str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n    if (this.length > max) str += \" ... \";\n    return \"<Buffer \" + str + \">\";\n};\nif (customInspectSymbol) {\n    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n}\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (isInstance(target, Uint8Array)) {\n        target = Buffer.from(target, target.offset, target.byteLength);\n    }\n    if (!Buffer.isBuffer(target)) {\n        throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + \"Received type \" + typeof target);\n    }\n    if (start === undefined) {\n        start = 0;\n    }\n    if (end === undefined) {\n        end = target ? target.length : 0;\n    }\n    if (thisStart === undefined) {\n        thisStart = 0;\n    }\n    if (thisEnd === undefined) {\n        thisEnd = this.length;\n    }\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n    }\n    if (thisStart >= thisEnd && start >= end) {\n        return 0;\n    }\n    if (thisStart >= thisEnd) {\n        return -1;\n    }\n    if (start >= end) {\n        return 1;\n    }\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    let x = thisEnd - thisStart;\n    let y = end - start;\n    const len = Math.min(x, y);\n    const thisCopy = this.slice(thisStart, thisEnd);\n    const targetCopy = target.slice(start, end);\n    for(let i = 0; i < len; ++i){\n        if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n        }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n    // Normalize byteOffset\n    if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n        byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n        byteOffset = -0x80000000;\n    }\n    byteOffset = +byteOffset // Coerce to Number.\n    ;\n    if (numberIsNaN(byteOffset)) {\n        // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n        byteOffset = dir ? 0 : buffer.length - 1;\n    }\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1;\n        else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n    }\n    // Normalize val\n    if (typeof val === \"string\") {\n        val = Buffer.from(val, encoding);\n    }\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (Buffer.isBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) {\n            return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === \"number\") {\n        val = val & 0xFF // Search for a byte value [0-255]\n        ;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n        }\n        return arrayIndexOf(buffer, [\n            val\n        ], byteOffset, encoding, dir);\n    }\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    let indexSize = 1;\n    let arrLength = arr.length;\n    let valLength = val.length;\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n                return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n        }\n    }\n    function read(buf, i) {\n        if (indexSize === 1) {\n            return buf[i];\n        } else {\n            return buf.readUInt16BE(i * indexSize);\n        }\n    }\n    let i;\n    if (dir) {\n        let foundIndex = -1;\n        for(i = byteOffset; i < arrLength; i++){\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                if (foundIndex === -1) foundIndex = i;\n                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n            } else {\n                if (foundIndex !== -1) i -= i - foundIndex;\n                foundIndex = -1;\n            }\n        }\n    } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for(i = byteOffset; i >= 0; i--){\n            let found = true;\n            for(let j = 0; j < valLength; j++){\n                if (read(arr, i + j) !== read(val, j)) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return i;\n        }\n    }\n    return -1;\n}\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n};\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    const remaining = buf.length - offset;\n    if (!length) {\n        length = remaining;\n    } else {\n        length = Number(length);\n        if (length > remaining) {\n            length = remaining;\n        }\n    }\n    const strLen = string.length;\n    if (length > strLen / 2) {\n        length = strLen / 2;\n    }\n    let i;\n    for(i = 0; i < length; ++i){\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n    }\n    return i;\n}\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = \"utf8\";\n        } else {\n            encoding = length;\n            length = undefined;\n        }\n    } else {\n        throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n    }\n    const remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n    }\n    if (!encoding) encoding = \"utf8\";\n    let loweredCase = false;\n    for(;;){\n        switch(encoding){\n            case \"hex\":\n                return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return asciiWrite(this, string, offset, length);\n            case \"base64\":\n                // Warning: maxLength not taken into account in base64Write\n                return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return ucs2Write(this, string, offset, length);\n            default:\n                if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                encoding = (\"\" + encoding).toLowerCase();\n                loweredCase = true;\n        }\n    }\n};\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n    } else {\n        return base64.fromByteArray(buf.slice(start, end));\n    }\n}\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    const res = [];\n    let i = start;\n    while(i < end){\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte;\n                    }\n                    break;\n                case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                        if (tempCodePoint > 0x7F) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n            }\n        }\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n    }\n    return decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n    const len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n        ;\n    }\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    let res = \"\";\n    let i = 0;\n    while(i < len){\n        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n    return res;\n}\nfunction asciiSlice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i){\n        ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n    return ret;\n}\nfunction latin1Slice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i){\n        ret += String.fromCharCode(buf[i]);\n    }\n    return ret;\n}\nfunction hexSlice(buf, start, end) {\n    const len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    let out = \"\";\n    for(let i = start; i < end; ++i){\n        out += hexSliceLookupTable[buf[i]];\n    }\n    return out;\n}\nfunction utf16leSlice(buf, start, end) {\n    const bytes = buf.slice(start, end);\n    let res = \"\";\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for(let i = 0; i < bytes.length - 1; i += 2){\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n    return res;\n}\nBuffer.prototype.slice = function slice(start, end) {\n    const len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n    } else if (start > len) {\n        start = len;\n    }\n    if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n    } else if (end > len) {\n        end = len;\n    }\n    if (end < start) end = start;\n    const newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, Buffer.prototype);\n    return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */ function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n    if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n}\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100)){\n        val += this[offset + i] * mul;\n    }\n    return val;\n};\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        checkOffset(offset, byteLength, this.length);\n    }\n    let val = this[offset + --byteLength];\n    let mul = 1;\n    while(byteLength > 0 && (mul *= 0x100)){\n        val += this[offset + --byteLength] * mul;\n    }\n    return val;\n};\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n};\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n};\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n};\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n});\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n});\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100)){\n        val += this[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let i = byteLength;\n    let mul = 1;\n    let val = this[offset + --i];\n    while(i > 0 && (mul *= 0x100)){\n        val += this[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n};\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow\n    );\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n});\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n});\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, true, 23, 4);\n};\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, false, 23, 4);\n};\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, true, 52, 8);\n};\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, false, 52, 8);\n};\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n}\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let mul = 1;\n    let i = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nfunction wrtBigUInt64LE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n}\nfunction wrtBigUInt64BE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n}\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n};\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    if (offset < 0) throw new RangeError(\"Index out of range\");\n}\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n    }\n    ieee754.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n}\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n};\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n    }\n    ieee754.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n}\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n};\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!Buffer.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n    // Fatal error conditions\n    if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n    }\n    if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n    if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n    }\n    const len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        // Use built-in when available, missing from IE11\n        this.copyWithin(targetStart, start, end);\n    } else {\n        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    }\n    return len;\n};\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n        } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n        }\n        if (encoding !== undefined && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n                // Fast path: If `val` fits into a single byte, use that numeric value.\n                val = code;\n            }\n        }\n    } else if (typeof val === \"number\") {\n        val = val & 255;\n    } else if (typeof val === \"boolean\") {\n        val = Number(val);\n    }\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n    }\n    if (end <= start) {\n        return this;\n    }\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    let i;\n    if (typeof val === \"number\") {\n        for(i = start; i < end; ++i){\n            this[i] = val;\n        }\n    } else {\n        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for(i = 0; i < end - start; ++i){\n            this[i + start] = bytes[i % len];\n        }\n    }\n    return this;\n};\n// CUSTOM ERRORS\n// =============\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {};\nfunction E(sym, getMessage, Base) {\n    errors[sym] = class NodeError extends Base {\n        get code() {\n            return sym;\n        }\n        set code(value) {\n            Object.defineProperty(this, \"code\", {\n                configurable: true,\n                enumerable: true,\n                value,\n                writable: true\n            });\n        }\n        toString() {\n            return \"\".concat(this.name, \" [\").concat(sym, \"]: \").concat(this.message);\n        }\n        constructor(){\n            super();\n            Object.defineProperty(this, \"message\", {\n                value: getMessage.apply(this, arguments),\n                writable: true,\n                configurable: true\n            });\n            // Add the error code to the name to include it in the stack trace.\n            this.name = \"\".concat(this.name, \" [\").concat(sym, \"]\");\n            // Access the stack to generate the error message including the error code\n            // from the name.\n            this.stack // eslint-disable-line no-unused-expressions\n            ;\n            // Reset the name to the actual name.\n            delete this.name;\n        }\n    };\n}\n_c2 = E;\nE(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n    if (name) {\n        return \"\".concat(name, \" is outside of buffer bounds\");\n    }\n    return \"Attempt to access memory outside buffer bounds\";\n}, RangeError);\nE(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n    return 'The \"'.concat(name, '\" argument must be of type number. Received type ').concat(typeof actual);\n}, TypeError);\nE(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n    let msg = 'The value of \"'.concat(str, '\" is out of range.');\n    let received = input;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n        received = addNumericalSeparator(String(input));\n    } else if (typeof input === \"bigint\") {\n        received = String(input);\n        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n        }\n        received += \"n\";\n    }\n    msg += \" It must be \".concat(range, \". Received \").concat(received);\n    return msg;\n}, RangeError);\nfunction addNumericalSeparator(val) {\n    let res = \"\";\n    let i = val.length;\n    const start = val[0] === \"-\" ? 1 : 0;\n    for(; i >= start + 4; i -= 3){\n        res = \"_\".concat(val.slice(i - 3, i)).concat(res);\n    }\n    return \"\".concat(val.slice(0, i)).concat(res);\n}\n// CHECK FUNCTIONS\n// ===============\nfunction checkBounds(buf, offset, byteLength) {\n    validateNumber(offset, \"offset\");\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n        boundsError(offset, buf.length - (byteLength + 1));\n    }\n}\nfunction checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength > 3) {\n            if (min === 0 || min === BigInt(0)) {\n                range = \">= 0\".concat(n, \" and < 2\").concat(n, \" ** \").concat((byteLength + 1) * 8).concat(n);\n            } else {\n                range = \">= -(2\".concat(n, \" ** \").concat((byteLength + 1) * 8 - 1).concat(n, \") and < 2 ** \") + \"\".concat((byteLength + 1) * 8 - 1).concat(n);\n            }\n        } else {\n            range = \">= \".concat(min).concat(n, \" and <= \").concat(max).concat(n);\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n    }\n    checkBounds(buf, offset, byteLength);\n}\nfunction validateNumber(value, name) {\n    if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    }\n}\nfunction boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n    }\n    if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    }\n    throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \">= \".concat(type ? 1 : 0, \" and <= \").concat(length), value);\n}\n// HELPER FUNCTIONS\n// ================\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split(\"=\")[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace(INVALID_BASE64_RE, \"\");\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return \"\";\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while(str.length % 4 !== 0){\n        str = str + \"=\";\n    }\n    return str;\n}\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for(let i = 0; i < length; ++i){\n        codePoint = string.charCodeAt(i);\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                }\n                // valid lead\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        }\n        leadSurrogate = null;\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else {\n            throw new Error(\"Invalid code point\");\n        }\n    }\n    return bytes;\n}\nfunction asciiToBytes(str) {\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        // Node's code seems to be doing this and not & 0x7F..\n        byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n    return byteArray;\n}\nfunction utf16leToBytes(str, units) {\n    let c, hi, lo;\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n    }\n    return byteArray;\n}\nfunction base64ToBytes(str) {\n    return base64.toByteArray(base64clean(str));\n}\nfunction blitBuffer(src, dst, offset, length) {\n    let i;\n    for(i = 0; i < length; ++i){\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n    }\n    return i;\n}\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj // eslint-disable-line no-self-compare\n    ;\n}\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = function() {\n    const alphabet = \"0123456789abcdef\";\n    const table = new Array(256);\n    for(let i = 0; i < 16; ++i){\n        const i16 = i * 16;\n        for(let j = 0; j < 16; ++j){\n            table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n    }\n    return table;\n}();\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod(fn) {\n    return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n}\nfunction BufferBigIntNotDefined() {\n    throw new Error(\"BigInt not supported\");\n}\n_c3 = BufferBigIntNotDefined;\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Buffer\");\n$RefreshReg$(_c1, \"SlowBuffer\");\n$RefreshReg$(_c2, \"E\");\n$RefreshReg$(_c3, \"BufferBigIntNotDefined\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../../node_modules/ieee754/index.js":
/*!*******************************************!*\
  !*** ../../node_modules/ieee754/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8){}\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8){}\n    if (e === 0) {\n        e = 1 - eBias;\n    } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n    } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) {\n            value += rt / c;\n        } else {\n            value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8){}\n    e = e << mLen | m;\n    eLen += mLen;\n    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8){}\n    buffer[offset + i - d] |= s * 128;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx1RkFBdUYsR0FDdkZBLFlBQVksR0FBRyxTQUFVRSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDekQsSUFBSUMsR0FBR0M7SUFDUCxJQUFJQyxPQUFPLFNBQVUsSUFBS0osT0FBTztJQUNqQyxJQUFJSyxPQUFPLENBQUMsS0FBS0QsSUFBRyxJQUFLO0lBQ3pCLElBQUlFLFFBQVFELFFBQVE7SUFDcEIsSUFBSUUsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsSUFBSVQsT0FBUUUsU0FBUyxJQUFLO0lBQzlCLElBQUlRLElBQUlWLE9BQU8sQ0FBQyxJQUFJO0lBQ3BCLElBQUlXLElBQUliLE1BQU0sQ0FBQ0MsU0FBU1UsRUFBRTtJQUUxQkEsS0FBS0M7SUFFTFAsSUFBSVEsSUFBSyxDQUFDLEtBQU0sQ0FBQ0gsS0FBSyxJQUFLO0lBQzNCRyxNQUFPLENBQUNIO0lBQ1JBLFNBQVNIO0lBQ1QsTUFBT0csUUFBUSxHQUFHTCxJQUFJLElBQUssTUFBT0wsTUFBTSxDQUFDQyxTQUFTVSxFQUFFLEVBQUVBLEtBQUtDLEdBQUdGLFNBQVMsRUFBRyxDQUFDO0lBRTNFSixJQUFJRCxJQUFLLENBQUMsS0FBTSxDQUFDSyxLQUFLLElBQUs7SUFDM0JMLE1BQU8sQ0FBQ0s7SUFDUkEsU0FBU1A7SUFDVCxNQUFPTyxRQUFRLEdBQUdKLElBQUksSUFBSyxNQUFPTixNQUFNLENBQUNDLFNBQVNVLEVBQUUsRUFBRUEsS0FBS0MsR0FBR0YsU0FBUyxFQUFHLENBQUM7SUFFM0UsSUFBSUwsTUFBTSxHQUFHO1FBQ1hBLElBQUksSUFBSUk7SUFDVixPQUFPLElBQUlKLE1BQU1HLE1BQU07UUFDckIsT0FBT0YsSUFBSVEsTUFBTyxDQUFDRCxJQUFJLENBQUMsSUFBSSxLQUFLRTtJQUNuQyxPQUFPO1FBQ0xULElBQUlBLElBQUlVLEtBQUtDLEdBQUcsQ0FBQyxHQUFHZDtRQUNwQkUsSUFBSUEsSUFBSUk7SUFDVjtJQUNBLE9BQU8sQ0FBQ0ksSUFBSSxDQUFDLElBQUksS0FBS1AsSUFBSVUsS0FBS0MsR0FBRyxDQUFDLEdBQUdaLElBQUlGO0FBQzVDO0FBRUFMLGFBQWEsR0FBRyxTQUFVRSxNQUFNLEVBQUVtQixLQUFLLEVBQUVsQixNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNO0lBQ2pFLElBQUlDLEdBQUdDLEdBQUdjO0lBQ1YsSUFBSWIsT0FBTyxTQUFVLElBQUtKLE9BQU87SUFDakMsSUFBSUssT0FBTyxDQUFDLEtBQUtELElBQUcsSUFBSztJQUN6QixJQUFJRSxRQUFRRCxRQUFRO0lBQ3BCLElBQUlhLEtBQU1sQixTQUFTLEtBQUthLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTUQsS0FBS0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNO0lBQzlELElBQUlOLElBQUlULE9BQU8sSUFBS0UsU0FBUztJQUM3QixJQUFJUSxJQUFJVixPQUFPLElBQUksQ0FBQztJQUNwQixJQUFJVyxJQUFJTSxRQUFRLEtBQU1BLFVBQVUsS0FBSyxJQUFJQSxRQUFRLElBQUssSUFBSTtJQUUxREEsUUFBUUgsS0FBS00sR0FBRyxDQUFDSDtJQUVqQixJQUFJSSxNQUFNSixVQUFVQSxVQUFVSixVQUFVO1FBQ3RDVCxJQUFJaUIsTUFBTUosU0FBUyxJQUFJO1FBQ3ZCZCxJQUFJRztJQUNOLE9BQU87UUFDTEgsSUFBSVcsS0FBS1EsS0FBSyxDQUFDUixLQUFLUyxHQUFHLENBQUNOLFNBQVNILEtBQUtVLEdBQUc7UUFDekMsSUFBSVAsUUFBU0MsQ0FBQUEsSUFBSUosS0FBS0MsR0FBRyxDQUFDLEdBQUcsQ0FBQ1osRUFBQyxJQUFLLEdBQUc7WUFDckNBO1lBQ0FlLEtBQUs7UUFDUDtRQUNBLElBQUlmLElBQUlJLFNBQVMsR0FBRztZQUNsQlUsU0FBU0UsS0FBS0Q7UUFDaEIsT0FBTztZQUNMRCxTQUFTRSxLQUFLTCxLQUFLQyxHQUFHLENBQUMsR0FBRyxJQUFJUjtRQUNoQztRQUNBLElBQUlVLFFBQVFDLEtBQUssR0FBRztZQUNsQmY7WUFDQWUsS0FBSztRQUNQO1FBRUEsSUFBSWYsSUFBSUksU0FBU0QsTUFBTTtZQUNyQkYsSUFBSTtZQUNKRCxJQUFJRztRQUNOLE9BQU8sSUFBSUgsSUFBSUksU0FBUyxHQUFHO1lBQ3pCSCxJQUFJLENBQUMsUUFBU2MsSUFBSyxLQUFLSixLQUFLQyxHQUFHLENBQUMsR0FBR2Q7WUFDcENFLElBQUlBLElBQUlJO1FBQ1YsT0FBTztZQUNMSCxJQUFJYSxRQUFRSCxLQUFLQyxHQUFHLENBQUMsR0FBR1IsUUFBUSxLQUFLTyxLQUFLQyxHQUFHLENBQUMsR0FBR2Q7WUFDakRFLElBQUk7UUFDTjtJQUNGO0lBRUEsTUFBT0YsUUFBUSxHQUFHSCxNQUFNLENBQUNDLFNBQVNVLEVBQUUsR0FBR0wsSUFBSSxNQUFNSyxLQUFLQyxHQUFHTixLQUFLLEtBQUtILFFBQVEsRUFBRyxDQUFDO0lBRS9FRSxJQUFJLEtBQU1GLE9BQVFHO0lBQ2xCQyxRQUFRSjtJQUNSLE1BQU9JLE9BQU8sR0FBR1AsTUFBTSxDQUFDQyxTQUFTVSxFQUFFLEdBQUdOLElBQUksTUFBTU0sS0FBS0MsR0FBR1AsS0FBSyxLQUFLRSxRQUFRLEVBQUcsQ0FBQztJQUU5RVAsTUFBTSxDQUFDQyxTQUFTVSxJQUFJQyxFQUFFLElBQUlDLElBQUk7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzPzVlMTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiJdLCJuYW1lcyI6WyJleHBvcnRzIiwicmVhZCIsImJ1ZmZlciIsIm9mZnNldCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZSIsIm0iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJpIiwiZCIsInMiLCJOYU4iLCJJbmZpbml0eSIsIk1hdGgiLCJwb3ciLCJ3cml0ZSIsInZhbHVlIiwiYyIsInJ0IiwiYWJzIiwiaXNOYU4iLCJmbG9vciIsImxvZyIsIkxOMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/_shims/MultipartBody.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/_shims/MultipartBody.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: function() { return /* binding */ MultipartBody; }\n/* harmony export */ });\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ class MultipartBody {\n    get [Symbol.toStringTag]() {\n        return \"MultipartBody\";\n    }\n    constructor(body){\n        this.body = body;\n    }\n} //# sourceMappingURL=MultipartBody.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL011bHRpcGFydEJvZHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLE1BQU1BO0lBSVQsSUFBSSxDQUFDQyxPQUFPQyxXQUFXLENBQUMsR0FBRztRQUN2QixPQUFPO0lBQ1g7SUFMQUMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO0lBQ2hCO0FBSUosRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvTXVsdGlwYXJ0Qm9keS5tanM/N2RhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aXBhcnRCb2R5IHtcbiAgICBjb25zdHJ1Y3Rvcihib2R5KSB7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuICdNdWx0aXBhcnRCb2R5JztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NdWx0aXBhcnRCb2R5Lm1qcy5tYXAiXSwibmFtZXMiOlsiTXVsdGlwYXJ0Qm9keSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiY29uc3RydWN0b3IiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/_shims/MultipartBody.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/_shims/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/openai/_shims/index.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Blob; },\n/* harmony export */   File: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.File; },\n/* harmony export */   FormData: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData; },\n/* harmony export */   Headers: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Headers; },\n/* harmony export */   ReadableStream: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream; },\n/* harmony export */   Request: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Request; },\n/* harmony export */   Response: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.Response; },\n/* harmony export */   auto: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.auto; },\n/* harmony export */   fetch: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch; },\n/* harmony export */   fileFromPath: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath; },\n/* harmony export */   getDefaultAgent: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent; },\n/* harmony export */   getMultipartRequestOptions: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions; },\n/* harmony export */   isFsReadStream: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream; },\n/* harmony export */   kind: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind; },\n/* harmony export */   setShims: function() { return /* reexport safe */ _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims; }\n/* harmony export */ });\n/* harmony import */ var _registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry.mjs */ \"(app-pages-browser)/./node_modules/openai/_shims/registry.mjs\");\n/* harmony import */ var openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/_shims/auto/runtime */ \"(app-pages-browser)/./node_modules/openai/_shims/web-runtime.mjs\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\nif (!_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind) _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims(openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__.getRuntime(), {\n    auto: true\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztDQUVDLEdBQ3VDO0FBQ1c7QUFDbkQsSUFBSSxDQUFDQSwrQ0FBVSxFQUFFQSxtREFBYyxDQUFDQyxpRUFBZSxJQUFJO0lBQUVBLE1BQU07QUFBSztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanM/N2Y5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCAqIGFzIHNoaW1zIGZyb20gJy4vcmVnaXN0cnkubWpzJztcbmltcG9ydCAqIGFzIGF1dG8gZnJvbSAnb3BlbmFpL19zaGltcy9hdXRvL3J1bnRpbWUnO1xuaWYgKCFzaGltcy5raW5kKSBzaGltcy5zZXRTaGltcyhhdXRvLmdldFJ1bnRpbWUoKSwgeyBhdXRvOiB0cnVlIH0pO1xuZXhwb3J0ICogZnJvbSAnLi9yZWdpc3RyeS5tanMnO1xuIl0sIm5hbWVzIjpbInNoaW1zIiwiYXV0byIsImtpbmQiLCJzZXRTaGltcyIsImdldFJ1bnRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/_shims/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/_shims/registry.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/_shims/registry.mjs ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: function() { return /* binding */ Blob; },\n/* harmony export */   File: function() { return /* binding */ File; },\n/* harmony export */   FormData: function() { return /* binding */ FormData; },\n/* harmony export */   Headers: function() { return /* binding */ Headers; },\n/* harmony export */   ReadableStream: function() { return /* binding */ ReadableStream; },\n/* harmony export */   Request: function() { return /* binding */ Request; },\n/* harmony export */   Response: function() { return /* binding */ Response; },\n/* harmony export */   auto: function() { return /* binding */ auto; },\n/* harmony export */   fetch: function() { return /* binding */ fetch; },\n/* harmony export */   fileFromPath: function() { return /* binding */ fileFromPath; },\n/* harmony export */   getDefaultAgent: function() { return /* binding */ getDefaultAgent; },\n/* harmony export */   getMultipartRequestOptions: function() { return /* binding */ getMultipartRequestOptions; },\n/* harmony export */   isFsReadStream: function() { return /* binding */ isFsReadStream; },\n/* harmony export */   kind: function() { return /* binding */ kind; },\n/* harmony export */   setShims: function() { return /* binding */ setShims; }\n/* harmony export */ });\nlet auto = false;\nlet kind = undefined;\nlet fetch = undefined;\nlet Request = undefined;\nlet Response = undefined;\nlet Headers = undefined;\nlet FormData = undefined;\nlet Blob = undefined;\nlet File = undefined;\nlet ReadableStream = undefined;\nlet getMultipartRequestOptions = undefined;\nlet getDefaultAgent = undefined;\nlet fileFromPath = undefined;\nlet isFsReadStream = undefined;\nfunction setShims(shims) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n        auto: false\n    };\n    if (auto) {\n        throw new Error(\"you must `import 'openai/shims/\".concat(shims.kind, \"'` before importing anything else from openai\"));\n    }\n    if (kind) {\n        throw new Error(\"can't `import 'openai/shims/\".concat(shims.kind, \"'` after `import 'openai/shims/\").concat(kind, \"'`\"));\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n} //# sourceMappingURL=registry.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL3JlZ2lzdHJ5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxJQUFJQSxPQUFPLE1BQU07QUFDakIsSUFBSUMsT0FBT0MsVUFBVTtBQUNyQixJQUFJQyxRQUFRRCxVQUFVO0FBQ3RCLElBQUlFLFVBQVVGLFVBQVU7QUFDeEIsSUFBSUcsV0FBV0gsVUFBVTtBQUN6QixJQUFJSSxVQUFVSixVQUFVO0FBQ3hCLElBQUlLLFdBQVdMLFVBQVU7QUFDekIsSUFBSU0sT0FBT04sVUFBVTtBQUNyQixJQUFJTyxPQUFPUCxVQUFVO0FBQ3JCLElBQUlRLGlCQUFpQlIsVUFBVTtBQUMvQixJQUFJUyw2QkFBNkJULFVBQVU7QUFDM0MsSUFBSVUsa0JBQWtCVixVQUFVO0FBQ2hDLElBQUlXLGVBQWVYLFVBQVU7QUFDN0IsSUFBSVksaUJBQWlCWixVQUFVO0FBQy9CLFNBQVNhLFNBQVNDLEtBQUs7UUFBRUMsVUFBQUEsaUVBQVU7UUFBRWpCLE1BQU07SUFBTTtJQUNwRCxJQUFJQSxNQUFNO1FBQ04sTUFBTSxJQUFJa0IsTUFBTSxrQ0FBOEMsT0FBWEYsTUFBTWYsSUFBSSxFQUFDO0lBQ2xFO0lBQ0EsSUFBSUEsTUFBTTtRQUNOLE1BQU0sSUFBSWlCLE1BQU0sK0JBQThFakIsT0FBOUNlLE1BQU1mLElBQUksRUFBQyxtQ0FBd0MsT0FBTEEsTUFBSztJQUN2RztJQUNBRCxPQUFPaUIsUUFBUWpCLElBQUk7SUFDbkJDLE9BQU9lLE1BQU1mLElBQUk7SUFDakJFLFFBQVFhLE1BQU1iLEtBQUs7SUFDbkJDLFVBQVVZLE1BQU1aLE9BQU87SUFDdkJDLFdBQVdXLE1BQU1YLFFBQVE7SUFDekJDLFVBQVVVLE1BQU1WLE9BQU87SUFDdkJDLFdBQVdTLE1BQU1ULFFBQVE7SUFDekJDLE9BQU9RLE1BQU1SLElBQUk7SUFDakJDLE9BQU9PLE1BQU1QLElBQUk7SUFDakJDLGlCQUFpQk0sTUFBTU4sY0FBYztJQUNyQ0MsNkJBQTZCSyxNQUFNTCwwQkFBMEI7SUFDN0RDLGtCQUFrQkksTUFBTUosZUFBZTtJQUN2Q0MsZUFBZUcsTUFBTUgsWUFBWTtJQUNqQ0MsaUJBQWlCRSxNQUFNRixjQUFjO0FBQ3pDLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL3JlZ2lzdHJ5Lm1qcz9iNGMwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgYXV0byA9IGZhbHNlO1xuZXhwb3J0IGxldCBraW5kID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBmZXRjaCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVxdWVzdCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVzcG9uc2UgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEhlYWRlcnMgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEZvcm1EYXRhID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBCbG9iID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBGaWxlID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBSZWFkYWJsZVN0cmVhbSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGdldERlZmF1bHRBZ2VudCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZmlsZUZyb21QYXRoID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBpc0ZzUmVhZFN0cmVhbSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBmdW5jdGlvbiBzZXRTaGltcyhzaGltcywgb3B0aW9ucyA9IHsgYXV0bzogZmFsc2UgfSkge1xuICAgIGlmIChhdXRvKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgeW91IG11c3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYmVmb3JlIGltcG9ydGluZyBhbnl0aGluZyBlbHNlIGZyb20gb3BlbmFpYCk7XG4gICAgfVxuICAgIGlmIChraW5kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYWZ0ZXIgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtraW5kfSdcXGBgKTtcbiAgICB9XG4gICAgYXV0byA9IG9wdGlvbnMuYXV0bztcbiAgICBraW5kID0gc2hpbXMua2luZDtcbiAgICBmZXRjaCA9IHNoaW1zLmZldGNoO1xuICAgIFJlcXVlc3QgPSBzaGltcy5SZXF1ZXN0O1xuICAgIFJlc3BvbnNlID0gc2hpbXMuUmVzcG9uc2U7XG4gICAgSGVhZGVycyA9IHNoaW1zLkhlYWRlcnM7XG4gICAgRm9ybURhdGEgPSBzaGltcy5Gb3JtRGF0YTtcbiAgICBCbG9iID0gc2hpbXMuQmxvYjtcbiAgICBGaWxlID0gc2hpbXMuRmlsZTtcbiAgICBSZWFkYWJsZVN0cmVhbSA9IHNoaW1zLlJlYWRhYmxlU3RyZWFtO1xuICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zID0gc2hpbXMuZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM7XG4gICAgZ2V0RGVmYXVsdEFnZW50ID0gc2hpbXMuZ2V0RGVmYXVsdEFnZW50O1xuICAgIGZpbGVGcm9tUGF0aCA9IHNoaW1zLmZpbGVGcm9tUGF0aDtcbiAgICBpc0ZzUmVhZFN0cmVhbSA9IHNoaW1zLmlzRnNSZWFkU3RyZWFtO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnaXN0cnkubWpzLm1hcCJdLCJuYW1lcyI6WyJhdXRvIiwia2luZCIsInVuZGVmaW5lZCIsImZldGNoIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiSGVhZGVycyIsIkZvcm1EYXRhIiwiQmxvYiIsIkZpbGUiLCJSZWFkYWJsZVN0cmVhbSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZ2V0RGVmYXVsdEFnZW50IiwiZmlsZUZyb21QYXRoIiwiaXNGc1JlYWRTdHJlYW0iLCJzZXRTaGltcyIsInNoaW1zIiwib3B0aW9ucyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/_shims/registry.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/_shims/web-runtime.mjs":
/*!****************************************************!*\
  !*** ./node_modules/openai/_shims/web-runtime.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntime: function() { return /* binding */ getRuntime; }\n/* harmony export */ });\n/* harmony import */ var _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MultipartBody.mjs */ \"(app-pages-browser)/./node_modules/openai/_shims/MultipartBody.mjs\");\n\nfunction getRuntime() {\n    let { manuallyImported } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const recommendation = manuallyImported ? \"You may need to use polyfills\" : \"Add one of these imports before your first `import … from 'openai'`:\\n- `import 'openai/shims/node'` (if you're running on Node)\\n- `import 'openai/shims/web'` (otherwise)\\n\";\n    let _fetch, _Request, _Response, _Headers;\n    try {\n        // @ts-ignore\n        _fetch = fetch;\n        // @ts-ignore\n        _Request = Request;\n        // @ts-ignore\n        _Response = Response;\n        // @ts-ignore\n        _Headers = Headers;\n    } catch (error) {\n        throw new Error(\"this environment is missing the following Web Fetch API type: \".concat(error.message, \". \").concat(recommendation));\n    }\n    return {\n        kind: \"web\",\n        fetch: _fetch,\n        Request: _Request,\n        Response: _Response,\n        Headers: _Headers,\n        FormData: // @ts-ignore\n        typeof FormData !== \"undefined\" ? FormData : class FormData1 {\n            // @ts-ignore\n            constructor(){\n                throw new Error(\"file uploads aren't supported in this environment yet as 'FormData' is undefined. \".concat(recommendation));\n            }\n        },\n        Blob: typeof Blob !== \"undefined\" ? Blob : class Blob1 {\n            constructor(){\n                throw new Error(\"file uploads aren't supported in this environment yet as 'Blob' is undefined. \".concat(recommendation));\n            }\n        },\n        File: // @ts-ignore\n        typeof File !== \"undefined\" ? File : class File1 {\n            // @ts-ignore\n            constructor(){\n                throw new Error(\"file uploads aren't supported in this environment yet as 'File' is undefined. \".concat(recommendation));\n            }\n        },\n        ReadableStream: // @ts-ignore\n        typeof ReadableStream !== \"undefined\" ? ReadableStream : class ReadableStream1 {\n            // @ts-ignore\n            constructor(){\n                throw new Error(\"streaming isn't supported in this environment yet as 'ReadableStream' is undefined. \".concat(recommendation));\n            }\n        },\n        getMultipartRequestOptions: async (// @ts-ignore\n        form, opts)=>({\n                ...opts,\n                body: new _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_0__.MultipartBody(form)\n            }),\n        getDefaultAgent: (url)=>undefined,\n        fileFromPath: ()=>{\n            throw new Error(\"The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads\");\n        },\n        isFsReadStream: (value)=>false\n    };\n} //# sourceMappingURL=web-runtime.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL3dlYi1ydW50aW1lLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRDtBQUM3QyxTQUFTQztRQUFXLEVBQUVDLGdCQUFnQixFQUFFLEdBQXBCLGlFQUF1QixDQUFDO0lBQy9DLE1BQU1DLGlCQUFpQkQsbUJBQ2xCLGtDQUNFO0lBSVAsSUFBSUUsUUFBUUMsVUFBVUMsV0FBV0M7SUFDakMsSUFBSTtRQUNBLGFBQWE7UUFDYkgsU0FBU0k7UUFDVCxhQUFhO1FBQ2JILFdBQVdJO1FBQ1gsYUFBYTtRQUNiSCxZQUFZSTtRQUNaLGFBQWE7UUFDYkgsV0FBV0k7SUFDZixFQUNBLE9BQU9DLE9BQU87UUFDVixNQUFNLElBQUlDLE1BQU0saUVBQW1GVixPQUFsQlMsTUFBTUUsT0FBTyxFQUFDLE1BQW1CLE9BQWZYO0lBQ3ZHO0lBQ0EsT0FBTztRQUNIWSxNQUFNO1FBQ05QLE9BQU9KO1FBQ1BLLFNBQVNKO1FBQ1RLLFVBQVVKO1FBQ1ZLLFNBQVNKO1FBQ1RTLFVBQ0EsYUFBYTtRQUNiLE9BQU9BLGFBQWEsY0FBY0EsV0FBWSxNQUFNQTtZQUNoRCxhQUFhO1lBQ2JDLGFBQWM7Z0JBQ1YsTUFBTSxJQUFJSixNQUFNLHFGQUFvRyxPQUFmVjtZQUN6RztRQUNKO1FBQ0FlLE1BQU0sT0FBT0EsU0FBUyxjQUFjQSxPQUFRLE1BQU1BO1lBQzlDRCxhQUFjO2dCQUNWLE1BQU0sSUFBSUosTUFBTSxpRkFBZ0csT0FBZlY7WUFDckc7UUFDSjtRQUNBZ0IsTUFDQSxhQUFhO1FBQ2IsT0FBT0EsU0FBUyxjQUFjQSxPQUFRLE1BQU1BO1lBQ3hDLGFBQWE7WUFDYkYsYUFBYztnQkFDVixNQUFNLElBQUlKLE1BQU0saUZBQWdHLE9BQWZWO1lBQ3JHO1FBQ0o7UUFDQWlCLGdCQUNBLGFBQWE7UUFDYixPQUFPQSxtQkFBbUIsY0FBY0EsaUJBQWtCLE1BQU1BO1lBQzVELGFBQWE7WUFDYkgsYUFBYztnQkFDVixNQUFNLElBQUlKLE1BQU0sdUZBQXNHLE9BQWZWO1lBQzNHO1FBQ0o7UUFDQWtCLDRCQUE0QixPQUM1QixhQUFhO1FBQ2JDLE1BQU1DLE9BQVU7Z0JBQ1osR0FBR0EsSUFBSTtnQkFDUEMsTUFBTSxJQUFJeEIsNkRBQWFBLENBQUNzQjtZQUM1QjtRQUNBRyxpQkFBaUIsQ0FBQ0MsTUFBUUM7UUFDMUJDLGNBQWM7WUFDVixNQUFNLElBQUlmLE1BQU07UUFDcEI7UUFDQWdCLGdCQUFnQixDQUFDQyxRQUFVO0lBQy9CO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvd2ViLXJ1bnRpbWUubWpzP2MwOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTXVsdGlwYXJ0Qm9keSB9IGZyb20gXCIuL011bHRpcGFydEJvZHkubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZSh7IG1hbnVhbGx5SW1wb3J0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb24gPSBtYW51YWxseUltcG9ydGVkID9cbiAgICAgICAgYFlvdSBtYXkgbmVlZCB0byB1c2UgcG9seWZpbGxzYFxuICAgICAgICA6IGBBZGQgb25lIG9mIHRoZXNlIGltcG9ydHMgYmVmb3JlIHlvdXIgZmlyc3QgXFxgaW1wb3J0IOKApiBmcm9tICdvcGVuYWknXFxgOlxuLSBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy9ub2RlJ1xcYCAoaWYgeW91J3JlIHJ1bm5pbmcgb24gTm9kZSlcbi0gXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvd2ViJ1xcYCAob3RoZXJ3aXNlKVxuYDtcbiAgICBsZXQgX2ZldGNoLCBfUmVxdWVzdCwgX1Jlc3BvbnNlLCBfSGVhZGVycztcbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIF9mZXRjaCA9IGZldGNoO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIF9SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBfUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBfSGVhZGVycyA9IEhlYWRlcnM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoaXMgZW52aXJvbm1lbnQgaXMgbWlzc2luZyB0aGUgZm9sbG93aW5nIFdlYiBGZXRjaCBBUEkgdHlwZTogJHtlcnJvci5tZXNzYWdlfS4gJHtyZWNvbW1lbmRhdGlvbn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogJ3dlYicsXG4gICAgICAgIGZldGNoOiBfZmV0Y2gsXG4gICAgICAgIFJlcXVlc3Q6IF9SZXF1ZXN0LFxuICAgICAgICBSZXNwb25zZTogX1Jlc3BvbnNlLFxuICAgICAgICBIZWFkZXJzOiBfSGVhZGVycyxcbiAgICAgICAgRm9ybURhdGE6IFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IChjbGFzcyBGb3JtRGF0YSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZpbGUgdXBsb2FkcyBhcmVuJ3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgeWV0IGFzICdGb3JtRGF0YScgaXMgdW5kZWZpbmVkLiAke3JlY29tbWVuZGF0aW9ufWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgQmxvYjogdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IChjbGFzcyBCbG9iIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmlsZSB1cGxvYWRzIGFyZW4ndCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCB5ZXQgYXMgJ0Jsb2InIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIEZpbGU6IFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyA/IEZpbGUgOiAoY2xhc3MgRmlsZSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZpbGUgdXBsb2FkcyBhcmVuJ3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgeWV0IGFzICdGaWxlJyBpcyB1bmRlZmluZWQuICR7cmVjb21tZW5kYXRpb259YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBSZWFkYWJsZVN0cmVhbTogXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSAndW5kZWZpbmVkJyA/IFJlYWRhYmxlU3RyZWFtIDogKGNsYXNzIFJlYWRhYmxlU3RyZWFtIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3RyZWFtaW5nIGlzbid0IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IHlldCBhcyAnUmVhZGFibGVTdHJlYW0nIGlzIHVuZGVmaW5lZC4gJHtyZWNvbW1lbmRhdGlvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zOiBhc3luYyAoXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZm9ybSwgb3B0cykgPT4gKHtcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICBib2R5OiBuZXcgTXVsdGlwYXJ0Qm9keShmb3JtKSxcbiAgICAgICAgfSksXG4gICAgICAgIGdldERlZmF1bHRBZ2VudDogKHVybCkgPT4gdW5kZWZpbmVkLFxuICAgICAgICBmaWxlRnJvbVBhdGg6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBmaWxlRnJvbVBhdGhgIGZ1bmN0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuIFNlZSB0aGUgUkVBRE1FIGZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vb3BlbmFpL29wZW5haS1ub2RlI2ZpbGUtdXBsb2FkcycpO1xuICAgICAgICB9LFxuICAgICAgICBpc0ZzUmVhZFN0cmVhbTogKHZhbHVlKSA9PiBmYWxzZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViLXJ1bnRpbWUubWpzLm1hcCJdLCJuYW1lcyI6WyJNdWx0aXBhcnRCb2R5IiwiZ2V0UnVudGltZSIsIm1hbnVhbGx5SW1wb3J0ZWQiLCJyZWNvbW1lbmRhdGlvbiIsIl9mZXRjaCIsIl9SZXF1ZXN0IiwiX1Jlc3BvbnNlIiwiX0hlYWRlcnMiLCJmZXRjaCIsIlJlcXVlc3QiLCJSZXNwb25zZSIsIkhlYWRlcnMiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImtpbmQiLCJGb3JtRGF0YSIsImNvbnN0cnVjdG9yIiwiQmxvYiIsIkZpbGUiLCJSZWFkYWJsZVN0cmVhbSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZm9ybSIsIm9wdHMiLCJib2R5IiwiZ2V0RGVmYXVsdEFnZW50IiwidXJsIiwidW5kZWZpbmVkIiwiZmlsZUZyb21QYXRoIiwiaXNGc1JlYWRTdHJlYW0iLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/_shims/web-runtime.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/_vendor/partial-json-parser/parser.mjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MalformedJSON: function() { return /* binding */ MalformedJSON; },\n/* harmony export */   PartialJSON: function() { return /* binding */ PartialJSON; },\n/* harmony export */   partialParse: function() { return /* binding */ partialParse; }\n/* harmony export */ });\nconst STR = 1;\nconst NUM = 2;\nconst ARR = 4;\nconst OBJ = 8;\nconst NULL = 16;\nconst BOOL = 32;\nconst NAN = 64;\nconst INFINITY = 128;\nconst MINUS_INFINITY = 256;\nconst INF = INFINITY | MINUS_INFINITY;\nconst SPECIAL = NULL | BOOL | INF | NAN;\nconst ATOM = STR | NUM | SPECIAL;\nconst COLLECTION = ARR | OBJ;\nconst ALL = ATOM | COLLECTION;\nconst Allow = {\n    STR,\n    NUM,\n    ARR,\n    OBJ,\n    NULL,\n    BOOL,\n    NAN,\n    INFINITY,\n    MINUS_INFINITY,\n    INF,\n    SPECIAL,\n    ATOM,\n    COLLECTION,\n    ALL\n};\n// The JSON string segment was unable to be parsed completely\nclass PartialJSON extends Error {\n}\nclass MalformedJSON extends Error {\n}\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */ function parseJSON(jsonString) {\n    let allowPartial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Allow.ALL;\n    if (typeof jsonString !== \"string\") {\n        throw new TypeError(\"expecting str, got \".concat(typeof jsonString));\n    }\n    if (!jsonString.trim()) {\n        throw new Error(\"\".concat(jsonString, \" is empty\"));\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\nconst _parseJSON = (jsonString, allow)=>{\n    const length = jsonString.length;\n    let index = 0;\n    const markPartialJSON = (msg)=>{\n        throw new PartialJSON(\"\".concat(msg, \" at position \").concat(index));\n    };\n    const throwMalformedError = (msg)=>{\n        throw new MalformedJSON(\"\".concat(msg, \" at position \").concat(index));\n    };\n    const parseAny = ()=>{\n        skipBlank();\n        if (index >= length) markPartialJSON(\"Unexpected end of input\");\n        if (jsonString[index] === '\"') return parseStr();\n        if (jsonString[index] === \"{\") return parseObj();\n        if (jsonString[index] === \"[\") return parseArr();\n        if (jsonString.substring(index, index + 4) === \"null\" || Allow.NULL & allow && length - index < 4 && \"null\".startsWith(jsonString.substring(index))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === \"true\" || Allow.BOOL & allow && length - index < 4 && \"true\".startsWith(jsonString.substring(index))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === \"false\" || Allow.BOOL & allow && length - index < 5 && \"false\".startsWith(jsonString.substring(index))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === \"Infinity\" || Allow.INFINITY & allow && length - index < 8 && \"Infinity\".startsWith(jsonString.substring(index))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === \"-Infinity\" || Allow.MINUS_INFINITY & allow && 1 < length - index && length - index < 9 && \"-Infinity\".startsWith(jsonString.substring(index))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === \"NaN\" || Allow.NAN & allow && length - index < 3 && \"NaN\".startsWith(jsonString.substring(index))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n    const parseStr = ()=>{\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while(index < length && (jsonString[index] !== '\"' || escape && jsonString[index - 1] === \"\\\\\")){\n            escape = jsonString[index] === \"\\\\\" ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            } catch (e) {\n                throwMalformedError(String(e));\n            }\n        } else if (Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            } catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"\\\\\")) + '\"');\n            }\n        }\n        markPartialJSON(\"Unterminated string literal\");\n    };\n    const parseObj = ()=>{\n        index++; // skip initial brace\n        skipBlank();\n        const obj = {};\n        try {\n            while(jsonString[index] !== \"}\"){\n                skipBlank();\n                if (index >= length && Allow.OBJ & allow) return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    Object.defineProperty(obj, key, {\n                        value,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                } catch (e) {\n                    if (Allow.OBJ & allow) return obj;\n                    else throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === \",\") index++; // skip comma\n            }\n        } catch (e) {\n            if (Allow.OBJ & allow) return obj;\n            else markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n    const parseArr = ()=>{\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while(jsonString[index] !== \"]\"){\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === \",\") {\n                    index++; // skip comma\n                }\n            }\n        } catch (e) {\n            if (Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n    const parseNum = ()=>{\n        if (index === 0) {\n            if (jsonString === \"-\" && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            } catch (e) {\n                if (Allow.NUM & allow) {\n                    try {\n                        if (\".\" === jsonString[jsonString.length - 1]) return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\".\")));\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\"e\")));\n                    } catch (e) {}\n                }\n                throwMalformedError(String(e));\n            }\n        }\n        const start = index;\n        if (jsonString[index] === \"-\") index++;\n        while(jsonString[index] && !\",]}\".includes(jsonString[index]))index++;\n        if (index == length && !(Allow.NUM & allow)) markPartialJSON(\"Unterminated number literal\");\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        } catch (e) {\n            if (jsonString.substring(start, index) === \"-\" && Allow.NUM & allow) markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"e\")));\n            } catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n    const skipBlank = ()=>{\n        while(index < length && \" \\n\\r\t\".includes(jsonString[index])){\n            index++;\n        }\n    };\n    return parseAny();\n};\n// using this function with malformed JSON is undefined behavior\nconst partialParse = (input)=>parseJSON(input, Allow.ALL ^ Allow.NUM);\n //# sourceMappingURL=parser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci9wYXJ0aWFsLWpzb24tcGFyc2VyL3BhcnNlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsTUFBTTtBQUNaLE1BQU1DLE1BQU07QUFDWixNQUFNQyxNQUFNO0FBQ1osTUFBTUMsTUFBTTtBQUNaLE1BQU1DLE9BQU87QUFDYixNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsTUFBTTtBQUNaLE1BQU1DLFdBQVc7QUFDakIsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLE1BQU1GLFdBQVdDO0FBQ3ZCLE1BQU1FLFVBQVVOLE9BQU9DLE9BQU9JLE1BQU1IO0FBQ3BDLE1BQU1LLE9BQU9YLE1BQU1DLE1BQU1TO0FBQ3pCLE1BQU1FLGFBQWFWLE1BQU1DO0FBQ3pCLE1BQU1VLE1BQU1GLE9BQU9DO0FBQ25CLE1BQU1FLFFBQVE7SUFDVmQ7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7QUFDSjtBQUNBLDZEQUE2RDtBQUM3RCxNQUFNRSxvQkFBb0JDO0FBQzFCO0FBQ0EsTUFBTUMsc0JBQXNCRDtBQUM1QjtBQUNBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRSxVQUFVQyxVQUFVO1FBQUVDLGVBQUFBLGlFQUFlTixNQUFNRCxHQUFHO0lBQ25ELElBQUksT0FBT00sZUFBZSxVQUFVO1FBQ2hDLE1BQU0sSUFBSUUsVUFBVSxzQkFBd0MsT0FBbEIsT0FBT0Y7SUFDckQ7SUFDQSxJQUFJLENBQUNBLFdBQVdHLElBQUksSUFBSTtRQUNwQixNQUFNLElBQUlOLE1BQU0sR0FBYyxPQUFYRyxZQUFXO0lBQ2xDO0lBQ0EsT0FBT0ksV0FBV0osV0FBV0csSUFBSSxJQUFJRjtBQUN6QztBQUNBLE1BQU1HLGFBQWEsQ0FBQ0osWUFBWUs7SUFDNUIsTUFBTUMsU0FBU04sV0FBV00sTUFBTTtJQUNoQyxJQUFJQyxRQUFRO0lBQ1osTUFBTUMsa0JBQWtCLENBQUNDO1FBQ3JCLE1BQU0sSUFBSWIsWUFBWSxHQUFzQlcsT0FBbkJFLEtBQUksaUJBQXFCLE9BQU5GO0lBQ2hEO0lBQ0EsTUFBTUcsc0JBQXNCLENBQUNEO1FBQ3pCLE1BQU0sSUFBSVgsY0FBYyxHQUFzQlMsT0FBbkJFLEtBQUksaUJBQXFCLE9BQU5GO0lBQ2xEO0lBQ0EsTUFBTUksV0FBVztRQUNiQztRQUNBLElBQUlMLFNBQVNELFFBQ1RFLGdCQUFnQjtRQUNwQixJQUFJUixVQUFVLENBQUNPLE1BQU0sS0FBSyxLQUN0QixPQUFPTTtRQUNYLElBQUliLFVBQVUsQ0FBQ08sTUFBTSxLQUFLLEtBQ3RCLE9BQU9PO1FBQ1gsSUFBSWQsVUFBVSxDQUFDTyxNQUFNLEtBQUssS0FDdEIsT0FBT1E7UUFDWCxJQUFJZixXQUFXZ0IsU0FBUyxDQUFDVCxPQUFPQSxRQUFRLE9BQU8sVUFDMUNaLE1BQU1WLElBQUksR0FBR29CLFNBQVNDLFNBQVNDLFFBQVEsS0FBSyxPQUFPVSxVQUFVLENBQUNqQixXQUFXZ0IsU0FBUyxDQUFDVCxTQUFVO1lBQzlGQSxTQUFTO1lBQ1QsT0FBTztRQUNYO1FBQ0EsSUFBSVAsV0FBV2dCLFNBQVMsQ0FBQ1QsT0FBT0EsUUFBUSxPQUFPLFVBQzFDWixNQUFNVCxJQUFJLEdBQUdtQixTQUFTQyxTQUFTQyxRQUFRLEtBQUssT0FBT1UsVUFBVSxDQUFDakIsV0FBV2dCLFNBQVMsQ0FBQ1QsU0FBVTtZQUM5RkEsU0FBUztZQUNULE9BQU87UUFDWDtRQUNBLElBQUlQLFdBQVdnQixTQUFTLENBQUNULE9BQU9BLFFBQVEsT0FBTyxXQUMxQ1osTUFBTVQsSUFBSSxHQUFHbUIsU0FBU0MsU0FBU0MsUUFBUSxLQUFLLFFBQVFVLFVBQVUsQ0FBQ2pCLFdBQVdnQixTQUFTLENBQUNULFNBQVU7WUFDL0ZBLFNBQVM7WUFDVCxPQUFPO1FBQ1g7UUFDQSxJQUFJUCxXQUFXZ0IsU0FBUyxDQUFDVCxPQUFPQSxRQUFRLE9BQU8sY0FDMUNaLE1BQU1QLFFBQVEsR0FBR2lCLFNBQVNDLFNBQVNDLFFBQVEsS0FBSyxXQUFXVSxVQUFVLENBQUNqQixXQUFXZ0IsU0FBUyxDQUFDVCxTQUFVO1lBQ3RHQSxTQUFTO1lBQ1QsT0FBT1c7UUFDWDtRQUNBLElBQUlsQixXQUFXZ0IsU0FBUyxDQUFDVCxPQUFPQSxRQUFRLE9BQU8sZUFDMUNaLE1BQU1OLGNBQWMsR0FBR2dCLFNBQ3BCLElBQUlDLFNBQVNDLFNBQ2JELFNBQVNDLFFBQVEsS0FDakIsWUFBWVUsVUFBVSxDQUFDakIsV0FBV2dCLFNBQVMsQ0FBQ1QsU0FBVTtZQUMxREEsU0FBUztZQUNULE9BQU8sQ0FBQ1c7UUFDWjtRQUNBLElBQUlsQixXQUFXZ0IsU0FBUyxDQUFDVCxPQUFPQSxRQUFRLE9BQU8sU0FDMUNaLE1BQU1SLEdBQUcsR0FBR2tCLFNBQVNDLFNBQVNDLFFBQVEsS0FBSyxNQUFNVSxVQUFVLENBQUNqQixXQUFXZ0IsU0FBUyxDQUFDVCxTQUFVO1lBQzVGQSxTQUFTO1lBQ1QsT0FBT1k7UUFDWDtRQUNBLE9BQU9DO0lBQ1g7SUFDQSxNQUFNUCxXQUFXO1FBQ2IsTUFBTVEsUUFBUWQ7UUFDZCxJQUFJZSxTQUFTO1FBQ2JmLFNBQVMscUJBQXFCO1FBQzlCLE1BQU9BLFFBQVFELFVBQVdOLENBQUFBLFVBQVUsQ0FBQ08sTUFBTSxLQUFLLE9BQVFlLFVBQVV0QixVQUFVLENBQUNPLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBSTtZQUNoR2UsU0FBU3RCLFVBQVUsQ0FBQ08sTUFBTSxLQUFLLE9BQU8sQ0FBQ2UsU0FBUztZQUNoRGY7UUFDSjtRQUNBLElBQUlQLFdBQVd1QixNQUFNLENBQUNoQixVQUFVLEtBQUs7WUFDakMsSUFBSTtnQkFDQSxPQUFPaUIsS0FBS0MsS0FBSyxDQUFDekIsV0FBV2dCLFNBQVMsQ0FBQ0ssT0FBTyxFQUFFZCxRQUFRbUIsT0FBT0o7WUFDbkUsRUFDQSxPQUFPSyxHQUFHO2dCQUNOakIsb0JBQW9Ca0IsT0FBT0Q7WUFDL0I7UUFDSixPQUNLLElBQUloQyxNQUFNZCxHQUFHLEdBQUd3QixPQUFPO1lBQ3hCLElBQUk7Z0JBQ0EsT0FBT21CLEtBQUtDLEtBQUssQ0FBQ3pCLFdBQVdnQixTQUFTLENBQUNLLE9BQU9kLFFBQVFtQixPQUFPSixXQUFXO1lBQzVFLEVBQ0EsT0FBT0ssR0FBRztnQkFDTix1Q0FBdUM7Z0JBQ3ZDLE9BQU9ILEtBQUtDLEtBQUssQ0FBQ3pCLFdBQVdnQixTQUFTLENBQUNLLE9BQU9yQixXQUFXNkIsV0FBVyxDQUFDLFNBQVM7WUFDbEY7UUFDSjtRQUNBckIsZ0JBQWdCO0lBQ3BCO0lBQ0EsTUFBTU0sV0FBVztRQUNiUCxTQUFTLHFCQUFxQjtRQUM5Qks7UUFDQSxNQUFNa0IsTUFBTSxDQUFDO1FBQ2IsSUFBSTtZQUNBLE1BQU85QixVQUFVLENBQUNPLE1BQU0sS0FBSyxJQUFLO2dCQUM5Qks7Z0JBQ0EsSUFBSUwsU0FBU0QsVUFBVVgsTUFBTVgsR0FBRyxHQUFHcUIsT0FDL0IsT0FBT3lCO2dCQUNYLE1BQU1DLE1BQU1sQjtnQkFDWkQ7Z0JBQ0FMLFNBQVMsYUFBYTtnQkFDdEIsSUFBSTtvQkFDQSxNQUFNeUIsUUFBUXJCO29CQUNkc0IsT0FBT0MsY0FBYyxDQUFDSixLQUFLQyxLQUFLO3dCQUFFQzt3QkFBT0csVUFBVTt3QkFBTUMsWUFBWTt3QkFBTUMsY0FBYztvQkFBSztnQkFDbEcsRUFDQSxPQUFPVixHQUFHO29CQUNOLElBQUloQyxNQUFNWCxHQUFHLEdBQUdxQixPQUNaLE9BQU95Qjt5QkFFUCxNQUFNSDtnQkFDZDtnQkFDQWY7Z0JBQ0EsSUFBSVosVUFBVSxDQUFDTyxNQUFNLEtBQUssS0FDdEJBLFNBQVMsYUFBYTtZQUM5QjtRQUNKLEVBQ0EsT0FBT29CLEdBQUc7WUFDTixJQUFJaEMsTUFBTVgsR0FBRyxHQUFHcUIsT0FDWixPQUFPeUI7aUJBRVB0QixnQkFBZ0I7UUFDeEI7UUFDQUQsU0FBUyxtQkFBbUI7UUFDNUIsT0FBT3VCO0lBQ1g7SUFDQSxNQUFNZixXQUFXO1FBQ2JSLFNBQVMsdUJBQXVCO1FBQ2hDLE1BQU0rQixNQUFNLEVBQUU7UUFDZCxJQUFJO1lBQ0EsTUFBT3RDLFVBQVUsQ0FBQ08sTUFBTSxLQUFLLElBQUs7Z0JBQzlCK0IsSUFBSUMsSUFBSSxDQUFDNUI7Z0JBQ1RDO2dCQUNBLElBQUlaLFVBQVUsQ0FBQ08sTUFBTSxLQUFLLEtBQUs7b0JBQzNCQSxTQUFTLGFBQWE7Z0JBQzFCO1lBQ0o7UUFDSixFQUNBLE9BQU9vQixHQUFHO1lBQ04sSUFBSWhDLE1BQU1aLEdBQUcsR0FBR3NCLE9BQU87Z0JBQ25CLE9BQU9pQztZQUNYO1lBQ0E5QixnQkFBZ0I7UUFDcEI7UUFDQUQsU0FBUyxxQkFBcUI7UUFDOUIsT0FBTytCO0lBQ1g7SUFDQSxNQUFNbEIsV0FBVztRQUNiLElBQUliLFVBQVUsR0FBRztZQUNiLElBQUlQLGVBQWUsT0FBT0wsTUFBTWIsR0FBRyxHQUFHdUIsT0FDbENHLGdCQUFnQjtZQUNwQixJQUFJO2dCQUNBLE9BQU9nQixLQUFLQyxLQUFLLENBQUN6QjtZQUN0QixFQUNBLE9BQU8yQixHQUFHO2dCQUNOLElBQUloQyxNQUFNYixHQUFHLEdBQUd1QixPQUFPO29CQUNuQixJQUFJO3dCQUNBLElBQUksUUFBUUwsVUFBVSxDQUFDQSxXQUFXTSxNQUFNLEdBQUcsRUFBRSxFQUN6QyxPQUFPa0IsS0FBS0MsS0FBSyxDQUFDekIsV0FBV2dCLFNBQVMsQ0FBQyxHQUFHaEIsV0FBVzZCLFdBQVcsQ0FBQzt3QkFDckUsT0FBT0wsS0FBS0MsS0FBSyxDQUFDekIsV0FBV2dCLFNBQVMsQ0FBQyxHQUFHaEIsV0FBVzZCLFdBQVcsQ0FBQztvQkFDckUsRUFDQSxPQUFPRixHQUFHLENBQUU7Z0JBQ2hCO2dCQUNBakIsb0JBQW9Ca0IsT0FBT0Q7WUFDL0I7UUFDSjtRQUNBLE1BQU1OLFFBQVFkO1FBQ2QsSUFBSVAsVUFBVSxDQUFDTyxNQUFNLEtBQUssS0FDdEJBO1FBQ0osTUFBT1AsVUFBVSxDQUFDTyxNQUFNLElBQUksQ0FBQyxNQUFNaUMsUUFBUSxDQUFDeEMsVUFBVSxDQUFDTyxNQUFNLEVBQ3pEQTtRQUNKLElBQUlBLFNBQVNELFVBQVUsQ0FBRVgsQ0FBQUEsTUFBTWIsR0FBRyxHQUFHdUIsS0FBSSxHQUNyQ0csZ0JBQWdCO1FBQ3BCLElBQUk7WUFDQSxPQUFPZ0IsS0FBS0MsS0FBSyxDQUFDekIsV0FBV2dCLFNBQVMsQ0FBQ0ssT0FBT2Q7UUFDbEQsRUFDQSxPQUFPb0IsR0FBRztZQUNOLElBQUkzQixXQUFXZ0IsU0FBUyxDQUFDSyxPQUFPZCxXQUFXLE9BQU9aLE1BQU1iLEdBQUcsR0FBR3VCLE9BQzFERyxnQkFBZ0I7WUFDcEIsSUFBSTtnQkFDQSxPQUFPZ0IsS0FBS0MsS0FBSyxDQUFDekIsV0FBV2dCLFNBQVMsQ0FBQ0ssT0FBT3JCLFdBQVc2QixXQUFXLENBQUM7WUFDekUsRUFDQSxPQUFPRixHQUFHO2dCQUNOakIsb0JBQW9Ca0IsT0FBT0Q7WUFDL0I7UUFDSjtJQUNKO0lBQ0EsTUFBTWYsWUFBWTtRQUNkLE1BQU9MLFFBQVFELFVBQVUsU0FBVWtDLFFBQVEsQ0FBQ3hDLFVBQVUsQ0FBQ08sTUFBTSxFQUFHO1lBQzVEQTtRQUNKO0lBQ0o7SUFDQSxPQUFPSTtBQUNYO0FBQ0EsZ0VBQWdFO0FBQ2hFLE1BQU04QixlQUFlLENBQUNDLFFBQVUzQyxVQUFVMkMsT0FBTy9DLE1BQU1ELEdBQUcsR0FBR0MsTUFBTWIsR0FBRztBQUNsQixDQUNwRCxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3BhcnRpYWwtanNvbi1wYXJzZXIvcGFyc2VyLm1qcz9hZjdkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNUUiA9IDBiMDAwMDAwMDAxO1xuY29uc3QgTlVNID0gMGIwMDAwMDAwMTA7XG5jb25zdCBBUlIgPSAwYjAwMDAwMDEwMDtcbmNvbnN0IE9CSiA9IDBiMDAwMDAxMDAwO1xuY29uc3QgTlVMTCA9IDBiMDAwMDEwMDAwO1xuY29uc3QgQk9PTCA9IDBiMDAwMTAwMDAwO1xuY29uc3QgTkFOID0gMGIwMDEwMDAwMDA7XG5jb25zdCBJTkZJTklUWSA9IDBiMDEwMDAwMDAwO1xuY29uc3QgTUlOVVNfSU5GSU5JVFkgPSAwYjEwMDAwMDAwMDtcbmNvbnN0IElORiA9IElORklOSVRZIHwgTUlOVVNfSU5GSU5JVFk7XG5jb25zdCBTUEVDSUFMID0gTlVMTCB8IEJPT0wgfCBJTkYgfCBOQU47XG5jb25zdCBBVE9NID0gU1RSIHwgTlVNIHwgU1BFQ0lBTDtcbmNvbnN0IENPTExFQ1RJT04gPSBBUlIgfCBPQko7XG5jb25zdCBBTEwgPSBBVE9NIHwgQ09MTEVDVElPTjtcbmNvbnN0IEFsbG93ID0ge1xuICAgIFNUUixcbiAgICBOVU0sXG4gICAgQVJSLFxuICAgIE9CSixcbiAgICBOVUxMLFxuICAgIEJPT0wsXG4gICAgTkFOLFxuICAgIElORklOSVRZLFxuICAgIE1JTlVTX0lORklOSVRZLFxuICAgIElORixcbiAgICBTUEVDSUFMLFxuICAgIEFUT00sXG4gICAgQ09MTEVDVElPTixcbiAgICBBTEwsXG59O1xuLy8gVGhlIEpTT04gc3RyaW5nIHNlZ21lbnQgd2FzIHVuYWJsZSB0byBiZSBwYXJzZWQgY29tcGxldGVseVxuY2xhc3MgUGFydGlhbEpTT04gZXh0ZW5kcyBFcnJvciB7XG59XG5jbGFzcyBNYWxmb3JtZWRKU09OIGV4dGVuZHMgRXJyb3Ige1xufVxuLyoqXG4gKiBQYXJzZSBpbmNvbXBsZXRlIEpTT05cbiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uU3RyaW5nIFBhcnRpYWwgSlNPTiB0byBiZSBwYXJzZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbGxvd1BhcnRpYWwgU3BlY2lmeSB3aGF0IHR5cGVzIGFyZSBhbGxvd2VkIHRvIGJlIHBhcnRpYWwsIHNlZSB7QGxpbmsgQWxsb3d9IGZvciBkZXRhaWxzXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIEpTT05cbiAqIEB0aHJvd3Mge1BhcnRpYWxKU09OfSBJZiB0aGUgSlNPTiBpcyBpbmNvbXBsZXRlIChyZWxhdGVkIHRvIHRoZSBgYWxsb3dgIHBhcmFtZXRlcilcbiAqIEB0aHJvd3Mge01hbGZvcm1lZEpTT059IElmIHRoZSBKU09OIGlzIG1hbGZvcm1lZFxuICovXG5mdW5jdGlvbiBwYXJzZUpTT04oanNvblN0cmluZywgYWxsb3dQYXJ0aWFsID0gQWxsb3cuQUxMKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uU3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBleHBlY3Rpbmcgc3RyLCBnb3QgJHt0eXBlb2YganNvblN0cmluZ31gKTtcbiAgICB9XG4gICAgaWYgKCFqc29uU3RyaW5nLnRyaW0oKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7anNvblN0cmluZ30gaXMgZW1wdHlgKTtcbiAgICB9XG4gICAgcmV0dXJuIF9wYXJzZUpTT04oanNvblN0cmluZy50cmltKCksIGFsbG93UGFydGlhbCk7XG59XG5jb25zdCBfcGFyc2VKU09OID0gKGpzb25TdHJpbmcsIGFsbG93KSA9PiB7XG4gICAgY29uc3QgbGVuZ3RoID0ganNvblN0cmluZy5sZW5ndGg7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBjb25zdCBtYXJrUGFydGlhbEpTT04gPSAobXNnKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBQYXJ0aWFsSlNPTihgJHttc2d9IGF0IHBvc2l0aW9uICR7aW5kZXh9YCk7XG4gICAgfTtcbiAgICBjb25zdCB0aHJvd01hbGZvcm1lZEVycm9yID0gKG1zZykgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgTWFsZm9ybWVkSlNPTihgJHttc2d9IGF0IHBvc2l0aW9uICR7aW5kZXh9YCk7XG4gICAgfTtcbiAgICBjb25zdCBwYXJzZUFueSA9ICgpID0+IHtcbiAgICAgICAgc2tpcEJsYW5rKCk7XG4gICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGgpXG4gICAgICAgICAgICBtYXJrUGFydGlhbEpTT04oJ1VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0Jyk7XG4gICAgICAgIGlmIChqc29uU3RyaW5nW2luZGV4XSA9PT0gJ1wiJylcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVN0cigpO1xuICAgICAgICBpZiAoanNvblN0cmluZ1tpbmRleF0gPT09ICd7JylcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9iaigpO1xuICAgICAgICBpZiAoanNvblN0cmluZ1tpbmRleF0gPT09ICdbJylcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUFycigpO1xuICAgICAgICBpZiAoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgsIGluZGV4ICsgNCkgPT09ICdudWxsJyB8fFxuICAgICAgICAgICAgKEFsbG93Lk5VTEwgJiBhbGxvdyAmJiBsZW5ndGggLSBpbmRleCA8IDQgJiYgJ251bGwnLnN0YXJ0c1dpdGgoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgpKSkpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDQ7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgsIGluZGV4ICsgNCkgPT09ICd0cnVlJyB8fFxuICAgICAgICAgICAgKEFsbG93LkJPT0wgJiBhbGxvdyAmJiBsZW5ndGggLSBpbmRleCA8IDQgJiYgJ3RydWUnLnN0YXJ0c1dpdGgoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgpKSkpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDQ7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgsIGluZGV4ICsgNSkgPT09ICdmYWxzZScgfHxcbiAgICAgICAgICAgIChBbGxvdy5CT09MICYgYWxsb3cgJiYgbGVuZ3RoIC0gaW5kZXggPCA1ICYmICdmYWxzZScuc3RhcnRzV2l0aChqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCkpKSkge1xuICAgICAgICAgICAgaW5kZXggKz0gNTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgsIGluZGV4ICsgOCkgPT09ICdJbmZpbml0eScgfHxcbiAgICAgICAgICAgIChBbGxvdy5JTkZJTklUWSAmIGFsbG93ICYmIGxlbmd0aCAtIGluZGV4IDwgOCAmJiAnSW5maW5pdHknLnN0YXJ0c1dpdGgoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgpKSkpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDg7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpzb25TdHJpbmcuc3Vic3RyaW5nKGluZGV4LCBpbmRleCArIDkpID09PSAnLUluZmluaXR5JyB8fFxuICAgICAgICAgICAgKEFsbG93Lk1JTlVTX0lORklOSVRZICYgYWxsb3cgJiZcbiAgICAgICAgICAgICAgICAxIDwgbGVuZ3RoIC0gaW5kZXggJiZcbiAgICAgICAgICAgICAgICBsZW5ndGggLSBpbmRleCA8IDkgJiZcbiAgICAgICAgICAgICAgICAnLUluZmluaXR5Jy5zdGFydHNXaXRoKGpzb25TdHJpbmcuc3Vic3RyaW5nKGluZGV4KSkpKSB7XG4gICAgICAgICAgICBpbmRleCArPSA5O1xuICAgICAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgsIGluZGV4ICsgMykgPT09ICdOYU4nIHx8XG4gICAgICAgICAgICAoQWxsb3cuTkFOICYgYWxsb3cgJiYgbGVuZ3RoIC0gaW5kZXggPCAzICYmICdOYU4nLnN0YXJ0c1dpdGgoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgpKSkpIHtcbiAgICAgICAgICAgIGluZGV4ICs9IDM7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZU51bSgpO1xuICAgIH07XG4gICAgY29uc3QgcGFyc2VTdHIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGxldCBlc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgaW5kZXgrKzsgLy8gc2tpcCBpbml0aWFsIHF1b3RlXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCAmJiAoanNvblN0cmluZ1tpbmRleF0gIT09ICdcIicgfHwgKGVzY2FwZSAmJiBqc29uU3RyaW5nW2luZGV4IC0gMV0gPT09ICdcXFxcJykpKSB7XG4gICAgICAgICAgICBlc2NhcGUgPSBqc29uU3RyaW5nW2luZGV4XSA9PT0gJ1xcXFwnID8gIWVzY2FwZSA6IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoanNvblN0cmluZy5jaGFyQXQoaW5kZXgpID09ICdcIicpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoc3RhcnQsICsraW5kZXggLSBOdW1iZXIoZXNjYXBlKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvd01hbGZvcm1lZEVycm9yKFN0cmluZyhlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQWxsb3cuU1RSICYgYWxsb3cpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoc3RhcnQsIGluZGV4IC0gTnVtYmVyKGVzY2FwZSkpICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFN5bnRheEVycm9yOiBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZVxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcuc3Vic3RyaW5nKHN0YXJ0LCBqc29uU3RyaW5nLmxhc3RJbmRleE9mKCdcXFxcJykpICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFya1BhcnRpYWxKU09OKCdVbnRlcm1pbmF0ZWQgc3RyaW5nIGxpdGVyYWwnKTtcbiAgICB9O1xuICAgIGNvbnN0IHBhcnNlT2JqID0gKCkgPT4ge1xuICAgICAgICBpbmRleCsrOyAvLyBza2lwIGluaXRpYWwgYnJhY2VcbiAgICAgICAgc2tpcEJsYW5rKCk7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2hpbGUgKGpzb25TdHJpbmdbaW5kZXhdICE9PSAnfScpIHtcbiAgICAgICAgICAgICAgICBza2lwQmxhbmsoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gbGVuZ3RoICYmIEFsbG93Lk9CSiAmIGFsbG93KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHBhcnNlU3RyKCk7XG4gICAgICAgICAgICAgICAgc2tpcEJsYW5rKCk7XG4gICAgICAgICAgICAgICAgaW5kZXgrKzsgLy8gc2tpcCBjb2xvblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VBbnkoKTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlLCB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQWxsb3cuT0JKICYgYWxsb3cpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBza2lwQmxhbmsoKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblN0cmluZ1tpbmRleF0gPT09ICcsJylcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKzsgLy8gc2tpcCBjb21tYVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoQWxsb3cuT0JKICYgYWxsb3cpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtYXJrUGFydGlhbEpTT04oXCJFeHBlY3RlZCAnfScgYXQgZW5kIG9mIG9iamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCsrOyAvLyBza2lwIGZpbmFsIGJyYWNlXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgICBjb25zdCBwYXJzZUFyciA9ICgpID0+IHtcbiAgICAgICAgaW5kZXgrKzsgLy8gc2tpcCBpbml0aWFsIGJyYWNrZXRcbiAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3aGlsZSAoanNvblN0cmluZ1tpbmRleF0gIT09ICddJykge1xuICAgICAgICAgICAgICAgIGFyci5wdXNoKHBhcnNlQW55KCkpO1xuICAgICAgICAgICAgICAgIHNraXBCbGFuaygpO1xuICAgICAgICAgICAgICAgIGlmIChqc29uU3RyaW5nW2luZGV4XSA9PT0gJywnKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7IC8vIHNraXAgY29tbWFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChBbGxvdy5BUlIgJiBhbGxvdykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXJrUGFydGlhbEpTT04oXCJFeHBlY3RlZCAnXScgYXQgZW5kIG9mIGFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4Kys7IC8vIHNraXAgZmluYWwgYnJhY2tldFxuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH07XG4gICAgY29uc3QgcGFyc2VOdW0gPSAoKSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGpzb25TdHJpbmcgPT09ICctJyAmJiBBbGxvdy5OVU0gJiBhbGxvdylcbiAgICAgICAgICAgICAgICBtYXJrUGFydGlhbEpTT04oXCJOb3Qgc3VyZSB3aGF0ICctJyBpc1wiKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChBbGxvdy5OVU0gJiBhbGxvdykge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCcuJyA9PT0ganNvblN0cmluZ1tqc29uU3RyaW5nLmxlbmd0aCAtIDFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcuc3Vic3RyaW5nKDAsIGpzb25TdHJpbmcubGFzdEluZGV4T2YoJy4nKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoMCwganNvblN0cmluZy5sYXN0SW5kZXhPZignZScpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvd01hbGZvcm1lZEVycm9yKFN0cmluZyhlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnQgPSBpbmRleDtcbiAgICAgICAgaWYgKGpzb25TdHJpbmdbaW5kZXhdID09PSAnLScpXG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB3aGlsZSAoanNvblN0cmluZ1tpbmRleF0gJiYgIScsXX0nLmluY2x1ZGVzKGpzb25TdHJpbmdbaW5kZXhdKSlcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIGlmIChpbmRleCA9PSBsZW5ndGggJiYgIShBbGxvdy5OVU0gJiBhbGxvdykpXG4gICAgICAgICAgICBtYXJrUGFydGlhbEpTT04oJ1VudGVybWluYXRlZCBudW1iZXIgbGl0ZXJhbCcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoc3RhcnQsIGluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChqc29uU3RyaW5nLnN1YnN0cmluZyhzdGFydCwgaW5kZXgpID09PSAnLScgJiYgQWxsb3cuTlVNICYgYWxsb3cpXG4gICAgICAgICAgICAgICAgbWFya1BhcnRpYWxKU09OKFwiTm90IHN1cmUgd2hhdCAnLScgaXNcIik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcuc3Vic3RyaW5nKHN0YXJ0LCBqc29uU3RyaW5nLmxhc3RJbmRleE9mKCdlJykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dNYWxmb3JtZWRFcnJvcihTdHJpbmcoZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBza2lwQmxhbmsgPSAoKSA9PiB7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCAmJiAnIFxcblxcclxcdCcuaW5jbHVkZXMoanNvblN0cmluZ1tpbmRleF0pKSB7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcGFyc2VBbnkoKTtcbn07XG4vLyB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGggbWFsZm9ybWVkIEpTT04gaXMgdW5kZWZpbmVkIGJlaGF2aW9yXG5jb25zdCBwYXJ0aWFsUGFyc2UgPSAoaW5wdXQpID0+IHBhcnNlSlNPTihpbnB1dCwgQWxsb3cuQUxMIF4gQWxsb3cuTlVNKTtcbmV4cG9ydCB7IHBhcnRpYWxQYXJzZSwgUGFydGlhbEpTT04sIE1hbGZvcm1lZEpTT04gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlci5tanMubWFwIl0sIm5hbWVzIjpbIlNUUiIsIk5VTSIsIkFSUiIsIk9CSiIsIk5VTEwiLCJCT09MIiwiTkFOIiwiSU5GSU5JVFkiLCJNSU5VU19JTkZJTklUWSIsIklORiIsIlNQRUNJQUwiLCJBVE9NIiwiQ09MTEVDVElPTiIsIkFMTCIsIkFsbG93IiwiUGFydGlhbEpTT04iLCJFcnJvciIsIk1hbGZvcm1lZEpTT04iLCJwYXJzZUpTT04iLCJqc29uU3RyaW5nIiwiYWxsb3dQYXJ0aWFsIiwiVHlwZUVycm9yIiwidHJpbSIsIl9wYXJzZUpTT04iLCJhbGxvdyIsImxlbmd0aCIsImluZGV4IiwibWFya1BhcnRpYWxKU09OIiwibXNnIiwidGhyb3dNYWxmb3JtZWRFcnJvciIsInBhcnNlQW55Iiwic2tpcEJsYW5rIiwicGFyc2VTdHIiLCJwYXJzZU9iaiIsInBhcnNlQXJyIiwic3Vic3RyaW5nIiwic3RhcnRzV2l0aCIsIkluZmluaXR5IiwiTmFOIiwicGFyc2VOdW0iLCJzdGFydCIsImVzY2FwZSIsImNoYXJBdCIsIkpTT04iLCJwYXJzZSIsIk51bWJlciIsImUiLCJTdHJpbmciLCJsYXN0SW5kZXhPZiIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJhcnIiLCJwdXNoIiwiaW5jbHVkZXMiLCJwYXJ0aWFsUGFyc2UiLCJpbnB1dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/core.mjs":
/*!**************************************!*\
  !*** ./node_modules/openai/core.mjs ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: function() { return /* binding */ APIClient; },\n/* harmony export */   APIPromise: function() { return /* binding */ APIPromise; },\n/* harmony export */   AbstractPage: function() { return /* binding */ AbstractPage; },\n/* harmony export */   PagePromise: function() { return /* binding */ PagePromise; },\n/* harmony export */   castToError: function() { return /* binding */ castToError; },\n/* harmony export */   coerceBoolean: function() { return /* binding */ coerceBoolean; },\n/* harmony export */   coerceFloat: function() { return /* binding */ coerceFloat; },\n/* harmony export */   coerceInteger: function() { return /* binding */ coerceInteger; },\n/* harmony export */   createForm: function() { return /* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.createForm; },\n/* harmony export */   createResponseHeaders: function() { return /* binding */ createResponseHeaders; },\n/* harmony export */   debug: function() { return /* binding */ debug; },\n/* harmony export */   ensurePresent: function() { return /* binding */ ensurePresent; },\n/* harmony export */   getHeader: function() { return /* binding */ getHeader; },\n/* harmony export */   getRequiredHeader: function() { return /* binding */ getRequiredHeader; },\n/* harmony export */   hasOwn: function() { return /* binding */ hasOwn; },\n/* harmony export */   isEmptyObj: function() { return /* binding */ isEmptyObj; },\n/* harmony export */   isHeadersProtocol: function() { return /* binding */ isHeadersProtocol; },\n/* harmony export */   isObj: function() { return /* binding */ isObj; },\n/* harmony export */   isRequestOptions: function() { return /* binding */ isRequestOptions; },\n/* harmony export */   isRunningInBrowser: function() { return /* binding */ isRunningInBrowser; },\n/* harmony export */   maybeCoerceBoolean: function() { return /* binding */ maybeCoerceBoolean; },\n/* harmony export */   maybeCoerceFloat: function() { return /* binding */ maybeCoerceFloat; },\n/* harmony export */   maybeCoerceInteger: function() { return /* binding */ maybeCoerceInteger; },\n/* harmony export */   maybeMultipartFormRequestOptions: function() { return /* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.maybeMultipartFormRequestOptions; },\n/* harmony export */   multipartFormRequestOptions: function() { return /* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions; },\n/* harmony export */   readEnv: function() { return /* binding */ readEnv; },\n/* harmony export */   safeJSON: function() { return /* binding */ safeJSON; },\n/* harmony export */   sleep: function() { return /* binding */ sleep; },\n/* harmony export */   toBase64: function() { return /* binding */ toBase64; }\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.mjs */ \"(app-pages-browser)/./node_modules/openai/version.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./streaming.mjs */ \"(app-pages-browser)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(app-pages-browser)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uploads.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/../../node_modules/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\n\n\n\n\n\n\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        debug(\"response\", response.status, response.url, response.headers, response.body);\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        if (props.options.__streamClass) {\n            return props.options.__streamClass.fromSSEResponse(response, props.controller);\n        }\n        return _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromSSEResponse(response, props.controller);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get(\"content-type\");\n    const isJSON = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"application/json\")) || (contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"application/vnd.api+json\"));\n    if (isJSON) {\n        const json = await response.json();\n        debug(\"response\", response.status, response.url, response.headers, json);\n        return _addRequestID(json, response);\n    }\n    const text = await response.text();\n    debug(\"response\", response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\nfunction _addRequestID(value, response) {\n    if (!value || typeof value !== \"object\" || Array.isArray(value)) {\n        return value;\n    }\n    return Object.defineProperty(value, \"_request_id\", {\n        value: response.headers.get(\"x-request-id\"),\n        enumerable: false\n    });\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props)=>_addRequestID(transform(await this.parseResponse(props), props), props.response));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n     * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n     * returned via the X-Request-ID header which is useful for debugging requests and reporting\n     * issues to OpenAI.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response,\n            request_id: response.headers.get(\"x-request-id\")\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n    constructor(responsePromise, parseResponse = defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n}\nclass APIClient {\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */ defaultHeaders(opts) {\n        return {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts)\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */ validateHeaders(headers, customHeaders) {}\n    defaultIdempotencyKey() {\n        return \"stainless-node-retry-\".concat(uuid4());\n    }\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then(async (opts)=>{\n            const body = opts && (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isBlobLike)(opts === null || opts === void 0 ? void 0 : opts.body) ? new DataView(await opts.body.arrayBuffer()) : (opts === null || opts === void 0 ? void 0 : opts.body) instanceof DataView ? opts.body : (opts === null || opts === void 0 ? void 0 : opts.body) instanceof ArrayBuffer ? new DataView(opts.body) : opts && ArrayBuffer.isView(opts === null || opts === void 0 ? void 0 : opts.body) ? new DataView(opts.body.buffer) : opts === null || opts === void 0 ? void 0 : opts.body;\n            return {\n                method,\n                path,\n                ...opts,\n                body\n            };\n        }));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    calculateContentLength(body) {\n        if (typeof body === \"string\") {\n            if (typeof Buffer !== \"undefined\") {\n                return Buffer.byteLength(body, \"utf8\").toString();\n            }\n            if (typeof TextEncoder !== \"undefined\") {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        } else if (ArrayBuffer.isView(body)) {\n            return body.byteLength.toString();\n        }\n        return null;\n    }\n    buildRequest(options) {\n        let { retryCount = 0 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        var _httpAgent_options;\n        const { method, path, query, headers: headers = {} } = options;\n        const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === \"string\" ? options.body : (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query);\n        if (\"timeout\" in options) validatePositiveInteger(\"timeout\", options.timeout);\n        var _options_timeout;\n        const timeout = (_options_timeout = options.timeout) !== null && _options_timeout !== void 0 ? _options_timeout : this.timeout;\n        var _options_httpAgent, _ref;\n        const httpAgent = (_ref = (_options_httpAgent = options.httpAgent) !== null && _options_httpAgent !== void 0 ? _options_httpAgent : this.httpAgent) !== null && _ref !== void 0 ? _ref : (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent)(url);\n        const minAgentTimeout = timeout + 1000;\n        var _httpAgent_options_timeout;\n        if (typeof (httpAgent === null || httpAgent === void 0 ? void 0 : (_httpAgent_options = httpAgent.options) === null || _httpAgent_options === void 0 ? void 0 : _httpAgent_options.timeout) === \"number\" && minAgentTimeout > ((_httpAgent_options_timeout = httpAgent.options.timeout) !== null && _httpAgent_options_timeout !== void 0 ? _httpAgent_options_timeout : 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const reqHeaders = this.buildHeaders({\n            options,\n            headers,\n            contentLength,\n            retryCount\n        });\n        var _options_signal;\n        const req = {\n            method,\n            ...body && {\n                body: body\n            },\n            headers: reqHeaders,\n            ...httpAgent && {\n                agent: httpAgent\n            },\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: (_options_signal = options.signal) !== null && _options_signal !== void 0 ? _options_signal : null\n        };\n        return {\n            req,\n            url,\n            timeout\n        };\n    }\n    buildHeaders(param) {\n        let { options, headers, contentLength, retryCount } = param;\n        const reqHeaders = {};\n        if (contentLength) {\n            reqHeaders[\"content-length\"] = contentLength;\n        }\n        const defaultHeaders = this.defaultHeaders(options);\n        applyHeadersMut(reqHeaders, defaultHeaders);\n        applyHeadersMut(reqHeaders, headers);\n        // let builtin fetch set the Content-Type for multipart bodies\n        if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) && _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.kind !== \"node\") {\n            delete reqHeaders[\"content-type\"];\n        }\n        // Don't set the retry count header if it was already set or removed through default headers or by the\n        // caller. We check `defaultHeaders` and `headers`, which can contain nulls, instead of `reqHeaders` to\n        // account for the removal case.\n        if (getHeader(defaultHeaders, \"x-stainless-retry-count\") === undefined && getHeader(headers, \"x-stainless-retry-count\") === undefined) {\n            reqHeaders[\"x-stainless-retry-count\"] = String(retryCount);\n        }\n        this.validateHeaders(reqHeaders, headers);\n        return reqHeaders;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */ async prepareOptions(options) {}\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */ async prepareRequest(request, param) {\n        let { url, options } = param;\n    }\n    parseHeaders(headers) {\n        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header)=>[\n                ...header\n            ])) : {\n            ...headers\n        };\n    }\n    makeStatusError(status, error, message, headers) {\n        return _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError.generate(status, error, message, headers);\n    }\n    request(options) {\n        let remainingRetries = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        var _options_signal;\n        const options = await optionsInput;\n        var _options_maxRetries;\n        const maxRetries = (_options_maxRetries = options.maxRetries) !== null && _options_maxRetries !== void 0 ? _options_maxRetries : this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options, {\n            retryCount: maxRetries - retriesRemaining\n        });\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        debug(\"request\", url, options, req.headers);\n        if ((_options_signal = options.signal) === null || _options_signal === void 0 ? void 0 : _options_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            var _options_signal1;\n            if ((_options_signal1 = options.signal) === null || _options_signal1 === void 0 ? void 0 : _options_signal1.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === \"AbortError\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError({\n                cause: response\n            });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                const retryMessage = \"retrying, \".concat(retriesRemaining, \" attempts remaining\");\n                debug(\"response (error; \".concat(retryMessage, \")\"), response.status, url, responseHeaders);\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e)=>castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            const retryMessage = retriesRemaining ? \"(error; no more retries left)\" : \"(error; not retryable)\";\n            debug(\"response (error; \".concat(retryMessage, \")\"), response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return {\n            response,\n            options,\n            controller\n        };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (typeof query === \"object\" && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query).filter((param)=>{\n            let [_, value] = param;\n            return typeof value !== \"undefined\";\n        }).map((param)=>{\n            let [key, value] = param;\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(value));\n            }\n            if (value === null) {\n                return \"\".concat(encodeURIComponent(key), \"=\");\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Cannot stringify type \".concat(typeof value, \"; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.\"));\n        }).join(\"&\");\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        const fetchOptions = {\n            signal: controller.signal,\n            ...options\n        };\n        if (fetchOptions.method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = fetchOptions.method.toUpperCase();\n        }\n        return(// use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        this.fetch.call(undefined, url, fetchOptions).finally(()=>{\n            clearTimeout(timeout);\n        }));\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on request timeouts.\n        if (response.status === 408) return true;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders === null || responseHeaders === void 0 ? void 0 : responseHeaders[\"retry-after-ms\"];\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders === null || responseHeaders === void 0 ? void 0 : responseHeaders[\"retry-after\"];\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            } else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            var _options_maxRetries;\n            const maxRetries = (_options_maxRetries = options.maxRetries) !== null && _options_maxRetries !== void 0 ? _options_maxRetries : this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return \"\".concat(this.constructor.name, \"/JS \").concat(_version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION);\n    }\n    constructor({ baseURL, maxRetries = 2, timeout = 600000, httpAgent, fetch: overriddenFetch }){\n        this.baseURL = baseURL;\n        this.maxRetries = validatePositiveInteger(\"maxRetries\", maxRetries);\n        this.timeout = validatePositiveInteger(\"timeout\", timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overriddenFetch !== null && overriddenFetch !== void 0 ? overriddenFetch : _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\n    }\n}\nclass AbstractPage {\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        const nextOptions = {\n            ...this.options\n        };\n        if (\"params\" in nextInfo && typeof nextOptions.query === \"object\") {\n            nextOptions.query = {\n                ...nextOptions.query,\n                ...nextInfo.params\n            };\n        } else if (\"url\" in nextInfo) {\n            const params = [\n                ...Object.entries(nextOptions.query || {}),\n                ...nextInfo.url.searchParams.entries()\n            ];\n            for (const [key, value] of params){\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends APIPromise {\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n    constructor(client, request, Page){\n        super(request, async (props)=>new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n}\nconst createResponseHeaders = (headers)=>{\n    return new Proxy(Object.fromEntries(// @ts-ignore\n    headers.entries()), {\n        get (target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        }\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __binaryRequest: true,\n    __binaryResponse: true,\n    __streamClass: true\n};\nconst isRequestOptions = (obj)=>{\n    return typeof obj === \"object\" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k)=>hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = ()=>{\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        var _Deno_version;\n        var _Deno_version_deno;\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": typeof Deno.version === \"string\" ? Deno.version : (_Deno_version_deno = (_Deno_version = Deno.version) === null || _Deno_version === void 0 ? void 0 : _Deno_version.deno) !== null && _Deno_version_deno !== void 0 ? _Deno_version_deno : \"unknown\"\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"other:\".concat(EdgeRuntime),\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(process.platform),\n            \"X-Stainless-Arch\": normalizeArch(process.arch),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": \"browser:\".concat(browserInfo.browser),\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: \"\".concat(major, \".\").concat(minor, \".\").concat(patch)\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return \"other:\".concat(arch);\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return \"Other:\".concat(platform);\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders !== null && _platformHeaders !== void 0 ? _platformHeaders : _platformHeaders = getPlatformProperties();\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n};\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"\".concat(name, \" must be an integer\"));\n    }\n    if (n < 0) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"\".concat(name, \" must be a positive integer\"));\n    }\n    return n;\n};\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    if (typeof err === \"object\" && err !== null) {\n        try {\n            return new Error(JSON.stringify(err));\n        } catch (e) {}\n    }\n    return new Error(err);\n};\nconst ensurePresent = (value)=>{\n    if (value == null) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Expected a value to be given but received \".concat(value, \" instead.\"));\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    if (typeof process !== \"undefined\") {\n        var _process_env_env, _process_env;\n        var _process_env_env_trim;\n        return (_process_env_env_trim = (_process_env = process.env) === null || _process_env === void 0 ? void 0 : (_process_env_env = _process_env[env]) === null || _process_env_env === void 0 ? void 0 : _process_env_env.trim()) !== null && _process_env_env_trim !== void 0 ? _process_env_env_trim : undefined;\n    }\n    if (typeof Deno !== \"undefined\") {\n        var _Deno_env_get, _Deno_env_get1, _Deno_env;\n        return (_Deno_env = Deno.env) === null || _Deno_env === void 0 ? void 0 : (_Deno_env_get1 = _Deno_env.get) === null || _Deno_env_get1 === void 0 ? void 0 : (_Deno_env_get = _Deno_env_get1.call(_Deno_env, env)) === null || _Deno_env_get === void 0 ? void 0 : _Deno_env_get.trim();\n    }\n    return undefined;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Could not coerce \".concat(value, \" (type: \").concat(typeof value, \") into a number\"));\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Could not coerce \".concat(value, \" (type: \").concat(typeof value, \") into a number\"));\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */ function applyHeadersMut(targetHeaders, newHeaders) {\n    for(const k in newHeaders){\n        if (!hasOwn(newHeaders, k)) continue;\n        const lowerKey = k.toLowerCase();\n        if (!lowerKey) continue;\n        const val = newHeaders[k];\n        if (val === null) {\n            delete targetHeaders[lowerKey];\n        } else if (val !== undefined) {\n            targetHeaders[lowerKey] = val;\n        }\n    }\n}\nconst SENSITIVE_HEADERS = new Set([\n    \"authorization\",\n    \"api-key\"\n]);\nfunction debug(action) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    var _process_env, _process;\n    if (typeof process !== \"undefined\" && ((_process = process) === null || process === void 0 ? void 0 : (_process_env = _process.env) === null || _process_env === void 0 ? void 0 : _process_env[\"DEBUG\"]) === \"true\") {\n        const modifiedArgs = args.map((arg)=>{\n            if (!arg) {\n                return arg;\n            }\n            // Check for sensitive headers in request body 'headers' object\n            if (arg[\"headers\"]) {\n                // clone so we don't mutate\n                const modifiedArg = {\n                    ...arg,\n                    headers: {\n                        ...arg[\"headers\"]\n                    }\n                };\n                for(const header in arg[\"headers\"]){\n                    if (SENSITIVE_HEADERS.has(header.toLowerCase())) {\n                        modifiedArg[\"headers\"][header] = \"REDACTED\";\n                    }\n                }\n                return modifiedArg;\n            }\n            let modifiedArg = null;\n            // Check for sensitive headers in headers object\n            for(const header in arg){\n                if (SENSITIVE_HEADERS.has(header.toLowerCase())) {\n                    // avoid making a copy until we need to\n                    modifiedArg !== null && modifiedArg !== void 0 ? modifiedArg : modifiedArg = {\n                        ...arg\n                    };\n                    modifiedArg[header] = \"REDACTED\";\n                }\n            }\n            return modifiedArg !== null && modifiedArg !== void 0 ? modifiedArg : arg;\n        });\n        console.log(\"OpenAI:DEBUG:\".concat(action), ...modifiedArgs);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */ const uuid4 = ()=>{\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     true && // @ts-ignore\n    typeof window.document !== \"undefined\" && // @ts-ignore\n    typeof navigator !== \"undefined\");\n};\nconst isHeadersProtocol = (headers)=>{\n    return typeof (headers === null || headers === void 0 ? void 0 : headers.get) === \"function\";\n};\nconst getRequiredHeader = (headers, header)=>{\n    const foundHeader = getHeader(headers, header);\n    if (foundHeader === undefined) {\n        throw new Error(\"Could not find \".concat(header, \" header\"));\n    }\n    return foundHeader;\n};\nconst getHeader = (headers, header)=>{\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        var _header_;\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = ((_header_ = header[0]) === null || _header_ === void 0 ? void 0 : _header_.toUpperCase()) + header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2)=>g1 + g2.toUpperCase());\n        for (const key of [\n            header,\n            lowerCasedHeader,\n            header.toUpperCase(),\n            intercapsHeader\n        ]){\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)){\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1) return value[0];\n                console.warn(\"Received \".concat(value.length, \" entries for the \").concat(header, \" header, using the first entry.\"));\n                return value[0];\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\n/**\n * Encodes a string to Base64 format.\n */ const toBase64 = (str)=>{\n    if (!str) return \"\";\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(str).toString(\"base64\");\n    }\n    if (typeof btoa !== \"undefined\") {\n        return btoa(str);\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined\");\n};\nfunction isObj(obj) {\n    return obj != null && typeof obj === \"object\" && !Array.isArray(obj);\n} //# sourceMappingURL=core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/core.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/error.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/error.mjs ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: function() { return /* binding */ APIConnectionError; },\n/* harmony export */   APIConnectionTimeoutError: function() { return /* binding */ APIConnectionTimeoutError; },\n/* harmony export */   APIError: function() { return /* binding */ APIError; },\n/* harmony export */   APIUserAbortError: function() { return /* binding */ APIUserAbortError; },\n/* harmony export */   AuthenticationError: function() { return /* binding */ AuthenticationError; },\n/* harmony export */   BadRequestError: function() { return /* binding */ BadRequestError; },\n/* harmony export */   ConflictError: function() { return /* binding */ ConflictError; },\n/* harmony export */   ContentFilterFinishReasonError: function() { return /* binding */ ContentFilterFinishReasonError; },\n/* harmony export */   InternalServerError: function() { return /* binding */ InternalServerError; },\n/* harmony export */   LengthFinishReasonError: function() { return /* binding */ LengthFinishReasonError; },\n/* harmony export */   NotFoundError: function() { return /* binding */ NotFoundError; },\n/* harmony export */   OpenAIError: function() { return /* binding */ OpenAIError; },\n/* harmony export */   PermissionDeniedError: function() { return /* binding */ PermissionDeniedError; },\n/* harmony export */   RateLimitError: function() { return /* binding */ RateLimitError; },\n/* harmony export */   UnprocessableEntityError: function() { return /* binding */ UnprocessableEntityError; }\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass OpenAIError extends Error {\n}\nclass APIError extends OpenAIError {\n    static makeMessage(status, error, message) {\n        const msg = (error === null || error === void 0 ? void 0 : error.message) ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n        if (status && msg) {\n            return \"\".concat(status, \" \").concat(msg);\n        }\n        if (status) {\n            return \"\".concat(status, \" status code (no body)\");\n        }\n        if (msg) {\n            return msg;\n        }\n        return \"(no status code or body)\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({\n                message,\n                cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse[\"error\"];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n    constructor(status, error, message, headers){\n        super(\"\".concat(APIError.makeMessage(status, error, message)));\n        this.status = status;\n        this.headers = headers;\n        this.request_id = headers === null || headers === void 0 ? void 0 : headers[\"x-request-id\"];\n        this.error = error;\n        const data = error;\n        this.code = data === null || data === void 0 ? void 0 : data[\"code\"];\n        this.param = data === null || data === void 0 ? void 0 : data[\"param\"];\n        this.type = data === null || data === void 0 ? void 0 : data[\"type\"];\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}){\n        super({\n            message: message !== null && message !== void 0 ? message : \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n}\nclass AuthenticationError extends APIError {\n}\nclass PermissionDeniedError extends APIError {\n}\nclass NotFoundError extends APIError {\n}\nclass ConflictError extends APIError {\n}\nclass UnprocessableEntityError extends APIError {\n}\nclass RateLimitError extends APIError {\n}\nclass InternalServerError extends APIError {\n}\nclass LengthFinishReasonError extends OpenAIError {\n    constructor(){\n        super(\"Could not parse response content as the length limit was reached\");\n    }\n}\nclass ContentFilterFinishReasonError extends OpenAIError {\n    constructor(){\n        super(\"Could not parse response content as the request was rejected by the content filter\");\n    }\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/error.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/index.mjs ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIConnectionError; },\n/* harmony export */   APIConnectionTimeoutError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIConnectionTimeoutError; },\n/* harmony export */   APIError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIError; },\n/* harmony export */   APIUserAbortError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError; },\n/* harmony export */   AuthenticationError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthenticationError; },\n/* harmony export */   AzureOpenAI: function() { return /* binding */ AzureOpenAI; },\n/* harmony export */   BadRequestError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.BadRequestError; },\n/* harmony export */   ConflictError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.ConflictError; },\n/* harmony export */   InternalServerError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.InternalServerError; },\n/* harmony export */   NotFoundError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.NotFoundError; },\n/* harmony export */   OpenAI: function() { return /* binding */ OpenAI; },\n/* harmony export */   OpenAIError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError; },\n/* harmony export */   PermissionDeniedError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.PermissionDeniedError; },\n/* harmony export */   RateLimitError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.RateLimitError; },\n/* harmony export */   UnprocessableEntityError: function() { return /* reexport safe */ _error_mjs__WEBPACK_IMPORTED_MODULE_2__.UnprocessableEntityError; },\n/* harmony export */   fileFromPath: function() { return /* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_16__.fileFromPath; },\n/* harmony export */   toFile: function() { return /* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_15__.toFile; }\n/* harmony export */ });\n/* harmony import */ var _internal_qs_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/qs/index.mjs */ \"(app-pages-browser)/./node_modules/openai/internal/qs/stringify.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./uploads.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./uploads.mjs */ \"(app-pages-browser)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources/completions.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources/chat/chat.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resources/embeddings.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resources/files.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resources/images.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./resources/audio/audio.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./resources/moderations.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/moderations.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./resources/models.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./resources/fine-tuning/fine-tuning.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resources/beta/beta.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/beta.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./resources/batches.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/batches.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resources/uploads/uploads.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/uploads/uploads.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _Core_readEnv, _Core_readEnv1;\n/**\n * API Client for interfacing with the OpenAI API.\n */ class OpenAI extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            \"OpenAI-Organization\": this.organization,\n            \"OpenAI-Project\": this.project,\n            ...this._options.defaultHeaders\n        };\n    }\n    authHeaders(opts) {\n        return {\n            Authorization: \"Bearer \".concat(this.apiKey)\n        };\n    }\n    stringifyQuery(query) {\n        return _internal_qs_index_mjs__WEBPACK_IMPORTED_MODULE_1__.stringify(query, {\n            arrayFormat: \"brackets\"\n        });\n    }\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_BASE_URL\"), apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_API_KEY\"), organization = (_Core_readEnv = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_ORG_ID\")) !== null && _Core_readEnv !== void 0 ? _Core_readEnv : null, project = (_Core_readEnv1 = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_PROJECT_ID\")) !== null && _Core_readEnv1 !== void 0 ? _Core_readEnv1 : null, ...opts } = {}){\n        if (apiKey === undefined) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            project,\n            ...opts,\n            baseURL: baseURL || \"https://api.openai.com/v1\"\n        };\n        if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        var _options_timeout;\n        super({\n            baseURL: options.baseURL,\n            timeout: (_options_timeout = options.timeout) !== null && _options_timeout !== void 0 ? _options_timeout : 600000 /* 10 minutes */ ,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch\n        });\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Completions(this);\n        this.chat = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Chat(this);\n        this.embeddings = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Embeddings(this);\n        this.files = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Files(this);\n        this.images = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Images(this);\n        this.audio = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Audio(this);\n        this.moderations = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Moderations(this);\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.Models(this);\n        this.fineTuning = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.FineTuning(this);\n        this.beta = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Beta(this);\n        this.batches = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Batches(this);\n        this.uploads = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_14__.Uploads(this);\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n        this.project = project;\n    }\n}\n_a = OpenAI;\nOpenAI.OpenAI = _a;\nOpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes\nOpenAI.OpenAIError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError;\nOpenAI.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIError;\nOpenAI.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError;\nOpenAI.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.NotFoundError;\nOpenAI.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.ConflictError;\nOpenAI.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.RateLimitError;\nOpenAI.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.BadRequestError;\nOpenAI.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthenticationError;\nOpenAI.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.InternalServerError;\nOpenAI.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_2__.UnprocessableEntityError;\nOpenAI.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_15__.toFile;\nOpenAI.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_16__.fileFromPath;\nOpenAI.Completions = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_3__.Completions;\nOpenAI.Chat = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_4__.Chat;\nOpenAI.Embeddings = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_5__.Embeddings;\nOpenAI.Files = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.Files;\nOpenAI.FileObjectsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_6__.FileObjectsPage;\nOpenAI.Images = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_7__.Images;\nOpenAI.Audio = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_8__.Audio;\nOpenAI.Moderations = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_9__.Moderations;\nOpenAI.Models = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.Models;\nOpenAI.ModelsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_10__.ModelsPage;\nOpenAI.FineTuning = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_11__.FineTuning;\nOpenAI.Beta = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Beta;\nOpenAI.Batches = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.Batches;\nOpenAI.BatchesPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_13__.BatchesPage;\nOpenAI.Uploads = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_14__.Uploads;\n/** API Client for interfacing with the Azure OpenAI API. */ class AzureOpenAI extends OpenAI {\n    buildRequest(options) {\n        let props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        if (_deployments_endpoints.has(options.path) && options.method === \"post\" && options.body !== undefined) {\n            if (!_core_mjs__WEBPACK_IMPORTED_MODULE_0__.isObj(options.body)) {\n                throw new Error(\"Expected request body to be an object\");\n            }\n            const model = this._deployment || options.body[\"model\"];\n            if (model !== undefined && !this.baseURL.includes(\"/deployments\")) {\n                options.path = \"/deployments/\".concat(model).concat(options.path);\n            }\n        }\n        return super.buildRequest(options, props);\n    }\n    async _getAzureADToken() {\n        if (typeof this._azureADTokenProvider === \"function\") {\n            const token = await this._azureADTokenProvider();\n            if (!token || typeof token !== \"string\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"Expected 'azureADTokenProvider' argument to return a string but it returned \".concat(token));\n            }\n            return token;\n        }\n        return undefined;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    async prepareOptions(opts) {\n        var _opts_headers;\n        /**\n         * The user should provide a bearer token provider if they want\n         * to use Azure AD authentication. The user shouldn't set the\n         * Authorization header manually because the header is overwritten\n         * with the Azure AD token if a bearer token provider is provided.\n         */ if ((_opts_headers = opts.headers) === null || _opts_headers === void 0 ? void 0 : _opts_headers[\"api-key\"]) {\n            return super.prepareOptions(opts);\n        }\n        const token = await this._getAzureADToken();\n        var _opts_headers1;\n        (_opts_headers1 = opts.headers) !== null && _opts_headers1 !== void 0 ? _opts_headers1 : opts.headers = {};\n        if (token) {\n            opts.headers[\"Authorization\"] = \"Bearer \".concat(token);\n        } else if (this.apiKey !== API_KEY_SENTINEL) {\n            opts.headers[\"api-key\"] = this.apiKey;\n        } else {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"Unable to handle auth\");\n        }\n        return super.prepareOptions(opts);\n    }\n    /**\n     * API Client for interfacing with the Azure OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\n     * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n     * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\n     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ baseURL = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_BASE_URL\"), apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"AZURE_OPENAI_API_KEY\"), apiVersion = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_API_VERSION\"), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}){\n        if (!apiVersion) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\n        }\n        if (typeof azureADTokenProvider === \"function\") {\n            dangerouslyAllowBrowser = true;\n        }\n        if (!azureADTokenProvider && !apiKey) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.\");\n        }\n        if (azureADTokenProvider && apiKey) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.\");\n        }\n        // define a sentinel value to avoid any typing issues\n        apiKey !== null && apiKey !== void 0 ? apiKey : apiKey = API_KEY_SENTINEL;\n        opts.defaultQuery = {\n            ...opts.defaultQuery,\n            \"api-version\": apiVersion\n        };\n        if (!baseURL) {\n            if (!endpoint) {\n                endpoint = process.env[\"AZURE_OPENAI_ENDPOINT\"];\n            }\n            if (!endpoint) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable\");\n            }\n            baseURL = \"\".concat(endpoint, \"/openai\");\n        } else {\n            if (endpoint) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"baseURL and endpoint are mutually exclusive\");\n            }\n        }\n        super({\n            apiKey,\n            baseURL,\n            ...opts,\n            ...dangerouslyAllowBrowser !== undefined ? {\n                dangerouslyAllowBrowser\n            } : {}\n        });\n        this.apiVersion = \"\";\n        this._azureADTokenProvider = azureADTokenProvider;\n        this.apiVersion = apiVersion;\n        this._deployment = deployment;\n    }\n}\nconst _deployments_endpoints = new Set([\n    \"/completions\",\n    \"/chat/completions\",\n    \"/embeddings\",\n    \"/audio/transcriptions\",\n    \"/audio/translations\",\n    \"/audio/speech\",\n    \"/images/generations\"\n]);\nconst API_KEY_SENTINEL = \"<Missing Key>\";\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (OpenAI); //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3RGLElBQUlBO0FBQzBDO0FBQ1g7QUFDRztBQUNTO0FBQ047QUFDSTtBQUNtQjtBQUNMO0FBQ0Y7QUFDTztBQUNmO0FBQ1c7QUFDRDtBQUNQO0FBQ0g7QUFDQTtBQUNvQjtBQUNXO0lBb0JxQ0UsZUFBaURBO0FBbkJ0Szs7Q0FFQyxHQUNNLE1BQU1vQixlQUFlcEIsZ0RBQWM7SUFzRHRDc0IsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDQyxRQUFRLENBQUNELFlBQVk7SUFDckM7SUFDQUUsZUFBZUMsSUFBSSxFQUFFO1FBQ2pCLE9BQU87WUFDSCxHQUFHLEtBQUssQ0FBQ0QsZUFBZUMsS0FBSztZQUM3Qix1QkFBdUIsSUFBSSxDQUFDQyxZQUFZO1lBQ3hDLGtCQUFrQixJQUFJLENBQUNDLE9BQU87WUFDOUIsR0FBRyxJQUFJLENBQUNKLFFBQVEsQ0FBQ0MsY0FBYztRQUNuQztJQUNKO0lBQ0FJLFlBQVlILElBQUksRUFBRTtRQUNkLE9BQU87WUFBRUksZUFBZSxVQUFzQixPQUFaLElBQUksQ0FBQ0MsTUFBTTtRQUFHO0lBQ3BEO0lBQ0FDLGVBQWVDLEtBQUssRUFBRTtRQUNsQixPQUFPakMsNkRBQVksQ0FBQ2lDLE9BQU87WUFBRUUsYUFBYTtRQUFXO0lBQ3pEO0lBckVBOzs7Ozs7Ozs7Ozs7OztLQWNDLEdBQ0RDLFlBQVksRUFBRUMsVUFBVXBDLDhDQUFZLENBQUMsa0JBQWtCLEVBQUU4QixTQUFTOUIsOENBQVksQ0FBQyxpQkFBaUIsRUFBRTBCLGVBQWUxQixDQUFBQSxnQkFBQUEsOENBQVksQ0FBQyw4QkFBYkEsMkJBQUFBLGdCQUFpQyxJQUFJLEVBQUUyQixVQUFVM0IsQ0FBQUEsaUJBQUFBLDhDQUFZLENBQUMsa0NBQWJBLDRCQUFBQSxpQkFBcUMsSUFBSSxFQUFFLEdBQUd5QixNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUU7UUFDek4sSUFBSUssV0FBV1EsV0FBVztZQUN0QixNQUFNLElBQUlyQyxtREFBa0IsQ0FBQztRQUNqQztRQUNBLE1BQU11QyxVQUFVO1lBQ1pWO1lBQ0FKO1lBQ0FDO1lBQ0EsR0FBR0YsSUFBSTtZQUNQVyxTQUFTQSxXQUFZO1FBQ3pCO1FBQ0EsSUFBSSxDQUFDSSxRQUFRQyx1QkFBdUIsSUFBSXpDLHlEQUF1QixJQUFJO1lBQy9ELE1BQU0sSUFBSUMsbURBQWtCLENBQUM7UUFDakM7WUFHYXVDO1FBRmIsS0FBSyxDQUFDO1lBQ0ZKLFNBQVNJLFFBQVFKLE9BQU87WUFDeEJPLFNBQVNILENBQUFBLG1CQUFBQSxRQUFRRyxPQUFPLGNBQWZILDhCQUFBQSxtQkFBbUIsT0FBTyxjQUFjO1lBQ2pESSxXQUFXSixRQUFRSSxTQUFTO1lBQzVCQyxZQUFZTCxRQUFRSyxVQUFVO1lBQzlCQyxPQUFPTixRQUFRTSxLQUFLO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSTNDLDZEQUFlLENBQUMsSUFBSTtRQUMzQyxJQUFJLENBQUM0QyxJQUFJLEdBQUcsSUFBSTVDLHNEQUFRLENBQUMsSUFBSTtRQUM3QixJQUFJLENBQUM2QyxVQUFVLEdBQUcsSUFBSTdDLDREQUFjLENBQUMsSUFBSTtRQUN6QyxJQUFJLENBQUM4QyxLQUFLLEdBQUcsSUFBSTlDLHVEQUFTLENBQUMsSUFBSTtRQUMvQixJQUFJLENBQUMrQyxNQUFNLEdBQUcsSUFBSS9DLHdEQUFVLENBQUMsSUFBSTtRQUNqQyxJQUFJLENBQUNnRCxLQUFLLEdBQUcsSUFBSWhELHVEQUFTLENBQUMsSUFBSTtRQUMvQixJQUFJLENBQUNpRCxXQUFXLEdBQUcsSUFBSWpELDZEQUFlLENBQUMsSUFBSTtRQUMzQyxJQUFJLENBQUNrRCxNQUFNLEdBQUcsSUFBSWxELHlEQUFVLENBQUMsSUFBSTtRQUNqQyxJQUFJLENBQUNtRCxVQUFVLEdBQUcsSUFBSW5ELDZEQUFjLENBQUMsSUFBSTtRQUN6QyxJQUFJLENBQUNvRCxJQUFJLEdBQUcsSUFBSXBELHVEQUFRLENBQUMsSUFBSTtRQUM3QixJQUFJLENBQUNxRCxPQUFPLEdBQUcsSUFBSXJELDBEQUFXLENBQUMsSUFBSTtRQUNuQyxJQUFJLENBQUNzRCxPQUFPLEdBQUcsSUFBSXRELDBEQUFXLENBQUMsSUFBSTtRQUNuQyxJQUFJLENBQUNtQixRQUFRLEdBQUdpQjtRQUNoQixJQUFJLENBQUNWLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNKLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ25CO0FBa0JKO0FBQ0E3QixLQUFLc0I7QUFDTEEsT0FBT0EsTUFBTSxHQUFHdEI7QUFDaEJzQixPQUFPdUMsZUFBZSxHQUFHLFFBQVEsYUFBYTtBQUM5Q3ZDLE9BQU9tQixXQUFXLEdBQUd0QyxtREFBa0I7QUFDdkNtQixPQUFPd0MsUUFBUSxHQUFHM0QsZ0RBQWU7QUFDakNtQixPQUFPeUMsa0JBQWtCLEdBQUc1RCwwREFBeUI7QUFDckRtQixPQUFPMEMseUJBQXlCLEdBQUc3RCxpRUFBZ0M7QUFDbkVtQixPQUFPMkMsaUJBQWlCLEdBQUc5RCx5REFBd0I7QUFDbkRtQixPQUFPNEMsYUFBYSxHQUFHL0QscURBQW9CO0FBQzNDbUIsT0FBTzZDLGFBQWEsR0FBR2hFLHFEQUFvQjtBQUMzQ21CLE9BQU84QyxjQUFjLEdBQUdqRSxzREFBcUI7QUFDN0NtQixPQUFPK0MsZUFBZSxHQUFHbEUsdURBQXNCO0FBQy9DbUIsT0FBT2dELG1CQUFtQixHQUFHbkUsMkRBQTBCO0FBQ3ZEbUIsT0FBT2lELG1CQUFtQixHQUFHcEUsMkRBQTBCO0FBQ3ZEbUIsT0FBT2tELHFCQUFxQixHQUFHckUsNkRBQTRCO0FBQzNEbUIsT0FBT21ELHdCQUF3QixHQUFHdEUsZ0VBQStCO0FBQ2pFbUIsT0FBT29ELE1BQU0sR0FBR3JFLGlEQUFjO0FBQzlCaUIsT0FBT3FELFlBQVksR0FBR3RFLHVEQUFvQjtBQUMxQ2lCLE9BQU9iLFdBQVcsR0FBR0EsNkRBQVdBO0FBQ2hDYSxPQUFPSCxJQUFJLEdBQUdBLHNEQUFJQTtBQUNsQkcsT0FBT1osVUFBVSxHQUFHQSw0REFBVUE7QUFDOUJZLE9BQU9WLEtBQUssR0FBR0EsdURBQUtBO0FBQ3BCVSxPQUFPWCxlQUFlLEdBQUdBLGlFQUFlQTtBQUN4Q1csT0FBT1QsTUFBTSxHQUFHQSx3REFBTUE7QUFDdEJTLE9BQU9MLEtBQUssR0FBR0EsdURBQUtBO0FBQ3BCSyxPQUFPTixXQUFXLEdBQUdBLDZEQUFXQTtBQUNoQ00sT0FBT1IsTUFBTSxHQUFHQSx5REFBTUE7QUFDdEJRLE9BQU9QLFVBQVUsR0FBR0EsNkRBQVVBO0FBQzlCTyxPQUFPRixVQUFVLEdBQUdBLDZEQUFVQTtBQUM5QkUsT0FBT0osSUFBSSxHQUFHQSx1REFBSUE7QUFDbEJJLE9BQU9mLE9BQU8sR0FBR0EsMERBQU9BO0FBQ3hCZSxPQUFPZCxXQUFXLEdBQUdBLDhEQUFXQTtBQUNoQ2MsT0FBT2pCLE9BQU8sR0FBR2dCLDBEQUFpQkE7QUFDbEMsMERBQTBELEdBQ25ELE1BQU11RCxvQkFBb0J0RDtJQTJEN0J1RCxhQUFhbkMsT0FBTyxFQUFjO1lBQVpvQyxRQUFBQSxpRUFBUSxDQUFDO1FBQzNCLElBQUlDLHVCQUF1QkMsR0FBRyxDQUFDdEMsUUFBUXVDLElBQUksS0FBS3ZDLFFBQVF3QyxNQUFNLEtBQUssVUFBVXhDLFFBQVF5QyxJQUFJLEtBQUszQyxXQUFXO1lBQ3JHLElBQUksQ0FBQ3RDLDRDQUFVLENBQUN3QyxRQUFReUMsSUFBSSxHQUFHO2dCQUMzQixNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxNQUFNQyxRQUFRLElBQUksQ0FBQ0MsV0FBVyxJQUFJN0MsUUFBUXlDLElBQUksQ0FBQyxRQUFRO1lBQ3ZELElBQUlHLFVBQVU5QyxhQUFhLENBQUMsSUFBSSxDQUFDRixPQUFPLENBQUNrRCxRQUFRLENBQUMsaUJBQWlCO2dCQUMvRDlDLFFBQVF1QyxJQUFJLEdBQUcsZ0JBQXdCdkMsT0FBUjRDLE9BQXFCLE9BQWI1QyxRQUFRdUMsSUFBSTtZQUN2RDtRQUNKO1FBQ0EsT0FBTyxLQUFLLENBQUNKLGFBQWFuQyxTQUFTb0M7SUFDdkM7SUFDQSxNQUFNVyxtQkFBbUI7UUFDckIsSUFBSSxPQUFPLElBQUksQ0FBQ0MscUJBQXFCLEtBQUssWUFBWTtZQUNsRCxNQUFNQyxRQUFRLE1BQU0sSUFBSSxDQUFDRCxxQkFBcUI7WUFDOUMsSUFBSSxDQUFDQyxTQUFTLE9BQU9BLFVBQVUsVUFBVTtnQkFDckMsTUFBTSxJQUFJeEYsbURBQWtCLENBQUMsK0VBQXFGLE9BQU53RjtZQUNoSDtZQUNBLE9BQU9BO1FBQ1g7UUFDQSxPQUFPbkQ7SUFDWDtJQUNBVixZQUFZSCxJQUFJLEVBQUU7UUFDZCxPQUFPLENBQUM7SUFDWjtJQUNBLE1BQU1pRSxlQUFlakUsSUFBSSxFQUFFO1lBT25CQTtRQU5KOzs7OztTQUtDLEdBQ0QsS0FBSUEsZ0JBQUFBLEtBQUtrRSxPQUFPLGNBQVpsRSxvQ0FBQUEsYUFBYyxDQUFDLFVBQVUsRUFBRTtZQUMzQixPQUFPLEtBQUssQ0FBQ2lFLGVBQWVqRTtRQUNoQztRQUNBLE1BQU1nRSxRQUFRLE1BQU0sSUFBSSxDQUFDRixnQkFBZ0I7WUFDekM5RDtRQUFBQSxDQUFBQSxpQkFBQUEsS0FBS2tFLE9BQU8sY0FBWmxFLDRCQUFBQSxpQkFBaUJBLEtBQUtrRSxPQUFPLEdBQUcsQ0FBQztRQUNqQyxJQUFJRixPQUFPO1lBQ1BoRSxLQUFLa0UsT0FBTyxDQUFDLGdCQUFnQixHQUFHLFVBQWdCLE9BQU5GO1FBQzlDLE9BQ0ssSUFBSSxJQUFJLENBQUMzRCxNQUFNLEtBQUs4RCxrQkFBa0I7WUFDdkNuRSxLQUFLa0UsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM3RCxNQUFNO1FBQ3pDLE9BQ0s7WUFDRCxNQUFNLElBQUk3QixtREFBa0IsQ0FBQztRQUNqQztRQUNBLE9BQU8sS0FBSyxDQUFDeUYsZUFBZWpFO0lBQ2hDO0lBekdBOzs7Ozs7Ozs7Ozs7Ozs7O0tBZ0JDLEdBQ0RVLFlBQVksRUFBRUMsVUFBVXBDLDhDQUFZLENBQUMsa0JBQWtCLEVBQUU4QixTQUFTOUIsOENBQVksQ0FBQyx1QkFBdUIsRUFBRTZGLGFBQWE3Riw4Q0FBWSxDQUFDLHFCQUFxQixFQUFFOEYsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLG9CQUFvQixFQUFFdkQsdUJBQXVCLEVBQUUsR0FBR2hCLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBRTtRQUMxTyxJQUFJLENBQUNvRSxZQUFZO1lBQ2IsTUFBTSxJQUFJNUYsbURBQWtCLENBQUM7UUFDakM7UUFDQSxJQUFJLE9BQU8rRix5QkFBeUIsWUFBWTtZQUM1Q3ZELDBCQUEwQjtRQUM5QjtRQUNBLElBQUksQ0FBQ3VELHdCQUF3QixDQUFDbEUsUUFBUTtZQUNsQyxNQUFNLElBQUk3QixtREFBa0IsQ0FBQztRQUNqQztRQUNBLElBQUkrRix3QkFBd0JsRSxRQUFRO1lBQ2hDLE1BQU0sSUFBSTdCLG1EQUFrQixDQUFDO1FBQ2pDO1FBQ0EscURBQXFEO1FBQ3JENkIsbUJBQUFBLG9CQUFBQSxTQUFXQSxTQUFTOEQ7UUFDcEJuRSxLQUFLSCxZQUFZLEdBQUc7WUFBRSxHQUFHRyxLQUFLSCxZQUFZO1lBQUUsZUFBZXVFO1FBQVc7UUFDdEUsSUFBSSxDQUFDekQsU0FBUztZQUNWLElBQUksQ0FBQzBELFVBQVU7Z0JBQ1hBLFdBQVdHLE9BQU9BLENBQUNDLEdBQUcsQ0FBQyx3QkFBd0I7WUFDbkQ7WUFDQSxJQUFJLENBQUNKLFVBQVU7Z0JBQ1gsTUFBTSxJQUFJN0YsbURBQWtCLENBQUM7WUFDakM7WUFDQW1DLFVBQVUsR0FBWSxPQUFUMEQsVUFBUztRQUMxQixPQUNLO1lBQ0QsSUFBSUEsVUFBVTtnQkFDVixNQUFNLElBQUk3RixtREFBa0IsQ0FBQztZQUNqQztRQUNKO1FBQ0EsS0FBSyxDQUFDO1lBQ0Y2QjtZQUNBTTtZQUNBLEdBQUdYLElBQUk7WUFDUCxHQUFJZ0IsNEJBQTRCSCxZQUFZO2dCQUFFRztZQUF3QixJQUFJLENBQUMsQ0FBQztRQUNoRjtRQUNBLElBQUksQ0FBQ29ELFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNMLHFCQUFxQixHQUFHUTtRQUM3QixJQUFJLENBQUNILFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDUixXQUFXLEdBQUdVO0lBQ3ZCO0FBaURKO0FBQ0EsTUFBTWxCLHlCQUF5QixJQUFJc0IsSUFBSTtJQUNuQztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsTUFBTVAsbUJBQW1CO0FBQzRCO0FBQzROO0FBQ2pSLCtEQUFleEUsTUFBTUEsRUFBQyxDQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9pbmRleC5tanM/YTUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxudmFyIF9hO1xuaW1wb3J0ICogYXMgcXMgZnJvbSBcIi4vaW50ZXJuYWwvcXMvaW5kZXgubWpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuL2NvcmUubWpzXCI7XG5pbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSBcIi4vZXJyb3IubWpzXCI7XG5pbXBvcnQgKiBhcyBQYWdpbmF0aW9uIGZyb20gXCIuL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgKiBhcyBVcGxvYWRzIGZyb20gXCIuL3VwbG9hZHMubWpzXCI7XG5pbXBvcnQgKiBhcyBBUEkgZnJvbSBcIi4vcmVzb3VyY2VzL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgQmF0Y2hlcywgQmF0Y2hlc1BhZ2UsIH0gZnJvbSBcIi4vcmVzb3VyY2VzL2JhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9yZXNvdXJjZXMvY29tcGxldGlvbnMubWpzXCI7XG5pbXBvcnQgeyBFbWJlZGRpbmdzLCB9IGZyb20gXCIuL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qc1wiO1xuaW1wb3J0IHsgRmlsZU9iamVjdHNQYWdlLCBGaWxlcywgfSBmcm9tIFwiLi9yZXNvdXJjZXMvZmlsZXMubWpzXCI7XG5pbXBvcnQgeyBJbWFnZXMsIH0gZnJvbSBcIi4vcmVzb3VyY2VzL2ltYWdlcy5tanNcIjtcbmltcG9ydCB7IE1vZGVscywgTW9kZWxzUGFnZSB9IGZyb20gXCIuL3Jlc291cmNlcy9tb2RlbHMubWpzXCI7XG5pbXBvcnQgeyBNb2RlcmF0aW9ucywgfSBmcm9tIFwiLi9yZXNvdXJjZXMvbW9kZXJhdGlvbnMubWpzXCI7XG5pbXBvcnQgeyBBdWRpbyB9IGZyb20gXCIuL3Jlc291cmNlcy9hdWRpby9hdWRpby5tanNcIjtcbmltcG9ydCB7IEJldGEgfSBmcm9tIFwiLi9yZXNvdXJjZXMvYmV0YS9iZXRhLm1qc1wiO1xuaW1wb3J0IHsgQ2hhdCB9IGZyb20gXCIuL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzXCI7XG5pbXBvcnQgeyBGaW5lVHVuaW5nIH0gZnJvbSBcIi4vcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qc1wiO1xuaW1wb3J0IHsgVXBsb2FkcyBhcyBVcGxvYWRzQVBJVXBsb2FkcywgfSBmcm9tIFwiLi9yZXNvdXJjZXMvdXBsb2Fkcy91cGxvYWRzLm1qc1wiO1xuLyoqXG4gKiBBUEkgQ2xpZW50IGZvciBpbnRlcmZhY2luZyB3aXRoIHRoZSBPcGVuQUkgQVBJLlxuICovXG5leHBvcnQgY2xhc3MgT3BlbkFJIGV4dGVuZHMgQ29yZS5BUElDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEFQSSBDbGllbnQgZm9yIGludGVyZmFjaW5nIHdpdGggdGhlIE9wZW5BSSBBUEkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gW29wdHMuYXBpS2V5PXByb2Nlc3MuZW52WydPUEVOQUlfQVBJX0tFWSddID8/IHVuZGVmaW5lZF1cbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRzLm9yZ2FuaXphdGlvbj1wcm9jZXNzLmVudlsnT1BFTkFJX09SR19JRCddID8/IG51bGxdXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0cy5wcm9qZWN0PXByb2Nlc3MuZW52WydPUEVOQUlfUFJPSkVDVF9JRCddID8/IG51bGxdXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJhc2VVUkw9cHJvY2Vzcy5lbnZbJ09QRU5BSV9CQVNFX1VSTCddID8/IGh0dHBzOi8vYXBpLm9wZW5haS5jb20vdjFdIC0gT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFzZSBVUkwgZm9yIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXQ9MTAgbWludXRlc10gLSBUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0aGUgY2xpZW50IHdpbGwgd2FpdCBmb3IgYSByZXNwb25zZSBiZWZvcmUgdGltaW5nIG91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaHR0cEFnZW50XSAtIEFuIEhUVFAgYWdlbnQgdXNlZCB0byBtYW5hZ2UgSFRUUChzKSBjb25uZWN0aW9ucy5cbiAgICAgKiBAcGFyYW0ge0NvcmUuRmV0Y2h9IFtvcHRzLmZldGNoXSAtIFNwZWNpZnkgYSBjdXN0b20gYGZldGNoYCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMubWF4UmV0cmllcz0yXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lcyB0aGUgY2xpZW50IHdpbGwgcmV0cnkgYSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7Q29yZS5IZWFkZXJzfSBvcHRzLmRlZmF1bHRIZWFkZXJzIC0gRGVmYXVsdCBoZWFkZXJzIHRvIGluY2x1ZGUgd2l0aCBldmVyeSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIHtDb3JlLkRlZmF1bHRRdWVyeX0gb3B0cy5kZWZhdWx0UXVlcnkgLSBEZWZhdWx0IHF1ZXJ5IHBhcmFtZXRlcnMgdG8gaW5jbHVkZSB3aXRoIGV2ZXJ5IHJlcXVlc3QgdG8gdGhlIEFQSS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmRhbmdlcm91c2x5QWxsb3dCcm93c2VyPWZhbHNlXSAtIEJ5IGRlZmF1bHQsIGNsaWVudC1zaWRlIHVzZSBvZiB0aGlzIGxpYnJhcnkgaXMgbm90IGFsbG93ZWQsIGFzIGl0IHJpc2tzIGV4cG9zaW5nIHlvdXIgc2VjcmV0IEFQSSBjcmVkZW50aWFscyB0byBhdHRhY2tlcnMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyBiYXNlVVJMID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfQkFTRV9VUkwnKSwgYXBpS2V5ID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfQVBJX0tFWScpLCBvcmdhbml6YXRpb24gPSBDb3JlLnJlYWRFbnYoJ09QRU5BSV9PUkdfSUQnKSA/PyBudWxsLCBwcm9qZWN0ID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfUFJPSkVDVF9JRCcpID8/IG51bGwsIC4uLm9wdHMgfSA9IHt9KSB7XG4gICAgICAgIGlmIChhcGlLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9ycy5PcGVuQUlFcnJvcihcIlRoZSBPUEVOQUlfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBtaXNzaW5nIG9yIGVtcHR5OyBlaXRoZXIgcHJvdmlkZSBpdCwgb3IgaW5zdGFudGlhdGUgdGhlIE9wZW5BSSBjbGllbnQgd2l0aCBhbiBhcGlLZXkgb3B0aW9uLCBsaWtlIG5ldyBPcGVuQUkoeyBhcGlLZXk6ICdNeSBBUEkgS2V5JyB9KS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFwaUtleSxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbixcbiAgICAgICAgICAgIHByb2plY3QsXG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgYmFzZVVSTDogYmFzZVVSTCB8fCBgaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MWAsXG4gICAgICAgIH07XG4gICAgICAgIGlmICghb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93QnJvd3NlciAmJiBDb3JlLmlzUnVubmluZ0luQnJvd3NlcigpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFwiSXQgbG9va3MgbGlrZSB5b3UncmUgcnVubmluZyBpbiBhIGJyb3dzZXItbGlrZSBlbnZpcm9ubWVudC5cXG5cXG5UaGlzIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHQsIGFzIGl0IHJpc2tzIGV4cG9zaW5nIHlvdXIgc2VjcmV0IEFQSSBjcmVkZW50aWFscyB0byBhdHRhY2tlcnMuXFxuSWYgeW91IHVuZGVyc3RhbmQgdGhlIHJpc2tzIGFuZCBoYXZlIGFwcHJvcHJpYXRlIG1pdGlnYXRpb25zIGluIHBsYWNlLFxcbnlvdSBjYW4gc2V0IHRoZSBgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXJgIG9wdGlvbiB0byBgdHJ1ZWAsIGUuZy4sXFxuXFxubmV3IE9wZW5BSSh7IGFwaUtleSwgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI6IHRydWUgfSk7XFxuXFxuaHR0cHM6Ly9oZWxwLm9wZW5haS5jb20vZW4vYXJ0aWNsZXMvNTExMjU5NS1iZXN0LXByYWN0aWNlcy1mb3ItYXBpLWtleS1zYWZldHlcXG5cIik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgYmFzZVVSTDogb3B0aW9ucy5iYXNlVVJMLFxuICAgICAgICAgICAgdGltZW91dDogb3B0aW9ucy50aW1lb3V0ID8/IDYwMDAwMCAvKiAxMCBtaW51dGVzICovLFxuICAgICAgICAgICAgaHR0cEFnZW50OiBvcHRpb25zLmh0dHBBZ2VudCxcbiAgICAgICAgICAgIG1heFJldHJpZXM6IG9wdGlvbnMubWF4UmV0cmllcyxcbiAgICAgICAgICAgIGZldGNoOiBvcHRpb25zLmZldGNoLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb21wbGV0aW9ucyA9IG5ldyBBUEkuQ29tcGxldGlvbnModGhpcyk7XG4gICAgICAgIHRoaXMuY2hhdCA9IG5ldyBBUEkuQ2hhdCh0aGlzKTtcbiAgICAgICAgdGhpcy5lbWJlZGRpbmdzID0gbmV3IEFQSS5FbWJlZGRpbmdzKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbGVzID0gbmV3IEFQSS5GaWxlcyh0aGlzKTtcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBuZXcgQVBJLkltYWdlcyh0aGlzKTtcbiAgICAgICAgdGhpcy5hdWRpbyA9IG5ldyBBUEkuQXVkaW8odGhpcyk7XG4gICAgICAgIHRoaXMubW9kZXJhdGlvbnMgPSBuZXcgQVBJLk1vZGVyYXRpb25zKHRoaXMpO1xuICAgICAgICB0aGlzLm1vZGVscyA9IG5ldyBBUEkuTW9kZWxzKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmVUdW5pbmcgPSBuZXcgQVBJLkZpbmVUdW5pbmcodGhpcyk7XG4gICAgICAgIHRoaXMuYmV0YSA9IG5ldyBBUEkuQmV0YSh0aGlzKTtcbiAgICAgICAgdGhpcy5iYXRjaGVzID0gbmV3IEFQSS5CYXRjaGVzKHRoaXMpO1xuICAgICAgICB0aGlzLnVwbG9hZHMgPSBuZXcgQVBJLlVwbG9hZHModGhpcyk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb24gPSBvcmdhbml6YXRpb247XG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gICAgfVxuICAgIGRlZmF1bHRRdWVyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZGVmYXVsdFF1ZXJ5O1xuICAgIH1cbiAgICBkZWZhdWx0SGVhZGVycyhvcHRzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci5kZWZhdWx0SGVhZGVycyhvcHRzKSxcbiAgICAgICAgICAgICdPcGVuQUktT3JnYW5pemF0aW9uJzogdGhpcy5vcmdhbml6YXRpb24sXG4gICAgICAgICAgICAnT3BlbkFJLVByb2plY3QnOiB0aGlzLnByb2plY3QsXG4gICAgICAgICAgICAuLi50aGlzLl9vcHRpb25zLmRlZmF1bHRIZWFkZXJzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBhdXRoSGVhZGVycyhvcHRzKSB7XG4gICAgICAgIHJldHVybiB7IEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmFwaUtleX1gIH07XG4gICAgfVxuICAgIHN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBxcy5zdHJpbmdpZnkocXVlcnksIHsgYXJyYXlGb3JtYXQ6ICdicmFja2V0cycgfSk7XG4gICAgfVxufVxuX2EgPSBPcGVuQUk7XG5PcGVuQUkuT3BlbkFJID0gX2E7XG5PcGVuQUkuREVGQVVMVF9USU1FT1VUID0gNjAwMDAwOyAvLyAxMCBtaW51dGVzXG5PcGVuQUkuT3BlbkFJRXJyb3IgPSBFcnJvcnMuT3BlbkFJRXJyb3I7XG5PcGVuQUkuQVBJRXJyb3IgPSBFcnJvcnMuQVBJRXJyb3I7XG5PcGVuQUkuQVBJQ29ubmVjdGlvbkVycm9yID0gRXJyb3JzLkFQSUNvbm5lY3Rpb25FcnJvcjtcbk9wZW5BSS5BUElDb25uZWN0aW9uVGltZW91dEVycm9yID0gRXJyb3JzLkFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3I7XG5PcGVuQUkuQVBJVXNlckFib3J0RXJyb3IgPSBFcnJvcnMuQVBJVXNlckFib3J0RXJyb3I7XG5PcGVuQUkuTm90Rm91bmRFcnJvciA9IEVycm9ycy5Ob3RGb3VuZEVycm9yO1xuT3BlbkFJLkNvbmZsaWN0RXJyb3IgPSBFcnJvcnMuQ29uZmxpY3RFcnJvcjtcbk9wZW5BSS5SYXRlTGltaXRFcnJvciA9IEVycm9ycy5SYXRlTGltaXRFcnJvcjtcbk9wZW5BSS5CYWRSZXF1ZXN0RXJyb3IgPSBFcnJvcnMuQmFkUmVxdWVzdEVycm9yO1xuT3BlbkFJLkF1dGhlbnRpY2F0aW9uRXJyb3IgPSBFcnJvcnMuQXV0aGVudGljYXRpb25FcnJvcjtcbk9wZW5BSS5JbnRlcm5hbFNlcnZlckVycm9yID0gRXJyb3JzLkludGVybmFsU2VydmVyRXJyb3I7XG5PcGVuQUkuUGVybWlzc2lvbkRlbmllZEVycm9yID0gRXJyb3JzLlBlcm1pc3Npb25EZW5pZWRFcnJvcjtcbk9wZW5BSS5VbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IgPSBFcnJvcnMuVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yO1xuT3BlbkFJLnRvRmlsZSA9IFVwbG9hZHMudG9GaWxlO1xuT3BlbkFJLmZpbGVGcm9tUGF0aCA9IFVwbG9hZHMuZmlsZUZyb21QYXRoO1xuT3BlbkFJLkNvbXBsZXRpb25zID0gQ29tcGxldGlvbnM7XG5PcGVuQUkuQ2hhdCA9IENoYXQ7XG5PcGVuQUkuRW1iZWRkaW5ncyA9IEVtYmVkZGluZ3M7XG5PcGVuQUkuRmlsZXMgPSBGaWxlcztcbk9wZW5BSS5GaWxlT2JqZWN0c1BhZ2UgPSBGaWxlT2JqZWN0c1BhZ2U7XG5PcGVuQUkuSW1hZ2VzID0gSW1hZ2VzO1xuT3BlbkFJLkF1ZGlvID0gQXVkaW87XG5PcGVuQUkuTW9kZXJhdGlvbnMgPSBNb2RlcmF0aW9ucztcbk9wZW5BSS5Nb2RlbHMgPSBNb2RlbHM7XG5PcGVuQUkuTW9kZWxzUGFnZSA9IE1vZGVsc1BhZ2U7XG5PcGVuQUkuRmluZVR1bmluZyA9IEZpbmVUdW5pbmc7XG5PcGVuQUkuQmV0YSA9IEJldGE7XG5PcGVuQUkuQmF0Y2hlcyA9IEJhdGNoZXM7XG5PcGVuQUkuQmF0Y2hlc1BhZ2UgPSBCYXRjaGVzUGFnZTtcbk9wZW5BSS5VcGxvYWRzID0gVXBsb2Fkc0FQSVVwbG9hZHM7XG4vKiogQVBJIENsaWVudCBmb3IgaW50ZXJmYWNpbmcgd2l0aCB0aGUgQXp1cmUgT3BlbkFJIEFQSS4gKi9cbmV4cG9ydCBjbGFzcyBBenVyZU9wZW5BSSBleHRlbmRzIE9wZW5BSSB7XG4gICAgLyoqXG4gICAgICogQVBJIENsaWVudCBmb3IgaW50ZXJmYWNpbmcgd2l0aCB0aGUgQXp1cmUgT3BlbkFJIEFQSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBbb3B0cy5hcGlWZXJzaW9uPXByb2Nlc3MuZW52WydPUEVOQUlfQVBJX1ZFUlNJT04nXSA/PyB1bmRlZmluZWRdXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IFtvcHRzLmVuZHBvaW50PXByb2Nlc3MuZW52WydBWlVSRV9PUEVOQUlfRU5EUE9JTlQnXSA/PyB1bmRlZmluZWRdIC0gWW91ciBBenVyZSBlbmRwb2ludCwgaW5jbHVkaW5nIHRoZSByZXNvdXJjZSwgZS5nLiBgaHR0cHM6Ly9leGFtcGxlLXJlc291cmNlLmF6dXJlLm9wZW5haS5jb20vYFxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBbb3B0cy5hcGlLZXk9cHJvY2Vzcy5lbnZbJ0FaVVJFX09QRU5BSV9BUElfS0VZJ10gPz8gdW5kZWZpbmVkXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBvcHRzLmRlcGxveW1lbnQgLSBBIG1vZGVsIGRlcGxveW1lbnQsIGlmIGdpdmVuLCBzZXRzIHRoZSBiYXNlIGNsaWVudCBVUkwgdG8gaW5jbHVkZSBgL2RlcGxveW1lbnRzL3tkZXBsb3ltZW50fWAuXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0cy5vcmdhbml6YXRpb249cHJvY2Vzcy5lbnZbJ09QRU5BSV9PUkdfSUQnXSA/PyBudWxsXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5iYXNlVVJMPXByb2Nlc3MuZW52WydPUEVOQUlfQkFTRV9VUkwnXV0gLSBTZXRzIHRoZSBiYXNlIFVSTCBmb3IgdGhlIEFQSSwgZS5nLiBgaHR0cHM6Ly9leGFtcGxlLXJlc291cmNlLmF6dXJlLm9wZW5haS5jb20vb3BlbmFpL2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXQ9MTAgbWludXRlc10gLSBUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0aGUgY2xpZW50IHdpbGwgd2FpdCBmb3IgYSByZXNwb25zZSBiZWZvcmUgdGltaW5nIG91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaHR0cEFnZW50XSAtIEFuIEhUVFAgYWdlbnQgdXNlZCB0byBtYW5hZ2UgSFRUUChzKSBjb25uZWN0aW9ucy5cbiAgICAgKiBAcGFyYW0ge0NvcmUuRmV0Y2h9IFtvcHRzLmZldGNoXSAtIFNwZWNpZnkgYSBjdXN0b20gYGZldGNoYCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMubWF4UmV0cmllcz0yXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lcyB0aGUgY2xpZW50IHdpbGwgcmV0cnkgYSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7Q29yZS5IZWFkZXJzfSBvcHRzLmRlZmF1bHRIZWFkZXJzIC0gRGVmYXVsdCBoZWFkZXJzIHRvIGluY2x1ZGUgd2l0aCBldmVyeSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAgICogQHBhcmFtIHtDb3JlLkRlZmF1bHRRdWVyeX0gb3B0cy5kZWZhdWx0UXVlcnkgLSBEZWZhdWx0IHF1ZXJ5IHBhcmFtZXRlcnMgdG8gaW5jbHVkZSB3aXRoIGV2ZXJ5IHJlcXVlc3QgdG8gdGhlIEFQSS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmRhbmdlcm91c2x5QWxsb3dCcm93c2VyPWZhbHNlXSAtIEJ5IGRlZmF1bHQsIGNsaWVudC1zaWRlIHVzZSBvZiB0aGlzIGxpYnJhcnkgaXMgbm90IGFsbG93ZWQsIGFzIGl0IHJpc2tzIGV4cG9zaW5nIHlvdXIgc2VjcmV0IEFQSSBjcmVkZW50aWFscyB0byBhdHRhY2tlcnMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyBiYXNlVVJMID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfQkFTRV9VUkwnKSwgYXBpS2V5ID0gQ29yZS5yZWFkRW52KCdBWlVSRV9PUEVOQUlfQVBJX0tFWScpLCBhcGlWZXJzaW9uID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfQVBJX1ZFUlNJT04nKSwgZW5kcG9pbnQsIGRlcGxveW1lbnQsIGF6dXJlQURUb2tlblByb3ZpZGVyLCBkYW5nZXJvdXNseUFsbG93QnJvd3NlciwgLi4ub3B0cyB9ID0ge30pIHtcbiAgICAgICAgaWYgKCFhcGlWZXJzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFwiVGhlIE9QRU5BSV9BUElfVkVSU0lPTiBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBtaXNzaW5nIG9yIGVtcHR5OyBlaXRoZXIgcHJvdmlkZSBpdCwgb3IgaW5zdGFudGlhdGUgdGhlIEF6dXJlT3BlbkFJIGNsaWVudCB3aXRoIGFuIGFwaVZlcnNpb24gb3B0aW9uLCBsaWtlIG5ldyBBenVyZU9wZW5BSSh7IGFwaVZlcnNpb246ICdNeSBBUEkgVmVyc2lvbicgfSkuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXp1cmVBRFRva2VuUHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRhbmdlcm91c2x5QWxsb3dCcm93c2VyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWF6dXJlQURUb2tlblByb3ZpZGVyICYmICFhcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuT3BlbkFJRXJyb3IoJ01pc3NpbmcgY3JlZGVudGlhbHMuIFBsZWFzZSBwYXNzIG9uZSBvZiBgYXBpS2V5YCBhbmQgYGF6dXJlQURUb2tlblByb3ZpZGVyYCwgb3Igc2V0IHRoZSBgQVpVUkVfT1BFTkFJX0FQSV9LRVlgIGVudmlyb25tZW50IHZhcmlhYmxlLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhenVyZUFEVG9rZW5Qcm92aWRlciAmJiBhcGlLZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuT3BlbkFJRXJyb3IoJ1RoZSBgYXBpS2V5YCBhbmQgYGF6dXJlQURUb2tlblByb3ZpZGVyYCBhcmd1bWVudHMgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZTsgb25seSBvbmUgY2FuIGJlIHBhc3NlZCBhdCBhIHRpbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGVmaW5lIGEgc2VudGluZWwgdmFsdWUgdG8gYXZvaWQgYW55IHR5cGluZyBpc3N1ZXNcbiAgICAgICAgYXBpS2V5ID8/IChhcGlLZXkgPSBBUElfS0VZX1NFTlRJTkVMKTtcbiAgICAgICAgb3B0cy5kZWZhdWx0UXVlcnkgPSB7IC4uLm9wdHMuZGVmYXVsdFF1ZXJ5LCAnYXBpLXZlcnNpb24nOiBhcGlWZXJzaW9uIH07XG4gICAgICAgIGlmICghYmFzZVVSTCkge1xuICAgICAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gcHJvY2Vzcy5lbnZbJ0FaVVJFX09QRU5BSV9FTkRQT0lOVCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuT3BlbkFJRXJyb3IoJ011c3QgcHJvdmlkZSBvbmUgb2YgdGhlIGBiYXNlVVJMYCBvciBgZW5kcG9pbnRgIGFyZ3VtZW50cywgb3IgdGhlIGBBWlVSRV9PUEVOQUlfRU5EUE9JTlRgIGVudmlyb25tZW50IHZhcmlhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiYXNlVVJMID0gYCR7ZW5kcG9pbnR9L29wZW5haWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKCdiYXNlVVJMIGFuZCBlbmRwb2ludCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgYXBpS2V5LFxuICAgICAgICAgICAgYmFzZVVSTCxcbiAgICAgICAgICAgIC4uLm9wdHMsXG4gICAgICAgICAgICAuLi4oZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXIgIT09IHVuZGVmaW5lZCA/IHsgZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXIgfSA6IHt9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXBpVmVyc2lvbiA9ICcnO1xuICAgICAgICB0aGlzLl9henVyZUFEVG9rZW5Qcm92aWRlciA9IGF6dXJlQURUb2tlblByb3ZpZGVyO1xuICAgICAgICB0aGlzLmFwaVZlcnNpb24gPSBhcGlWZXJzaW9uO1xuICAgICAgICB0aGlzLl9kZXBsb3ltZW50ID0gZGVwbG95bWVudDtcbiAgICB9XG4gICAgYnVpbGRSZXF1ZXN0KG9wdGlvbnMsIHByb3BzID0ge30pIHtcbiAgICAgICAgaWYgKF9kZXBsb3ltZW50c19lbmRwb2ludHMuaGFzKG9wdGlvbnMucGF0aCkgJiYgb3B0aW9ucy5tZXRob2QgPT09ICdwb3N0JyAmJiBvcHRpb25zLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCFDb3JlLmlzT2JqKG9wdGlvbnMuYm9keSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHJlcXVlc3QgYm9keSB0byBiZSBhbiBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5fZGVwbG95bWVudCB8fCBvcHRpb25zLmJvZHlbJ21vZGVsJ107XG4gICAgICAgICAgICBpZiAobW9kZWwgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5iYXNlVVJMLmluY2x1ZGVzKCcvZGVwbG95bWVudHMnKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucGF0aCA9IGAvZGVwbG95bWVudHMvJHttb2RlbH0ke29wdGlvbnMucGF0aH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5idWlsZFJlcXVlc3Qob3B0aW9ucywgcHJvcHMpO1xuICAgIH1cbiAgICBhc3luYyBfZ2V0QXp1cmVBRFRva2VuKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2F6dXJlQURUb2tlblByb3ZpZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuX2F6dXJlQURUb2tlblByb3ZpZGVyKCk7XG4gICAgICAgICAgICBpZiAoIXRva2VuIHx8IHR5cGVvZiB0b2tlbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKGBFeHBlY3RlZCAnYXp1cmVBRFRva2VuUHJvdmlkZXInIGFyZ3VtZW50IHRvIHJldHVybiBhIHN0cmluZyBidXQgaXQgcmV0dXJuZWQgJHt0b2tlbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhdXRoSGVhZGVycyhvcHRzKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgYXN5bmMgcHJlcGFyZU9wdGlvbnMob3B0cykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHVzZXIgc2hvdWxkIHByb3ZpZGUgYSBiZWFyZXIgdG9rZW4gcHJvdmlkZXIgaWYgdGhleSB3YW50XG4gICAgICAgICAqIHRvIHVzZSBBenVyZSBBRCBhdXRoZW50aWNhdGlvbi4gVGhlIHVzZXIgc2hvdWxkbid0IHNldCB0aGVcbiAgICAgICAgICogQXV0aG9yaXphdGlvbiBoZWFkZXIgbWFudWFsbHkgYmVjYXVzZSB0aGUgaGVhZGVyIGlzIG92ZXJ3cml0dGVuXG4gICAgICAgICAqIHdpdGggdGhlIEF6dXJlIEFEIHRva2VuIGlmIGEgYmVhcmVyIHRva2VuIHByb3ZpZGVyIGlzIHByb3ZpZGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9wdHMuaGVhZGVycz8uWydhcGkta2V5J10pIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5wcmVwYXJlT3B0aW9ucyhvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuX2dldEF6dXJlQURUb2tlbigpO1xuICAgICAgICBvcHRzLmhlYWRlcnMgPz8gKG9wdHMuaGVhZGVycyA9IHt9KTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBvcHRzLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0b2tlbn1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYXBpS2V5ICE9PSBBUElfS0VZX1NFTlRJTkVMKSB7XG4gICAgICAgICAgICBvcHRzLmhlYWRlcnNbJ2FwaS1rZXknXSA9IHRoaXMuYXBpS2V5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9ycy5PcGVuQUlFcnJvcignVW5hYmxlIHRvIGhhbmRsZSBhdXRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLnByZXBhcmVPcHRpb25zKG9wdHMpO1xuICAgIH1cbn1cbmNvbnN0IF9kZXBsb3ltZW50c19lbmRwb2ludHMgPSBuZXcgU2V0KFtcbiAgICAnL2NvbXBsZXRpb25zJyxcbiAgICAnL2NoYXQvY29tcGxldGlvbnMnLFxuICAgICcvZW1iZWRkaW5ncycsXG4gICAgJy9hdWRpby90cmFuc2NyaXB0aW9ucycsXG4gICAgJy9hdWRpby90cmFuc2xhdGlvbnMnLFxuICAgICcvYXVkaW8vc3BlZWNoJyxcbiAgICAnL2ltYWdlcy9nZW5lcmF0aW9ucycsXG5dKTtcbmNvbnN0IEFQSV9LRVlfU0VOVElORUwgPSAnPE1pc3NpbmcgS2V5Pic7XG5leHBvcnQgeyB0b0ZpbGUsIGZpbGVGcm9tUGF0aCB9IGZyb20gXCIuL3VwbG9hZHMubWpzXCI7XG5leHBvcnQgeyBPcGVuQUlFcnJvciwgQVBJRXJyb3IsIEFQSUNvbm5lY3Rpb25FcnJvciwgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciwgQVBJVXNlckFib3J0RXJyb3IsIE5vdEZvdW5kRXJyb3IsIENvbmZsaWN0RXJyb3IsIFJhdGVMaW1pdEVycm9yLCBCYWRSZXF1ZXN0RXJyb3IsIEF1dGhlbnRpY2F0aW9uRXJyb3IsIEludGVybmFsU2VydmVyRXJyb3IsIFBlcm1pc3Npb25EZW5pZWRFcnJvciwgVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yLCB9IGZyb20gXCIuL2Vycm9yLm1qc1wiO1xuZXhwb3J0IGRlZmF1bHQgT3BlbkFJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJfYSIsInFzIiwiQ29yZSIsIkVycm9ycyIsIlBhZ2luYXRpb24iLCJVcGxvYWRzIiwiQVBJIiwiQmF0Y2hlcyIsIkJhdGNoZXNQYWdlIiwiQ29tcGxldGlvbnMiLCJFbWJlZGRpbmdzIiwiRmlsZU9iamVjdHNQYWdlIiwiRmlsZXMiLCJJbWFnZXMiLCJNb2RlbHMiLCJNb2RlbHNQYWdlIiwiTW9kZXJhdGlvbnMiLCJBdWRpbyIsIkJldGEiLCJDaGF0IiwiRmluZVR1bmluZyIsIlVwbG9hZHNBUElVcGxvYWRzIiwiT3BlbkFJIiwiQVBJQ2xpZW50IiwiZGVmYXVsdFF1ZXJ5IiwiX29wdGlvbnMiLCJkZWZhdWx0SGVhZGVycyIsIm9wdHMiLCJvcmdhbml6YXRpb24iLCJwcm9qZWN0IiwiYXV0aEhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiYXBpS2V5Iiwic3RyaW5naWZ5UXVlcnkiLCJxdWVyeSIsInN0cmluZ2lmeSIsImFycmF5Rm9ybWF0IiwiY29uc3RydWN0b3IiLCJiYXNlVVJMIiwicmVhZEVudiIsInVuZGVmaW5lZCIsIk9wZW5BSUVycm9yIiwib3B0aW9ucyIsImRhbmdlcm91c2x5QWxsb3dCcm93c2VyIiwiaXNSdW5uaW5nSW5Ccm93c2VyIiwidGltZW91dCIsImh0dHBBZ2VudCIsIm1heFJldHJpZXMiLCJmZXRjaCIsImNvbXBsZXRpb25zIiwiY2hhdCIsImVtYmVkZGluZ3MiLCJmaWxlcyIsImltYWdlcyIsImF1ZGlvIiwibW9kZXJhdGlvbnMiLCJtb2RlbHMiLCJmaW5lVHVuaW5nIiwiYmV0YSIsImJhdGNoZXMiLCJ1cGxvYWRzIiwiREVGQVVMVF9USU1FT1VUIiwiQVBJRXJyb3IiLCJBUElDb25uZWN0aW9uRXJyb3IiLCJBUElDb25uZWN0aW9uVGltZW91dEVycm9yIiwiQVBJVXNlckFib3J0RXJyb3IiLCJOb3RGb3VuZEVycm9yIiwiQ29uZmxpY3RFcnJvciIsIlJhdGVMaW1pdEVycm9yIiwiQmFkUmVxdWVzdEVycm9yIiwiQXV0aGVudGljYXRpb25FcnJvciIsIkludGVybmFsU2VydmVyRXJyb3IiLCJQZXJtaXNzaW9uRGVuaWVkRXJyb3IiLCJVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IiLCJ0b0ZpbGUiLCJmaWxlRnJvbVBhdGgiLCJBenVyZU9wZW5BSSIsImJ1aWxkUmVxdWVzdCIsInByb3BzIiwiX2RlcGxveW1lbnRzX2VuZHBvaW50cyIsImhhcyIsInBhdGgiLCJtZXRob2QiLCJib2R5IiwiaXNPYmoiLCJFcnJvciIsIm1vZGVsIiwiX2RlcGxveW1lbnQiLCJpbmNsdWRlcyIsIl9nZXRBenVyZUFEVG9rZW4iLCJfYXp1cmVBRFRva2VuUHJvdmlkZXIiLCJ0b2tlbiIsInByZXBhcmVPcHRpb25zIiwiaGVhZGVycyIsIkFQSV9LRVlfU0VOVElORUwiLCJhcGlWZXJzaW9uIiwiZW5kcG9pbnQiLCJkZXBsb3ltZW50IiwiYXp1cmVBRFRva2VuUHJvdmlkZXIiLCJwcm9jZXNzIiwiZW52IiwiU2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/internal/decoders/line.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/internal/decoders/line.mjs ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineDecoder: function() { return /* binding */ LineDecoder; }\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/../../node_modules/buffer/index.js\")[\"Buffer\"];\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = \"\\r\" + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith(\"\\r\")) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || \"\");\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        // if there is a trailing new line then the last entry will be an empty\n        // string which we don't care about\n        if (trailingNewline) {\n            lines.pop();\n        }\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [\n                this.buffer.join(\"\") + lines[0],\n                ...lines.slice(1)\n            ];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [\n                lines.pop() || \"\"\n            ];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null) return \"\";\n        if (typeof bytes === \"string\") return bytes;\n        // Node:\n        if (typeof Buffer !== \"undefined\") {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Unexpected: received non-Uint8Array (\".concat(bytes.constructor.name, ') stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.'));\n        }\n        // Browser\n        if (typeof TextDecoder !== \"undefined\") {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                var _this_textDecoder;\n                (_this_textDecoder = this.textDecoder) !== null && _this_textDecoder !== void 0 ? _this_textDecoder : this.textDecoder = new TextDecoder(\"utf8\");\n                return this.textDecoder.decode(bytes);\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Unexpected: received non-Uint8Array/ArrayBuffer (\".concat(bytes.constructor.name, \") in a web platform. Please report this error.\"));\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.\");\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [\n            this.buffer.join(\"\")\n        ];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n    constructor(){\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g; //# sourceMappingURL=line.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvZGVjb2RlcnMvbGluZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQzlDOzs7OztDQUtDLEdBQ00sTUFBTUM7SUFLVEMsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsSUFBSUMsT0FBTyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0Y7UUFDM0IsSUFBSSxJQUFJLENBQUNHLFVBQVUsRUFBRTtZQUNqQkYsT0FBTyxPQUFPQTtZQUNkLElBQUksQ0FBQ0UsVUFBVSxHQUFHO1FBQ3RCO1FBQ0EsSUFBSUYsS0FBS0csUUFBUSxDQUFDLE9BQU87WUFDckIsSUFBSSxDQUFDRCxVQUFVLEdBQUc7WUFDbEJGLE9BQU9BLEtBQUtJLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDMUI7UUFDQSxJQUFJLENBQUNKLE1BQU07WUFDUCxPQUFPLEVBQUU7UUFDYjtRQUNBLE1BQU1LLGtCQUFrQlIsWUFBWVMsYUFBYSxDQUFDQyxHQUFHLENBQUNQLElBQUksQ0FBQ0EsS0FBS1EsTUFBTSxHQUFHLEVBQUUsSUFBSTtRQUMvRSxJQUFJQyxRQUFRVCxLQUFLVSxLQUFLLENBQUNiLFlBQVljLGNBQWM7UUFDakQsdUVBQXVFO1FBQ3ZFLG1DQUFtQztRQUNuQyxJQUFJTixpQkFBaUI7WUFDakJJLE1BQU1HLEdBQUc7UUFDYjtRQUNBLElBQUlILE1BQU1ELE1BQU0sS0FBSyxLQUFLLENBQUNILGlCQUFpQjtZQUN4QyxJQUFJLENBQUNRLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLEVBQUU7UUFDYjtRQUNBLElBQUksSUFBSSxDQUFDSSxNQUFNLENBQUNMLE1BQU0sR0FBRyxHQUFHO1lBQ3hCQyxRQUFRO2dCQUFDLElBQUksQ0FBQ0ksTUFBTSxDQUFDRSxJQUFJLENBQUMsTUFBTU4sS0FBSyxDQUFDLEVBQUU7bUJBQUtBLE1BQU1MLEtBQUssQ0FBQzthQUFHO1lBQzVELElBQUksQ0FBQ1MsTUFBTSxHQUFHLEVBQUU7UUFDcEI7UUFDQSxJQUFJLENBQUNSLGlCQUFpQjtZQUNsQixJQUFJLENBQUNRLE1BQU0sR0FBRztnQkFBQ0osTUFBTUcsR0FBRyxNQUFNO2FBQUc7UUFDckM7UUFDQSxPQUFPSDtJQUNYO0lBQ0FSLFdBQVdlLEtBQUssRUFBRTtRQUNkLElBQUlBLFNBQVMsTUFDVCxPQUFPO1FBQ1gsSUFBSSxPQUFPQSxVQUFVLFVBQ2pCLE9BQU9BO1FBQ1gsUUFBUTtRQUNSLElBQUksT0FBT0MsTUFBTUEsS0FBSyxhQUFhO1lBQy9CLElBQUlELGlCQUFpQkMsTUFBTUEsRUFBRTtnQkFDekIsT0FBT0QsTUFBTUUsUUFBUTtZQUN6QjtZQUNBLElBQUlGLGlCQUFpQkcsWUFBWTtnQkFDN0IsT0FBT0YsTUFBTUEsQ0FBQ0csSUFBSSxDQUFDSixPQUFPRSxRQUFRO1lBQ3RDO1lBQ0EsTUFBTSxJQUFJdEIsbURBQVdBLENBQUMsd0NBQStELE9BQXZCb0IsTUFBTUssV0FBVyxDQUFDQyxJQUFJLEVBQUM7UUFDekY7UUFDQSxVQUFVO1FBQ1YsSUFBSSxPQUFPQyxnQkFBZ0IsYUFBYTtZQUNwQyxJQUFJUCxpQkFBaUJHLGNBQWNILGlCQUFpQlEsYUFBYTtvQkFDN0Q7Z0JBQUEseUJBQUksQ0FBQ0MsV0FBVyxjQUFoQixtREFBcUIsSUFBSSxDQUFDQSxXQUFXLEdBQUcsSUFBSUYsWUFBWTtnQkFDeEQsT0FBTyxJQUFJLENBQUNFLFdBQVcsQ0FBQzNCLE1BQU0sQ0FBQ2tCO1lBQ25DO1lBQ0EsTUFBTSxJQUFJcEIsbURBQVdBLENBQUMsb0RBQTJFLE9BQXZCb0IsTUFBTUssV0FBVyxDQUFDQyxJQUFJLEVBQUM7UUFDckc7UUFDQSxNQUFNLElBQUkxQixtREFBV0EsQ0FBRTtJQUMzQjtJQUNBOEIsUUFBUTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUNiLE1BQU0sQ0FBQ0wsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDTixVQUFVLEVBQUU7WUFDekMsT0FBTyxFQUFFO1FBQ2I7UUFDQSxNQUFNTyxRQUFRO1lBQUMsSUFBSSxDQUFDSSxNQUFNLENBQUNFLElBQUksQ0FBQztTQUFJO1FBQ3BDLElBQUksQ0FBQ0YsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDWCxVQUFVLEdBQUc7UUFDbEIsT0FBT087SUFDWDtJQXRFQVksYUFBYztRQUNWLElBQUksQ0FBQ1IsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDWCxVQUFVLEdBQUc7SUFDdEI7QUFvRUo7QUFDQSxrQkFBa0I7QUFDbEJMLFlBQVlTLGFBQWEsR0FBRyxJQUFJcUIsSUFBSTtJQUFDO0lBQU07Q0FBSztBQUNoRDlCLFlBQVljLGNBQWMsR0FBRyxnQkFDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvZGVjb2RlcnMvbGluZS5tanM/MmNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci5tanNcIjtcbi8qKlxuICogQSByZS1pbXBsZW1lbnRhdGlvbiBvZiBodHRweCdzIGBMaW5lRGVjb2RlcmAgaW4gUHl0aG9uIHRoYXQgaGFuZGxlcyBpbmNyZW1lbnRhbGx5XG4gKiByZWFkaW5nIGxpbmVzIGZyb20gdGV4dC5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZW5jb2RlL2h0dHB4L2Jsb2IvOTIwMzMzZWE5ODExOGU5Y2Y2MTdmMjQ2OTA1ZDdiMjAyNTEwOTQxYy9odHRweC9fZGVjb2RlcnMucHkjTDI1OFxuICovXG5leHBvcnQgY2xhc3MgTGluZURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnRyYWlsaW5nQ1IgPSBmYWxzZTtcbiAgICB9XG4gICAgZGVjb2RlKGNodW5rKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5kZWNvZGVUZXh0KGNodW5rKTtcbiAgICAgICAgaWYgKHRoaXMudHJhaWxpbmdDUikge1xuICAgICAgICAgICAgdGV4dCA9ICdcXHInICsgdGV4dDtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdDUiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0LmVuZHNXaXRoKCdcXHInKSkge1xuICAgICAgICAgICAgdGhpcy50cmFpbGluZ0NSID0gdHJ1ZTtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFpbGluZ05ld2xpbmUgPSBMaW5lRGVjb2Rlci5ORVdMSU5FX0NIQVJTLmhhcyh0ZXh0W3RleHQubGVuZ3RoIC0gMV0gfHwgJycpO1xuICAgICAgICBsZXQgbGluZXMgPSB0ZXh0LnNwbGl0KExpbmVEZWNvZGVyLk5FV0xJTkVfUkVHRVhQKTtcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSB0cmFpbGluZyBuZXcgbGluZSB0aGVuIHRoZSBsYXN0IGVudHJ5IHdpbGwgYmUgYW4gZW1wdHlcbiAgICAgICAgLy8gc3RyaW5nIHdoaWNoIHdlIGRvbid0IGNhcmUgYWJvdXRcbiAgICAgICAgaWYgKHRyYWlsaW5nTmV3bGluZSkge1xuICAgICAgICAgICAgbGluZXMucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMSAmJiAhdHJhaWxpbmdOZXdsaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGxpbmVzWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGluZXMgPSBbdGhpcy5idWZmZXIuam9pbignJykgKyBsaW5lc1swXSwgLi4ubGluZXMuc2xpY2UoMSldO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRyYWlsaW5nTmV3bGluZSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBbbGluZXMucG9wKCkgfHwgJyddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG4gICAgZGVjb2RlVGV4dChieXRlcykge1xuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgICAgIC8vIE5vZGU6XG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBVbmV4cGVjdGVkOiByZWNlaXZlZCBub24tVWludDhBcnJheSAoJHtieXRlcy5jb25zdHJ1Y3Rvci5uYW1lfSkgc3RyZWFtIGNodW5rIGluIGFuIGVudmlyb25tZW50IHdpdGggYSBnbG9iYWwgXCJCdWZmZXJcIiBkZWZpbmVkLCB3aGljaCB0aGlzIGxpYnJhcnkgYXNzdW1lcyB0byBiZSBOb2RlLiBQbGVhc2UgcmVwb3J0IHRoaXMgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQnJvd3NlclxuICAgICAgICBpZiAodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBieXRlcyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0RGVjb2RlciA/PyAodGhpcy50ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmOCcpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0RGVjb2Rlci5kZWNvZGUoYnl0ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBVbmV4cGVjdGVkOiByZWNlaXZlZCBub24tVWludDhBcnJheS9BcnJheUJ1ZmZlciAoJHtieXRlcy5jb25zdHJ1Y3Rvci5uYW1lfSkgaW4gYSB3ZWIgcGxhdGZvcm0uIFBsZWFzZSByZXBvcnQgdGhpcyBlcnJvci5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYFVuZXhwZWN0ZWQ6IG5laXRoZXIgQnVmZmVyIG5vciBUZXh0RGVjb2RlciBhcmUgYXZhaWxhYmxlIGFzIGdsb2JhbHMuIFBsZWFzZSByZXBvcnQgdGhpcyBlcnJvci5gKTtcbiAgICB9XG4gICAgZmx1c2goKSB7XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIubGVuZ3RoICYmICF0aGlzLnRyYWlsaW5nQ1IpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lcyA9IFt0aGlzLmJ1ZmZlci5qb2luKCcnKV07XG4gICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIHRoaXMudHJhaWxpbmdDUiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxufVxuLy8gcHJldHRpZXItaWdub3JlXG5MaW5lRGVjb2Rlci5ORVdMSU5FX0NIQVJTID0gbmV3IFNldChbJ1xcbicsICdcXHInXSk7XG5MaW5lRGVjb2Rlci5ORVdMSU5FX1JFR0VYUCA9IC9cXHJcXG58W1xcblxccl0vZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmUubWpzLm1hcCJdLCJuYW1lcyI6WyJPcGVuQUlFcnJvciIsIkxpbmVEZWNvZGVyIiwiZGVjb2RlIiwiY2h1bmsiLCJ0ZXh0IiwiZGVjb2RlVGV4dCIsInRyYWlsaW5nQ1IiLCJlbmRzV2l0aCIsInNsaWNlIiwidHJhaWxpbmdOZXdsaW5lIiwiTkVXTElORV9DSEFSUyIsImhhcyIsImxlbmd0aCIsImxpbmVzIiwic3BsaXQiLCJORVdMSU5FX1JFR0VYUCIsInBvcCIsImJ1ZmZlciIsInB1c2giLCJqb2luIiwiYnl0ZXMiLCJCdWZmZXIiLCJ0b1N0cmluZyIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiVGV4dERlY29kZXIiLCJBcnJheUJ1ZmZlciIsInRleHREZWNvZGVyIiwiZmx1c2giLCJTZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/internal/decoders/line.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/internal/qs/formats.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/internal/qs/formats.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RFC1738: function() { return /* binding */ RFC1738; },\n/* harmony export */   RFC3986: function() { return /* binding */ RFC3986; },\n/* harmony export */   default_format: function() { return /* binding */ default_format; },\n/* harmony export */   formatters: function() { return /* binding */ formatters; }\n/* harmony export */ });\nconst default_format = \"RFC3986\";\nconst formatters = {\n    RFC1738: (v)=>String(v).replace(/%20/g, \"+\"),\n    RFC3986: (v)=>String(v)\n};\nconst RFC1738 = \"RFC1738\";\nconst RFC3986 = \"RFC3986\"; //# sourceMappingURL=formats.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvcXMvZm9ybWF0cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLE1BQU1BLGlCQUFpQixVQUFVO0FBQ2pDLE1BQU1DLGFBQWE7SUFDdEJDLFNBQVMsQ0FBQ0MsSUFBTUMsT0FBT0QsR0FBR0UsT0FBTyxDQUFDLFFBQVE7SUFDMUNDLFNBQVMsQ0FBQ0gsSUFBTUMsT0FBT0Q7QUFDM0IsRUFBRTtBQUNLLE1BQU1ELFVBQVUsVUFBVTtBQUMxQixNQUFNSSxVQUFVLFVBQVUsQ0FDakMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvcXMvZm9ybWF0cy5tanM/YzMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZGVmYXVsdF9mb3JtYXQgPSAnUkZDMzk4Nic7XG5leHBvcnQgY29uc3QgZm9ybWF0dGVycyA9IHtcbiAgICBSRkMxNzM4OiAodikgPT4gU3RyaW5nKHYpLnJlcGxhY2UoLyUyMC9nLCAnKycpLFxuICAgIFJGQzM5ODY6ICh2KSA9PiBTdHJpbmcodiksXG59O1xuZXhwb3J0IGNvbnN0IFJGQzE3MzggPSAnUkZDMTczOCc7XG5leHBvcnQgY29uc3QgUkZDMzk4NiA9ICdSRkMzOTg2Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdHMubWpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0X2Zvcm1hdCIsImZvcm1hdHRlcnMiLCJSRkMxNzM4IiwidiIsIlN0cmluZyIsInJlcGxhY2UiLCJSRkMzOTg2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/internal/qs/formats.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/internal/qs/stringify.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/qs/stringify.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: function() { return /* binding */ stringify; }\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(app-pages-browser)/./node_modules/openai/internal/qs/utils.mjs\");\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats.mjs */ \"(app-pages-browser)/./node_modules/openai/internal/qs/formats.mjs\");\n\n\nconst has = Object.prototype.hasOwnProperty;\nconst array_prefix_generators = {\n    brackets (prefix) {\n        return String(prefix) + \"[]\";\n    },\n    comma: \"comma\",\n    indices (prefix, key) {\n        return String(prefix) + \"[\" + key + \"]\";\n    },\n    repeat (prefix) {\n        return String(prefix);\n    }\n};\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function(arr, value_or_array) {\n    push.apply(arr, is_array(value_or_array) ? value_or_array : [\n        value_or_array\n    ]);\n};\nconst to_ISO = Date.prototype.toISOString;\nconst defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: \"indices\",\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    delimiter: \"&\",\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.encode,\n    encodeValuesOnly: false,\n    format: _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format,\n    formatter: _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters[_formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format],\n    /** @deprecated */ indices: false,\n    serializeDate (date) {\n        return to_ISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\nfunction is_non_nullish_primitive(v) {\n    return typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" || typeof v === \"symbol\" || typeof v === \"bigint\";\n}\nconst sentinel = {};\nfunction inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    let obj = object;\n    let tmp_sc = sideChannel;\n    let step = 0;\n    let find_flag = false;\n    while((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag){\n        // Where object last appeared in the ref tree\n        const pos = tmp_sc.get(object);\n        step += 1;\n        if (typeof pos !== \"undefined\") {\n            if (pos === step) {\n                throw new RangeError(\"Cyclic object value\");\n            } else {\n                find_flag = true; // Break while\n            }\n        }\n        if (typeof tmp_sc.get(sentinel) === \"undefined\") {\n            step = 0;\n        }\n    }\n    if (typeof filter === \"function\") {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate === null || serializeDate === void 0 ? void 0 : serializeDate(obj);\n    } else if (generateArrayPrefix === \"comma\" && is_array(obj)) {\n        obj = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.maybe_map)(obj, function(value) {\n            if (value instanceof Date) {\n                return serializeDate === null || serializeDate === void 0 ? void 0 : serializeDate(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? // @ts-expect-error\n            encoder(prefix, defaults.encoder, charset, \"key\", format) : prefix;\n        }\n        obj = \"\";\n    }\n    if (is_non_nullish_primitive(obj) || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.is_buffer)(obj)) {\n        if (encoder) {\n            const key_value = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, \"key\", format);\n            return [\n                (formatter === null || formatter === void 0 ? void 0 : formatter(key_value)) + \"=\" + (// @ts-expect-error\n                formatter === null || formatter === void 0 ? void 0 : formatter(encoder(obj, defaults.encoder, charset, \"value\", format)))\n            ];\n        }\n        return [\n            (formatter === null || formatter === void 0 ? void 0 : formatter(prefix)) + \"=\" + (formatter === null || formatter === void 0 ? void 0 : formatter(String(obj)))\n        ];\n    }\n    const values = [];\n    if (typeof obj === \"undefined\") {\n        return values;\n    }\n    let obj_keys;\n    if (generateArrayPrefix === \"comma\" && is_array(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            // @ts-expect-error values only\n            obj = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.maybe_map)(obj, encoder);\n        }\n        obj_keys = [\n            {\n                value: obj.length > 0 ? obj.join(\",\") || null : void undefined\n            }\n        ];\n    } else if (is_array(filter)) {\n        obj_keys = filter;\n    } else {\n        const keys = Object.keys(obj);\n        obj_keys = sort ? keys.sort(sort) : keys;\n    }\n    const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, \"%2E\") : String(prefix);\n    const adjusted_prefix = commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + \"[]\" : encoded_prefix;\n    if (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n        return adjusted_prefix + \"[]\";\n    }\n    for(let j = 0; j < obj_keys.length; ++j){\n        const key = obj_keys[j];\n        const value = // @ts-ignore\n        typeof key === \"object\" && typeof key.value !== \"undefined\" ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        // @ts-ignore\n        const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, \"%2E\") : key;\n        const key_prefix = is_array(obj) ? typeof generateArrayPrefix === \"function\" ? generateArrayPrefix(adjusted_prefix, encoded_key) : adjusted_prefix : adjusted_prefix + (allowDots ? \".\" + encoded_key : \"[\" + encoded_key + \"]\");\n        sideChannel.set(object, step);\n        const valueSideChannel = new WeakMap();\n        valueSideChannel.set(sentinel, sideChannel);\n        push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, // @ts-ignore\n        generateArrayPrefix === \"comma\" && encodeValuesOnly && is_array(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n}\nfunction normalize_stringify_options() {\n    let opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaults;\n    if (typeof opts.allowEmptyArrays !== \"undefined\" && typeof opts.allowEmptyArrays !== \"boolean\") {\n        throw new TypeError(\"`allowEmptyArrays` option can only be `true` or `false`, when provided\");\n    }\n    if (typeof opts.encodeDotInKeys !== \"undefined\" && typeof opts.encodeDotInKeys !== \"boolean\") {\n        throw new TypeError(\"`encodeDotInKeys` option can only be `true` or `false`, when provided\");\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== \"undefined\" && typeof opts.encoder !== \"function\") {\n        throw new TypeError(\"Encoder has to be a function.\");\n    }\n    const charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    let format = _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.default_format;\n    if (typeof opts.format !== \"undefined\") {\n        if (!has.call(_formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters, opts.format)) {\n            throw new TypeError(\"Unknown format option provided.\");\n        }\n        format = opts.format;\n    }\n    const formatter = _formats_mjs__WEBPACK_IMPORTED_MODULE_1__.formatters[format];\n    let filter = defaults.filter;\n    if (typeof opts.filter === \"function\" || is_array(opts.filter)) {\n        filter = opts.filter;\n    }\n    let arrayFormat;\n    if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (\"indices\" in opts) {\n        arrayFormat = opts.indices ? \"indices\" : \"repeat\";\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n    if (\"commaRoundTrip\" in opts && typeof opts.commaRoundTrip !== \"boolean\") {\n        throw new TypeError(\"`commaRoundTrip` must be a boolean, or absent\");\n    }\n    const allowDots = typeof opts.allowDots === \"undefined\" ? !!opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === \"boolean\" ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        // @ts-ignore\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === \"boolean\" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === \"undefined\" ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === \"boolean\" ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === \"boolean\" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === \"function\" ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === \"boolean\" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === \"function\" ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === \"boolean\" ? opts.skipNulls : defaults.skipNulls,\n        // @ts-ignore\n        sort: typeof opts.sort === \"function\" ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n}\nfunction stringify(object) {\n    let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let obj = object;\n    const options = normalize_stringify_options(opts);\n    let obj_keys;\n    let filter;\n    if (typeof options.filter === \"function\") {\n        filter = options.filter;\n        obj = filter(\"\", obj);\n    } else if (is_array(options.filter)) {\n        filter = options.filter;\n        obj_keys = filter;\n    }\n    const keys = [];\n    if (typeof obj !== \"object\" || obj === null) {\n        return \"\";\n    }\n    const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n    const commaRoundTrip = generateArrayPrefix === \"comma\" && options.commaRoundTrip;\n    if (!obj_keys) {\n        obj_keys = Object.keys(obj);\n    }\n    if (options.sort) {\n        obj_keys.sort(options.sort);\n    }\n    const sideChannel = new WeakMap();\n    for(let i = 0; i < obj_keys.length; ++i){\n        const key = obj_keys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        push_to_array(keys, inner_stringify(obj[key], key, // @ts-expect-error\n        generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    const joined = keys.join(options.delimiter);\n    let prefix = options.addQueryPrefix === true ? \"?\" : \"\";\n    if (options.charsetSentinel) {\n        if (options.charset === \"iso-8859-1\") {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += \"utf8=%26%2310003%3B&\";\n        } else {\n            // encodeURIComponent('✓')\n            prefix += \"utf8=%E2%9C%93&\";\n        }\n    }\n    return joined.length > 0 ? prefix + joined : \"\";\n} //# sourceMappingURL=stringify.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/internal/qs/stringify.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/internal/qs/utils.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/internal/qs/utils.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign_single_source: function() { return /* binding */ assign_single_source; },\n/* harmony export */   combine: function() { return /* binding */ combine; },\n/* harmony export */   compact: function() { return /* binding */ compact; },\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   is_buffer: function() { return /* binding */ is_buffer; },\n/* harmony export */   is_regexp: function() { return /* binding */ is_regexp; },\n/* harmony export */   maybe_map: function() { return /* binding */ maybe_map; },\n/* harmony export */   merge: function() { return /* binding */ merge; }\n/* harmony export */ });\n/* harmony import */ var _formats_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats.mjs */ \"(app-pages-browser)/./node_modules/openai/internal/qs/formats.mjs\");\n\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\nconst hex_table = (()=>{\n    const array = [];\n    for(let i = 0; i < 256; ++i){\n        array.push(\"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase());\n    }\n    return array;\n})();\nfunction compact_queue(queue) {\n    while(queue.length > 1){\n        const item = queue.pop();\n        if (!item) continue;\n        const obj = item.obj[item.prop];\n        if (is_array(obj)) {\n            const compacted = [];\n            for(let j = 0; j < obj.length; ++j){\n                if (typeof obj[j] !== \"undefined\") {\n                    compacted.push(obj[j]);\n                }\n            }\n            // @ts-ignore\n            item.obj[item.prop] = compacted;\n        }\n    }\n}\nfunction array_to_object(source, options) {\n    const obj = options && options.plainObjects ? Object.create(null) : {};\n    for(let i = 0; i < source.length; ++i){\n        if (typeof source[i] !== \"undefined\") {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n}\nfunction merge(target, source) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    if (!source) {\n        return target;\n    }\n    if (typeof source !== \"object\") {\n        if (is_array(target)) {\n            target.push(source);\n        } else if (target && typeof target === \"object\") {\n            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [\n                target,\n                source\n            ];\n        }\n        return target;\n    }\n    if (!target || typeof target !== \"object\") {\n        return [\n            target\n        ].concat(source);\n    }\n    let mergeTarget = target;\n    if (is_array(target) && !is_array(source)) {\n        // @ts-ignore\n        mergeTarget = array_to_object(target, options);\n    }\n    if (is_array(target) && is_array(source)) {\n        source.forEach(function(item, i) {\n            if (has.call(target, i)) {\n                const targetItem = target[i];\n                if (targetItem && typeof targetItem === \"object\" && item && typeof item === \"object\") {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function(acc, key) {\n        const value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n}\nfunction assign_single_source(target, source) {\n    return Object.keys(source).reduce(function(acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n}\nfunction decode(str, _, charset) {\n    const strWithoutPlus = str.replace(/\\+/g, \" \");\n    if (charset === \"iso-8859-1\") {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n}\nconst limit = 1024;\nconst encode = (str, _defaultEncoder, charset, _kind, format)=>{\n    // This code was originally written by Brian White for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    let string = str;\n    if (typeof str === \"symbol\") {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== \"string\") {\n        string = String(str);\n    }\n    if (charset === \"iso-8859-1\") {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {\n            return \"%26%23\" + parseInt($0.slice(2), 16) + \"%3B\";\n        });\n    }\n    let out = \"\";\n    for(let j = 0; j < string.length; j += limit){\n        const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        const arr = [];\n        for(let i = 0; i < segment.length; ++i){\n            let c = segment.charCodeAt(i);\n            if (c === 0x2d || // -\n            c === 0x2e || // .\n            c === 0x5f || // _\n            c === 0x7e || // ~\n            c >= 0x30 && c <= 0x39 || // 0-9\n            c >= 0x41 && c <= 0x5a || // a-z\n            c >= 0x61 && c <= 0x7a || // A-Z\n            format === _formats_mjs__WEBPACK_IMPORTED_MODULE_0__.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n            if (c < 0x80) {\n                arr[arr.length] = hex_table[c];\n                continue;\n            }\n            if (c < 0x800) {\n                arr[arr.length] = hex_table[0xc0 | c >> 6] + hex_table[0x80 | c & 0x3f];\n                continue;\n            }\n            if (c < 0xd800 || c >= 0xe000) {\n                arr[arr.length] = hex_table[0xe0 | c >> 12] + hex_table[0x80 | c >> 6 & 0x3f] + hex_table[0x80 | c & 0x3f];\n                continue;\n            }\n            i += 1;\n            c = 0x10000 + ((c & 0x3ff) << 10 | segment.charCodeAt(i) & 0x3ff);\n            arr[arr.length] = hex_table[0xf0 | c >> 18] + hex_table[0x80 | c >> 12 & 0x3f] + hex_table[0x80 | c >> 6 & 0x3f] + hex_table[0x80 | c & 0x3f];\n        }\n        out += arr.join(\"\");\n    }\n    return out;\n};\nfunction compact(value) {\n    const queue = [\n        {\n            obj: {\n                o: value\n            },\n            prop: \"o\"\n        }\n    ];\n    const refs = [];\n    for(let i = 0; i < queue.length; ++i){\n        const item = queue[i];\n        // @ts-ignore\n        const obj = item.obj[item.prop];\n        const keys = Object.keys(obj);\n        for(let j = 0; j < keys.length; ++j){\n            const key = keys[j];\n            const val = obj[key];\n            if (typeof val === \"object\" && val !== null && refs.indexOf(val) === -1) {\n                queue.push({\n                    obj: obj,\n                    prop: key\n                });\n                refs.push(val);\n            }\n        }\n    }\n    compact_queue(queue);\n    return value;\n}\nfunction is_regexp(obj) {\n    return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n}\nfunction is_buffer(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\nfunction combine(a, b) {\n    return [].concat(a, b);\n}\nfunction maybe_map(val, fn) {\n    if (is_array(val)) {\n        const mapped = [];\n        for(let i = 0; i < val.length; i += 1){\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n} //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/internal/qs/utils.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/internal/stream-utils.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/internal/stream-utils.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReadableStreamToAsyncIterable: function() { return /* binding */ ReadableStreamToAsyncIterable; }\n/* harmony export */ });\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function ReadableStreamToAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result === null || result === void 0 ? void 0 : result.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n} //# sourceMappingURL=stream-utils.mjs.map\n_c = ReadableStreamToAsyncIterable;\nvar _c;\n$RefreshReg$(_c, \"ReadableStreamToAsyncIterable\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvaW50ZXJuYWwvc3RyZWFtLXV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FDTSxTQUFTQSw4QkFBOEJDLE1BQU07SUFDaEQsSUFBSUEsTUFBTSxDQUFDQyxPQUFPQyxhQUFhLENBQUMsRUFDNUIsT0FBT0Y7SUFDWCxNQUFNRyxTQUFTSCxPQUFPSSxTQUFTO0lBQy9CLE9BQU87UUFDSCxNQUFNQztZQUNGLElBQUk7Z0JBQ0EsTUFBTUMsU0FBUyxNQUFNSCxPQUFPSSxJQUFJO2dCQUNoQyxJQUFJRCxtQkFBQUEsNkJBQUFBLE9BQVFFLElBQUksRUFDWkwsT0FBT00sV0FBVyxJQUFJLDBDQUEwQztnQkFDcEUsT0FBT0g7WUFDWCxFQUNBLE9BQU9JLEdBQUc7Z0JBQ05QLE9BQU9NLFdBQVcsSUFBSSwyQ0FBMkM7Z0JBQ2pFLE1BQU1DO1lBQ1Y7UUFDSjtRQUNBLE1BQU1DO1lBQ0YsTUFBTUMsZ0JBQWdCVCxPQUFPVSxNQUFNO1lBQ25DVixPQUFPTSxXQUFXO1lBQ2xCLE1BQU1HO1lBQ04sT0FBTztnQkFBRUosTUFBTTtnQkFBTU0sT0FBT0M7WUFBVTtRQUMxQztRQUNBLENBQUNkLE9BQU9DLGFBQWEsQ0FBQztZQUNsQixPQUFPLElBQUk7UUFDZjtJQUNKO0FBQ0osRUFDQSx5Q0FBeUM7S0E1QnpCSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2ludGVybmFsL3N0cmVhbS11dGlscy5tanM/NzQwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vc3QgYnJvd3NlcnMgZG9uJ3QgeWV0IGhhdmUgYXN5bmMgaXRlcmFibGUgc3VwcG9ydCBmb3IgUmVhZGFibGVTdHJlYW0sXG4gKiBhbmQgTm9kZSBoYXMgYSB2ZXJ5IGRpZmZlcmVudCB3YXkgb2YgcmVhZGluZyBieXRlcyBmcm9tIGl0cyBcIlJlYWRhYmxlU3RyZWFtXCIuXG4gKlxuICogVGhpcyBwb2x5ZmlsbCB3YXMgcHVsbGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL01hdHRpYXNCdWVsZW5zL3dlYi1zdHJlYW1zLXBvbHlmaWxsL3B1bGwvMTIyI2lzc3VlY29tbWVudC0xNjI3MzU0NDkwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZShzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSlcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Py5kb25lKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgY2xvc2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGVycm9yZWRcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyByZXR1cm4oKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxQcm9taXNlID0gcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICBhd2FpdCBjYW5jZWxQcm9taXNlO1xuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9O1xuICAgICAgICB9LFxuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbS11dGlscy5tanMubWFwIl0sIm5hbWVzIjpbIlJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlIiwic3RyZWFtIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInJlYWRlciIsImdldFJlYWRlciIsIm5leHQiLCJyZXN1bHQiLCJyZWFkIiwiZG9uZSIsInJlbGVhc2VMb2NrIiwiZSIsInJldHVybiIsImNhbmNlbFByb21pc2UiLCJjYW5jZWwiLCJ2YWx1ZSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/internal/stream-utils.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractChatCompletionRunner: function() { return /* binding */ AbstractChatCompletionRunner; }\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RunnableFunction.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStream.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/EventStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/parser.mjs\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\n\n\n\n\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nclass AbstractChatCompletionRunner extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\n    _addChatCompletion(chatCompletion) {\n        var _chatCompletion_choices_;\n        this._chatCompletions.push(chatCompletion);\n        this._emit(\"chatCompletion\", chatCompletion);\n        const message = (_chatCompletion_choices_ = chatCompletion.choices[0]) === null || _chatCompletion_choices_ === void 0 ? void 0 : _chatCompletion_choices_.message;\n        if (message) this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message) {\n        let emit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        if (!(\"content\" in message)) message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit(\"message\", message);\n            if (((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) || (0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message)) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit(\"functionCallResult\", message.content);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.function_call) {\n                this._emit(\"functionCall\", message.function_call);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls){\n                    if (tool_call.type === \"function\") {\n                        this._emit(\"functionCall\", tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */ async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"stream ended without producing a ChatCompletion\");\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalFunctionCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    }\n    async finalFunctionCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [\n            ...this._chatCompletions\n        ];\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion) this._emit(\"finalChatCompletion\", completion);\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage) this._emit(\"finalMessage\", finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent) this._emit(\"finalContent\", finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n        if (finalFunctionCall) this._emit(\"finalFunctionCall\", finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n        if (finalFunctionCallResult != null) this._emit(\"finalFunctionCallResult\", finalFunctionCallResult);\n        if (this._chatCompletions.some((c)=>c.usage)) {\n            this._emit(\"totalUsage\", __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(client, params, options) {\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await client.chat.completions.create({\n            ...params,\n            stream: false\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        return this._addChatCompletion((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.parseChatCompletion)(chatCompletion, params));\n    }\n    async _runChatCompletion(client, params, options) {\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(client, params, options);\n    }\n    async _runFunctions(client, params, options) {\n        const role = \"function\";\n        const { function_call = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof function_call !== \"string\" && (function_call === null || function_call === void 0 ? void 0 : function_call.name);\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.functions){\n            functionsByName[f.name || f.function.name] = f;\n        }\n        const functions = params.functions.map((f)=>({\n                name: f.name || f.function.name,\n                parameters: f.parameters,\n                description: f.description\n            }));\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            var _chatCompletion_choices_;\n            const chatCompletion = await this._createChatCompletion(client, {\n                ...restParams,\n                function_call,\n                functions,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = (_chatCompletion_choices_ = chatCompletion.choices[0]) === null || _chatCompletion_choices_ === void 0 ? void 0 : _chatCompletion_choices_.message;\n            if (!message) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"missing message in ChatCompletion response\");\n            }\n            if (!message.function_call) return;\n            const { name, arguments: args } = message.function_call;\n            const fn = functionsByName[name];\n            if (!fn) {\n                const content = \"Invalid function_call: \".concat(JSON.stringify(name), \". Available options are: \").concat(functions.map((f)=>JSON.stringify(f.name)).join(\", \"), \". Please try again\");\n                this._addMessage({\n                    role,\n                    name,\n                    content\n                });\n                continue;\n            } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                const content = \"Invalid function_call: \".concat(JSON.stringify(name), \". \").concat(JSON.stringify(singleFunctionToCall), \" requested. Please try again\");\n                this._addMessage({\n                    role,\n                    name,\n                    content\n                });\n                continue;\n            }\n            let parsed;\n            try {\n                parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n            } catch (error) {\n                this._addMessage({\n                    role,\n                    name,\n                    content: error instanceof Error ? error.message : String(error)\n                });\n                continue;\n            }\n            // @ts-expect-error it can't rule out `never` type.\n            const rawContent = await fn.function(parsed, this);\n            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n            this._addMessage({\n                role,\n                name,\n                content\n            });\n            if (singleFunctionToCall) return;\n        }\n    }\n    async _runTools(client, params, options) {\n        var _tool_choice_function;\n        const role = \"tool\";\n        const { tool_choice = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== \"string\" && (tool_choice === null || tool_choice === void 0 ? void 0 : (_tool_choice_function = tool_choice.function) === null || _tool_choice_function === void 0 ? void 0 : _tool_choice_function.name);\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        // TODO(someday): clean this logic up\n        const inputTools = params.tools.map((tool)=>{\n            if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableTool)(tool)) {\n                if (!tool.$callback) {\n                    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"Tool given to `.runTools()` that does not have an associated function\");\n                }\n                return {\n                    type: \"function\",\n                    function: {\n                        function: tool.$callback,\n                        name: tool.function.name,\n                        description: tool.function.description || \"\",\n                        parameters: tool.function.parameters,\n                        parse: tool.$parseRaw,\n                        strict: true\n                    }\n                };\n            }\n            return tool;\n        });\n        const functionsByName = {};\n        for (const f of inputTools){\n            if (f.type === \"function\") {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = \"tools\" in params ? inputTools.map((t)=>t.type === \"function\" ? {\n                type: \"function\",\n                function: {\n                    name: t.function.name || t.function.function.name,\n                    parameters: t.function.parameters,\n                    description: t.function.description,\n                    strict: t.function.strict\n                }\n            } : t) : undefined;\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            var _chatCompletion_choices_, _message_tool_calls;\n            const chatCompletion = await this._createChatCompletion(client, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = (_chatCompletion_choices_ = chatCompletion.choices[0]) === null || _chatCompletion_choices_ === void 0 ? void 0 : _chatCompletion_choices_.message;\n            if (!message) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"missing message in ChatCompletion response\");\n            }\n            if (!((_message_tool_calls = message.tool_calls) === null || _message_tool_calls === void 0 ? void 0 : _message_tool_calls.length)) {\n                return;\n            }\n            for (const tool_call of message.tool_calls){\n                if (tool_call.type !== \"function\") continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = \"Invalid tool_call: \".concat(JSON.stringify(name), \". Available options are: \").concat(Object.keys(functionsByName).map((name)=>JSON.stringify(name)).join(\", \"), \". Please try again\");\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = \"Invalid tool_call: \".concat(JSON.stringify(name), \". \").concat(JSON.stringify(singleFunctionToCall), \" requested. Please try again\");\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_4__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n                } catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({\n                    role,\n                    tool_call_id,\n                    content\n                });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n    constructor(){\n        super(...arguments);\n        _AbstractChatCompletionRunner_instances.add(this);\n        this._chatCompletions = [];\n        this.messages = [];\n    }\n}\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    var __classPrivateFieldGet_call_content;\n    return (__classPrivateFieldGet_call_content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content) !== null && __classPrivateFieldGet_call_content !== void 0 ? __classPrivateFieldGet_call_content : null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while(i-- > 0){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message)) {\n            const { function_call, ...rest } = message;\n            var _message_content, _message_refusal;\n            // TODO: support audio here\n            const ret = {\n                ...rest,\n                content: (_message_content = message.content) !== null && _message_content !== void 0 ? _message_content : null,\n                refusal: (_message_refusal = message.refusal) !== null && _message_refusal !== void 0 ? _message_refusal : null\n            };\n            if (function_call) {\n                ret.function_call = function_call;\n            }\n            return ret;\n        }\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"stream ended without producing a ChatCompletionMessage with role=assistant\");\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        var _message_tool_calls;\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && (message === null || message === void 0 ? void 0 : message.function_call)) {\n            return message.function_call;\n        }\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && (message === null || message === void 0 ? void 0 : (_message_tool_calls = message.tool_calls) === null || _message_tool_calls === void 0 ? void 0 : _message_tool_calls.length)) {\n            var _message_tool_calls_at;\n            return (_message_tool_calls_at = message.tool_calls.at(-1)) === null || _message_tool_calls_at === void 0 ? void 0 : _message_tool_calls_at.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) && message.content != null) {\n            return message.content;\n        }\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message) && message.content != null && typeof message.content === \"string\" && this.messages.some((x)=>{\n            var _x_tool_calls;\n            return x.role === \"assistant\" && ((_x_tool_calls = x.tool_calls) === null || _x_tool_calls === void 0 ? void 0 : _x_tool_calls.some((y)=>y.type === \"function\" && y.id === message.tool_call_id));\n        })) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0\n    };\n    for (const { usage } of this._chatCompletions){\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.\");\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return typeof rawContent === \"string\" ? rawContent : rawContent === undefined ? \"undefined\" : JSON.stringify(rawContent);\n}; //# sourceMappingURL=AbstractChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/AssistantStream.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/lib/AssistantStream.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantStream: function() { return /* binding */ AssistantStream; }\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../streaming.mjs */ \"(app-pages-browser)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventStream.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/EventStream.mjs\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\n\n\n\n\nclass AssistantStream extends _EventStream_mjs__WEBPACK_IMPORTED_MODULE_0__.EventStream {\n    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        //Catch all for passing along all events\n        this.on(\"event\", (event)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            } else {\n                pushQueue.push(event);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    static fromReadableStream(stream) {\n        const runner = new AssistantStream();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    async _fromReadableStream(readableStream, options) {\n        var _stream_controller_signal;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        this._connected();\n        const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream.fromReadableStream(readableStream, this.controller);\n        for await (const event of stream){\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if ((_stream_controller_signal = stream.controller.signal) === null || _stream_controller_signal === void 0 ? void 0 : _stream_controller_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n    static createToolAssistantStream(threadId, runId, runs, params, options) {\n        const runner = new AssistantStream();\n        runner._run(()=>runner._runToolAssistantStream(threadId, runId, runs, params, {\n                ...options,\n                headers: {\n                    ...options === null || options === void 0 ? void 0 : options.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createToolAssistantStream(run, threadId, runId, params, options) {\n        var _stream_controller_signal;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        const body = {\n            ...params,\n            stream: true\n        };\n        const stream = await run.submitToolOutputs(threadId, runId, body, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const event of stream){\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if ((_stream_controller_signal = stream.controller.signal) === null || _stream_controller_signal === void 0 ? void 0 : _stream_controller_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static createThreadAssistantStream(params, thread, options) {\n        const runner = new AssistantStream();\n        runner._run(()=>runner._threadAssistantStream(params, thread, {\n                ...options,\n                headers: {\n                    ...options === null || options === void 0 ? void 0 : options.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    static createAssistantStream(threadId, runs, params, options) {\n        const runner = new AssistantStream();\n        runner._run(()=>runner._runAssistantStream(threadId, runs, params, {\n                ...options,\n                headers: {\n                    ...options === null || options === void 0 ? void 0 : options.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    currentEvent() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n    }\n    currentRun() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n    }\n    currentMessageSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n    }\n    currentRunStepSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n    }\n    async finalRunSteps() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n    }\n    async finalMessages() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n    }\n    async finalRun() {\n        await this.done();\n        if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error(\"Final run was not received.\");\n        return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n    }\n    async _createThreadAssistantStream(thread, params, options) {\n        var _stream_controller_signal;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        const body = {\n            ...params,\n            stream: true\n        };\n        const stream = await thread.createAndRun(body, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const event of stream){\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if ((_stream_controller_signal = stream.controller.signal) === null || _stream_controller_signal === void 0 ? void 0 : _stream_controller_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    async _createAssistantStream(run, threadId, params, options) {\n        var _stream_controller_signal;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        const body = {\n            ...params,\n            stream: true\n        };\n        const stream = await run.create(threadId, body, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const event of stream){\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if ((_stream_controller_signal = stream.controller.signal) === null || _stream_controller_signal === void 0 ? void 0 : _stream_controller_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static accumulateDelta(acc, delta) {\n        for (const [key, deltaValue] of Object.entries(delta)){\n            if (!acc.hasOwnProperty(key)) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            let accValue = acc[key];\n            if (accValue === null || accValue === undefined) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // We don't accumulate these special properties\n            if (key === \"index\" || key === \"type\") {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // Type-specific accumulation logic\n            if (typeof accValue === \"string\" && typeof deltaValue === \"string\") {\n                accValue += deltaValue;\n            } else if (typeof accValue === \"number\" && typeof deltaValue === \"number\") {\n                accValue += deltaValue;\n            } else if (_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isObj(accValue) && _core_mjs__WEBPACK_IMPORTED_MODULE_3__.isObj(deltaValue)) {\n                accValue = this.accumulateDelta(accValue, deltaValue);\n            } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n                if (accValue.every((x)=>typeof x === \"string\" || typeof x === \"number\")) {\n                    accValue.push(...deltaValue); // Use spread syntax for efficient addition\n                    continue;\n                }\n                for (const deltaEntry of deltaValue){\n                    if (!_core_mjs__WEBPACK_IMPORTED_MODULE_3__.isObj(deltaEntry)) {\n                        throw new Error(\"Expected array delta entry to be an object but got: \".concat(deltaEntry));\n                    }\n                    const index = deltaEntry[\"index\"];\n                    if (index == null) {\n                        console.error(deltaEntry);\n                        throw new Error(\"Expected array delta entry to have an `index` property\");\n                    }\n                    if (typeof index !== \"number\") {\n                        throw new Error(\"Expected array delta entry `index` property to be a number but got \".concat(index));\n                    }\n                    const accEntry = accValue[index];\n                    if (accEntry == null) {\n                        accValue.push(deltaEntry);\n                    } else {\n                        accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n                    }\n                }\n                continue;\n            } else {\n                throw Error(\"Unhandled record type: \".concat(key, \", deltaValue: \").concat(deltaValue, \", accValue: \").concat(accValue));\n            }\n            acc[key] = accValue;\n        }\n        return acc;\n    }\n    _addRun(run) {\n        return run;\n    }\n    async _threadAssistantStream(params, thread, options) {\n        return await this._createThreadAssistantStream(thread, params, options);\n    }\n    async _runAssistantStream(threadId, runs, params, options) {\n        return await this._createAssistantStream(runs, threadId, params, options);\n    }\n    async _runToolAssistantStream(threadId, runId, runs, params, options) {\n        return await this._createToolAssistantStream(runs, threadId, runId, params, options);\n    }\n    constructor(){\n        super(...arguments);\n        _AssistantStream_instances.add(this);\n        //Track all events in a single list for reference\n        _AssistantStream_events.set(this, []);\n        //Used to accumulate deltas\n        //We are accumulating many types so the value here is not strict\n        _AssistantStream_runStepSnapshots.set(this, {});\n        _AssistantStream_messageSnapshots.set(this, {});\n        _AssistantStream_messageSnapshot.set(this, void 0);\n        _AssistantStream_finalRun.set(this, void 0);\n        _AssistantStream_currentContentIndex.set(this, void 0);\n        _AssistantStream_currentContent.set(this, void 0);\n        _AssistantStream_currentToolCallIndex.set(this, void 0);\n        _AssistantStream_currentToolCall.set(this, void 0);\n        //For current snapshot methods\n        _AssistantStream_currentEvent.set(this, void 0);\n        _AssistantStream_currentRunSnapshot.set(this, void 0);\n        _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n    }\n}\n_AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n    if (this.ended) return;\n    __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n    switch(event.event){\n        case \"thread.created\":\n            break;\n        case \"thread.run.created\":\n        case \"thread.run.queued\":\n        case \"thread.run.in_progress\":\n        case \"thread.run.requires_action\":\n        case \"thread.run.completed\":\n        case \"thread.run.failed\":\n        case \"thread.run.cancelling\":\n        case \"thread.run.cancelled\":\n        case \"thread.run.expired\":\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n            break;\n        case \"thread.run.step.created\":\n        case \"thread.run.step.in_progress\":\n        case \"thread.run.step.delta\":\n        case \"thread.run.step.completed\":\n        case \"thread.run.step.failed\":\n        case \"thread.run.step.cancelled\":\n        case \"thread.run.step.expired\":\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n            break;\n        case \"thread.message.created\":\n        case \"thread.message.in_progress\":\n        case \"thread.message.delta\":\n        case \"thread.message.completed\":\n        case \"thread.message.incomplete\":\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n            break;\n        case \"error\":\n            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n            throw new Error(\"Encountered an error event in event processing - errors should be processed earlier\");\n    }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n    if (this.ended) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.OpenAIError(\"stream has ended, this shouldn't happen\");\n    }\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\")) throw Error(\"Final run has not been received\");\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n    const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n    __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n    for (const content of newContent){\n        const snapshotContent = accumulatedMessage.content[content.index];\n        if ((snapshotContent === null || snapshotContent === void 0 ? void 0 : snapshotContent.type) == \"text\") {\n            this._emit(\"textCreated\", snapshotContent.text);\n        }\n    }\n    switch(event.event){\n        case \"thread.message.created\":\n            this._emit(\"messageCreated\", event.data);\n            break;\n        case \"thread.message.in_progress\":\n            break;\n        case \"thread.message.delta\":\n            this._emit(\"messageDelta\", event.data.delta, accumulatedMessage);\n            if (event.data.delta.content) {\n                for (const content of event.data.delta.content){\n                    //If it is text delta, emit a text delta event\n                    if (content.type == \"text\" && content.text) {\n                        let textDelta = content.text;\n                        let snapshot = accumulatedMessage.content[content.index];\n                        if (snapshot && snapshot.type == \"text\") {\n                            this._emit(\"textDelta\", textDelta, snapshot.text);\n                        } else {\n                            throw Error(\"The snapshot associated with this text delta is not text or missing\");\n                        }\n                    }\n                    if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n                        //See if we have in progress content\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n                            switch(__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type){\n                                case \"text\":\n                                    this._emit(\"textDone\", __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                                case \"image_file\":\n                                    this._emit(\"imageFileDone\", __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                            }\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n                    }\n                    __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n                }\n            }\n            break;\n        case \"thread.message.completed\":\n        case \"thread.message.incomplete\":\n            //We emit the latest content we were working on on completion (including incomplete)\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n                const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n                if (currentContent) {\n                    switch(currentContent.type){\n                        case \"image_file\":\n                            this._emit(\"imageFileDone\", currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                        case \"text\":\n                            this._emit(\"textDone\", currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                    }\n                }\n            }\n            if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n                this._emit(\"messageDone\", event.data);\n            }\n            __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n    }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n    const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n    __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n    switch(event.event){\n        case \"thread.run.step.created\":\n            this._emit(\"runStepCreated\", event.data);\n            break;\n        case \"thread.run.step.delta\":\n            const delta = event.data.delta;\n            if (delta.step_details && delta.step_details.type == \"tool_calls\" && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == \"tool_calls\") {\n                for (const toolCall of delta.step_details.tool_calls){\n                    if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n                        this._emit(\"toolCallDelta\", toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n                    } else {\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                            this._emit(\"toolCallDone\", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) this._emit(\"toolCallCreated\", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    }\n                }\n            }\n            this._emit(\"runStepDelta\", event.data.delta, accumulatedRunStep);\n            break;\n        case \"thread.run.step.completed\":\n        case \"thread.run.step.failed\":\n        case \"thread.run.step.cancelled\":\n        case \"thread.run.step.expired\":\n            __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n            const details = event.data.step_details;\n            if (details.type == \"tool_calls\") {\n                if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                    this._emit(\"toolCallDone\", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n                }\n            }\n            this._emit(\"runStepDone\", event.data, accumulatedRunStep);\n            break;\n        case \"thread.run.step.in_progress\":\n            break;\n    }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n    __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n    this._emit(\"event\", event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n    switch(event.event){\n        case \"thread.run.step.created\":\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            return event.data;\n        case \"thread.run.step.delta\":\n            let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n            if (!snapshot) {\n                throw Error(\"Received a RunStepDelta before creation of a snapshot\");\n            }\n            let data = event.data;\n            if (data.delta) {\n                const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);\n                __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n            }\n            return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n        case \"thread.run.step.completed\":\n        case \"thread.run.step.failed\":\n        case \"thread.run.step.cancelled\":\n        case \"thread.run.step.expired\":\n        case \"thread.run.step.in_progress\":\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            break;\n    }\n    if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id]) return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    throw new Error(\"No snapshot available\");\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n    let newContent = [];\n    switch(event.event){\n        case \"thread.message.created\":\n            //On creation the snapshot is just the initial message\n            return [\n                event.data,\n                newContent\n            ];\n        case \"thread.message.delta\":\n            if (!snapshot) {\n                throw Error(\"Received a delta with no existing snapshot (there should be one from message creation)\");\n            }\n            let data = event.data;\n            //If this delta does not have content, nothing to process\n            if (data.delta.content) {\n                for (const contentElement of data.delta.content){\n                    if (contentElement.index in snapshot.content) {\n                        let currentContent = snapshot.content[contentElement.index];\n                        snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n                    } else {\n                        snapshot.content[contentElement.index] = contentElement;\n                        // This is a new element\n                        newContent.push(contentElement);\n                    }\n                }\n            }\n            return [\n                snapshot,\n                newContent\n            ];\n        case \"thread.message.in_progress\":\n        case \"thread.message.completed\":\n        case \"thread.message.incomplete\":\n            //No changes on other thread events\n            if (snapshot) {\n                return [\n                    snapshot,\n                    newContent\n                ];\n            } else {\n                throw Error(\"Received thread message event with no existing snapshot\");\n            }\n    }\n    throw Error(\"Tried to accumulate a non-message event\");\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n    return AssistantStream.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n    __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n    switch(event.event){\n        case \"thread.run.created\":\n            break;\n        case \"thread.run.queued\":\n            break;\n        case \"thread.run.in_progress\":\n            break;\n        case \"thread.run.requires_action\":\n        case \"thread.run.cancelled\":\n        case \"thread.run.failed\":\n        case \"thread.run.completed\":\n        case \"thread.run.expired\":\n            __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                this._emit(\"toolCallDone\", __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n            }\n            break;\n        case \"thread.run.cancelling\":\n            break;\n    }\n}; //# sourceMappingURL=AssistantStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/AssistantStream.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/ChatCompletionRunner.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionRunner.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: function() { return /* binding */ ChatCompletionRunner; }\n/* harmony export */ });\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n\n\nclass ChatCompletionRunner extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    /** @deprecated - please use `runTools` instead. */ static runFunctions(client, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options === null || options === void 0 ? void 0 : options.headers,\n                \"X-Stainless-Helper-Method\": \"runFunctions\"\n            }\n        };\n        runner._run(()=>runner._runFunctions(client, params, opts));\n        return runner;\n    }\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: {\n                ...options === null || options === void 0 ? void 0 : options.headers,\n                \"X-Stainless-Helper-Method\": \"runTools\"\n            }\n        };\n        runner._run(()=>runner._runTools(client, params, opts));\n        return runner;\n    }\n    _addMessage(message) {\n        let emit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        super._addMessage(message, emit);\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.content) {\n            this._emit(\"content\", message.content);\n        }\n    }\n} //# sourceMappingURL=ChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUY7QUFDcEI7QUFDeEQsTUFBTUUsNkJBQTZCRiwyRkFBNEJBO0lBQ2xFLGlEQUFpRCxHQUNqRCxPQUFPRyxhQUFhQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3pDLE1BQU1DLFNBQVMsSUFBSUw7UUFDbkIsTUFBTU0sT0FBTztZQUNULEdBQUdGLE9BQU87WUFDVkcsU0FBUzttQkFBS0gsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO2dCQUFFLDZCQUE2QjtZQUFlO1FBQ2hGO1FBQ0FGLE9BQU9HLElBQUksQ0FBQyxJQUFNSCxPQUFPSSxhQUFhLENBQUNQLFFBQVFDLFFBQVFHO1FBQ3ZELE9BQU9EO0lBQ1g7SUFDQSxPQUFPSyxTQUFTUixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3JDLE1BQU1DLFNBQVMsSUFBSUw7UUFDbkIsTUFBTU0sT0FBTztZQUNULEdBQUdGLE9BQU87WUFDVkcsU0FBUzttQkFBS0gsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO2dCQUFFLDZCQUE2QjtZQUFXO1FBQzVFO1FBQ0FGLE9BQU9HLElBQUksQ0FBQyxJQUFNSCxPQUFPTSxTQUFTLENBQUNULFFBQVFDLFFBQVFHO1FBQ25ELE9BQU9EO0lBQ1g7SUFDQU8sWUFBWUMsT0FBTyxFQUFlO1lBQWJDLE9BQUFBLGlFQUFPO1FBQ3hCLEtBQUssQ0FBQ0YsWUFBWUMsU0FBU0M7UUFDM0IsSUFBSWYsNEVBQWtCQSxDQUFDYyxZQUFZQSxRQUFRRSxPQUFPLEVBQUU7WUFDaEQsSUFBSSxDQUFDQyxLQUFLLENBQUMsV0FBV0gsUUFBUUUsT0FBTztRQUN6QztJQUNKO0FBQ0osRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25SdW5uZXIubWpzPzFlMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lciwgfSBmcm9tIFwiLi9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyLm1qc1wiO1xuaW1wb3J0IHsgaXNBc3Npc3RhbnRNZXNzYWdlIH0gZnJvbSBcIi4vY2hhdENvbXBsZXRpb25VdGlscy5tanNcIjtcbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvblJ1bm5lciBleHRlbmRzIEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIge1xuICAgIC8qKiBAZGVwcmVjYXRlZCAtIHBsZWFzZSB1c2UgYHJ1blRvb2xzYCBpbnN0ZWFkLiAqL1xuICAgIHN0YXRpYyBydW5GdW5jdGlvbnMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uUnVubmVyKCk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5GdW5jdGlvbnMnIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuRnVuY3Rpb25zKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxuICAgIHN0YXRpYyBydW5Ub29scyhjbGllbnQsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25SdW5uZXIoKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1blRvb2xzJyB9LFxuICAgICAgICB9O1xuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxuICAgIF9hZGRNZXNzYWdlKG1lc3NhZ2UsIGVtaXQgPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyLl9hZGRNZXNzYWdlKG1lc3NhZ2UsIGVtaXQpO1xuICAgICAgICBpZiAoaXNBc3Npc3RhbnRNZXNzYWdlKG1lc3NhZ2UpICYmIG1lc3NhZ2UuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdCgnY29udGVudCcsIG1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGF0Q29tcGxldGlvblJ1bm5lci5tanMubWFwIl0sIm5hbWVzIjpbIkFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIiLCJpc0Fzc2lzdGFudE1lc3NhZ2UiLCJDaGF0Q29tcGxldGlvblJ1bm5lciIsInJ1bkZ1bmN0aW9ucyIsImNsaWVudCIsInBhcmFtcyIsIm9wdGlvbnMiLCJydW5uZXIiLCJvcHRzIiwiaGVhZGVycyIsIl9ydW4iLCJfcnVuRnVuY3Rpb25zIiwicnVuVG9vbHMiLCJfcnVuVG9vbHMiLCJfYWRkTWVzc2FnZSIsIm1lc3NhZ2UiLCJlbWl0IiwiY29udGVudCIsIl9lbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/ChatCompletionRunner.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStream.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStream: function() { return /* binding */ ChatCompletionStream; }\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../streaming.mjs */ \"(app-pages-browser)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/parser.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(app-pages-browser)/./node_modules/openai/_vendor/partial-json-parser/parser.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\n\n\n\n\n\nclass ChatCompletionStream extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */ static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream(null);\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(client, params, options) {\n        const runner = new ChatCompletionStream(params);\n        runner._run(()=>runner._runChatCompletion(client, {\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                headers: {\n                    ...options === null || options === void 0 ? void 0 : options.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createChatCompletion(client, params, options) {\n        var _stream_controller_signal;\n        super._createChatCompletion;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await client.chat.completions.create({\n            ...params,\n            stream: true\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const chunk of stream){\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if ((_stream_controller_signal = stream.controller.signal) === null || _stream_controller_signal === void 0 ? void 0 : _stream_controller_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        var _stream_controller_signal;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream){\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if ((_stream_controller_signal = stream.controller.signal) === null || _stream_controller_signal === void 0 ? void 0 : _stream_controller_signal.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended) return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n        let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n        if (state) {\n            return state;\n        }\n        state = {\n            content_done: false,\n            refusal_done: false,\n            logprobs_content_done: false,\n            logprobs_refusal_done: false,\n            done_tool_calls: new Set(),\n            current_tool_call_index: null\n        };\n        __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n        return state;\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended) return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit(\"chunk\", chunk, completion);\n        for (const choice of chunk.choices){\n            var _choiceSnapshot_message, _choiceSnapshot_message1, _choiceSnapshot_message2, _choiceSnapshot_message3, _choice_logprobs, _choiceSnapshot_message4, _choice_logprobs1, _choiceSnapshot_message5;\n            const choiceSnapshot = completion.choices[choice.index];\n            if (choice.delta.content != null && ((_choiceSnapshot_message = choiceSnapshot.message) === null || _choiceSnapshot_message === void 0 ? void 0 : _choiceSnapshot_message.role) === \"assistant\" && ((_choiceSnapshot_message1 = choiceSnapshot.message) === null || _choiceSnapshot_message1 === void 0 ? void 0 : _choiceSnapshot_message1.content)) {\n                this._emit(\"content\", choice.delta.content, choiceSnapshot.message.content);\n                this._emit(\"content.delta\", {\n                    delta: choice.delta.content,\n                    snapshot: choiceSnapshot.message.content,\n                    parsed: choiceSnapshot.message.parsed\n                });\n            }\n            if (choice.delta.refusal != null && ((_choiceSnapshot_message2 = choiceSnapshot.message) === null || _choiceSnapshot_message2 === void 0 ? void 0 : _choiceSnapshot_message2.role) === \"assistant\" && ((_choiceSnapshot_message3 = choiceSnapshot.message) === null || _choiceSnapshot_message3 === void 0 ? void 0 : _choiceSnapshot_message3.refusal)) {\n                this._emit(\"refusal.delta\", {\n                    delta: choice.delta.refusal,\n                    snapshot: choiceSnapshot.message.refusal\n                });\n            }\n            if (((_choice_logprobs = choice.logprobs) === null || _choice_logprobs === void 0 ? void 0 : _choice_logprobs.content) != null && ((_choiceSnapshot_message4 = choiceSnapshot.message) === null || _choiceSnapshot_message4 === void 0 ? void 0 : _choiceSnapshot_message4.role) === \"assistant\") {\n                var _choice_logprobs2, _choiceSnapshot_logprobs;\n                var _choiceSnapshot_logprobs_content;\n                this._emit(\"logprobs.content.delta\", {\n                    content: (_choice_logprobs2 = choice.logprobs) === null || _choice_logprobs2 === void 0 ? void 0 : _choice_logprobs2.content,\n                    snapshot: (_choiceSnapshot_logprobs_content = (_choiceSnapshot_logprobs = choiceSnapshot.logprobs) === null || _choiceSnapshot_logprobs === void 0 ? void 0 : _choiceSnapshot_logprobs.content) !== null && _choiceSnapshot_logprobs_content !== void 0 ? _choiceSnapshot_logprobs_content : []\n                });\n            }\n            if (((_choice_logprobs1 = choice.logprobs) === null || _choice_logprobs1 === void 0 ? void 0 : _choice_logprobs1.refusal) != null && ((_choiceSnapshot_message5 = choiceSnapshot.message) === null || _choiceSnapshot_message5 === void 0 ? void 0 : _choiceSnapshot_message5.role) === \"assistant\") {\n                var _choice_logprobs3, _choiceSnapshot_logprobs1;\n                var _choiceSnapshot_logprobs_refusal;\n                this._emit(\"logprobs.refusal.delta\", {\n                    refusal: (_choice_logprobs3 = choice.logprobs) === null || _choice_logprobs3 === void 0 ? void 0 : _choice_logprobs3.refusal,\n                    snapshot: (_choiceSnapshot_logprobs_refusal = (_choiceSnapshot_logprobs1 = choiceSnapshot.logprobs) === null || _choiceSnapshot_logprobs1 === void 0 ? void 0 : _choiceSnapshot_logprobs1.refusal) !== null && _choiceSnapshot_logprobs_refusal !== void 0 ? _choiceSnapshot_logprobs_refusal : []\n                });\n            }\n            const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n            if (choiceSnapshot.finish_reason) {\n                __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                if (state.current_tool_call_index != null) {\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                }\n            }\n            var _choice_delta_tool_calls;\n            for (const toolCall of (_choice_delta_tool_calls = choice.delta.tool_calls) !== null && _choice_delta_tool_calls !== void 0 ? _choice_delta_tool_calls : []){\n                if (state.current_tool_call_index !== toolCall.index) {\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                    // new tool call started, the previous one is done\n                    if (state.current_tool_call_index != null) {\n                        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                    }\n                }\n                state.current_tool_call_index = toolCall.index;\n            }\n            var _choice_delta_tool_calls1;\n            for (const toolCallDelta of (_choice_delta_tool_calls1 = choice.delta.tool_calls) !== null && _choice_delta_tool_calls1 !== void 0 ? _choice_delta_tool_calls1 : []){\n                var _choiceSnapshot_message_tool_calls;\n                const toolCallSnapshot = (_choiceSnapshot_message_tool_calls = choiceSnapshot.message.tool_calls) === null || _choiceSnapshot_message_tool_calls === void 0 ? void 0 : _choiceSnapshot_message_tool_calls[toolCallDelta.index];\n                if (!(toolCallSnapshot === null || toolCallSnapshot === void 0 ? void 0 : toolCallSnapshot.type)) {\n                    continue;\n                }\n                if ((toolCallSnapshot === null || toolCallSnapshot === void 0 ? void 0 : toolCallSnapshot.type) === \"function\") {\n                    var _toolCallSnapshot_function, _toolCallDelta_function;\n                    var _toolCallDelta_function_arguments;\n                    this._emit(\"tool_calls.function.arguments.delta\", {\n                        name: (_toolCallSnapshot_function = toolCallSnapshot.function) === null || _toolCallSnapshot_function === void 0 ? void 0 : _toolCallSnapshot_function.name,\n                        index: toolCallDelta.index,\n                        arguments: toolCallSnapshot.function.arguments,\n                        parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n                        arguments_delta: (_toolCallDelta_function_arguments = (_toolCallDelta_function = toolCallDelta.function) === null || _toolCallDelta_function === void 0 ? void 0 : _toolCallDelta_function.arguments) !== null && _toolCallDelta_function_arguments !== void 0 ? _toolCallDelta_function_arguments : \"\"\n                    });\n                } else {\n                    assertNever(toolCallSnapshot === null || toolCallSnapshot === void 0 ? void 0 : toolCallSnapshot.type);\n                }\n            }\n        }\n    }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n        var _choiceSnapshot_message_tool_calls;\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (state.done_tool_calls.has(toolCallIndex)) {\n            // we've already fired the done event\n            return;\n        }\n        const toolCallSnapshot = (_choiceSnapshot_message_tool_calls = choiceSnapshot.message.tool_calls) === null || _choiceSnapshot_message_tool_calls === void 0 ? void 0 : _choiceSnapshot_message_tool_calls[toolCallIndex];\n        if (!toolCallSnapshot) {\n            throw new Error(\"no tool call snapshot\");\n        }\n        if (!toolCallSnapshot.type) {\n            throw new Error(\"tool call snapshot missing `type`\");\n        }\n        if (toolCallSnapshot.type === \"function\") {\n            var __classPrivateFieldGet_tools, __classPrivateFieldGet1;\n            const inputTool = (__classPrivateFieldGet1 = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")) === null || __classPrivateFieldGet1 === void 0 ? void 0 : (__classPrivateFieldGet_tools = __classPrivateFieldGet1.tools) === null || __classPrivateFieldGet_tools === void 0 ? void 0 : __classPrivateFieldGet_tools.find((tool)=>tool.type === \"function\" && tool.function.name === toolCallSnapshot.function.name);\n            this._emit(\"tool_calls.function.arguments.done\", {\n                name: toolCallSnapshot.function.name,\n                index: toolCallIndex,\n                arguments: toolCallSnapshot.function.arguments,\n                parsed_arguments: (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableTool)(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : (inputTool === null || inputTool === void 0 ? void 0 : inputTool.function.strict) ? JSON.parse(toolCallSnapshot.function.arguments) : null\n            });\n        } else {\n            assertNever(toolCallSnapshot.type);\n        }\n    }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n        var _choiceSnapshot_logprobs, _choiceSnapshot_logprobs1;\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (choiceSnapshot.message.content && !state.content_done) {\n            state.content_done = true;\n            const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n            this._emit(\"content.done\", {\n                content: choiceSnapshot.message.content,\n                parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null\n            });\n        }\n        if (choiceSnapshot.message.refusal && !state.refusal_done) {\n            state.refusal_done = true;\n            this._emit(\"refusal.done\", {\n                refusal: choiceSnapshot.message.refusal\n            });\n        }\n        if (((_choiceSnapshot_logprobs = choiceSnapshot.logprobs) === null || _choiceSnapshot_logprobs === void 0 ? void 0 : _choiceSnapshot_logprobs.content) && !state.logprobs_content_done) {\n            state.logprobs_content_done = true;\n            this._emit(\"logprobs.content.done\", {\n                content: choiceSnapshot.logprobs.content\n            });\n        }\n        if (((_choiceSnapshot_logprobs1 = choiceSnapshot.logprobs) === null || _choiceSnapshot_logprobs1 === void 0 ? void 0 : _choiceSnapshot_logprobs1.refusal) && !state.logprobs_refusal_done) {\n            state.logprobs_refusal_done = true;\n            this._emit(\"logprobs.refusal.done\", {\n                refusal: choiceSnapshot.logprobs.refusal\n            });\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"stream has ended, this shouldn't happen\");\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"request ended without sending any chunks\");\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n        return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\n    }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n        var __classPrivateFieldGet1;\n        const responseFormat = (__classPrivateFieldGet1 = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")) === null || __classPrivateFieldGet1 === void 0 ? void 0 : __classPrivateFieldGet1.response_format;\n        if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.isAutoParsableResponseFormat)(responseFormat)) {\n            return responseFormat;\n        }\n        return null;\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c, _d;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: []\n            }, \"f\");\n        } else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices){\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = {\n                    finish_reason,\n                    index,\n                    message: {},\n                    logprobs,\n                    ...other\n                };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                } else {\n                    const { content, refusal, ...rest } = logprobs;\n                    assertIsEmpty(rest);\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        var _content;\n                        (_content = (_a = choice.logprobs).content) !== null && _content !== void 0 ? _content : _a.content = [];\n                        choice.logprobs.content.push(...content);\n                    }\n                    if (refusal) {\n                        var _refusal;\n                        (_refusal = (_b = choice.logprobs).refusal) !== null && _refusal !== void 0 ? _refusal : _b.refusal = [];\n                        choice.logprobs.refusal.push(...refusal);\n                    }\n                }\n            }\n            if (finish_reason) {\n                choice.finish_reason = finish_reason;\n                if (__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.hasAutoParseableInput)(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\n                    if (finish_reason === \"length\") {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.LengthFinishReasonError();\n                    }\n                    if (finish_reason === \"content_filter\") {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ContentFilterFinishReasonError();\n                    }\n                }\n            }\n            Object.assign(choice, other);\n            if (!delta) continue; // Shouldn't happen; just in case.\n            const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\n            assertIsEmpty(rest);\n            Object.assign(choice.message, rest);\n            if (refusal) {\n                choice.message.refusal = (choice.message.refusal || \"\") + refusal;\n            }\n            if (role) choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                } else {\n                    if (function_call.name) choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        var _arguments;\n                        (_arguments = (_c = choice.message.function_call).arguments) !== null && _arguments !== void 0 ? _arguments : _c.arguments = \"\";\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (content) {\n                choice.message.content = (choice.message.content || \"\") + content;\n                if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n                    choice.message.parsed = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(choice.message.content);\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls) choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls){\n                    var _index;\n                    const tool_call = (_index = (_d = choice.message.tool_calls)[index]) !== null && _index !== void 0 ? _index : _d[index] = {};\n                    Object.assign(tool_call, rest);\n                    if (id) tool_call.id = id;\n                    if (type) tool_call.type = type;\n                    var _fn_name, _tool_call_function;\n                    if (fn) (_tool_call_function = tool_call.function) !== null && _tool_call_function !== void 0 ? _tool_call_function : tool_call.function = {\n                        name: (_fn_name = fn.name) !== null && _fn_name !== void 0 ? _fn_name : \"\",\n                        arguments: \"\"\n                    };\n                    if (fn === null || fn === void 0 ? void 0 : fn.name) tool_call.function.name = fn.name;\n                    if (fn === null || fn === void 0 ? void 0 : fn.arguments) {\n                        tool_call.function.arguments += fn.arguments;\n                        if ((0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.shouldParseToolCall)(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n                            tool_call.function.parsed_arguments = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(tool_call.function.arguments);\n                        }\n                    }\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"chunk\", (chunk)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(chunk);\n            } else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"abort\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on(\"error\", (err)=>{\n            done = true;\n            for (const reader of readQueue){\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve, reject)=>readQueue.push({\n                            resolve,\n                            reject\n                        })).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            },\n            return: async ()=>{\n                this.abort();\n                return {\n                    value: undefined,\n                    done: true\n                };\n            }\n        };\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n    constructor(params){\n        super();\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_params.set(this, void 0);\n        _ChatCompletionStream_choiceEventStates.set(this, void 0);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n        __classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    }\n}\nfunction finalizeChatCompletion(snapshot, params) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    const completion = {\n        ...rest,\n        id,\n        choices: choices.map((param)=>{\n            let { message, finish_reason, index, logprobs, ...choiceRest } = param;\n            if (!finish_reason) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing finish_reason for choice \".concat(index));\n            }\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing role for choice \".concat(index));\n            }\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null) {\n                    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing function_call.arguments for choice \".concat(index));\n                }\n                if (!name) {\n                    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing function_call.name for choice \".concat(index));\n                }\n                var _message_refusal;\n                return {\n                    ...choiceRest,\n                    message: {\n                        content,\n                        function_call: {\n                            arguments: args,\n                            name\n                        },\n                        role,\n                        refusal: (_message_refusal = message.refusal) !== null && _message_refusal !== void 0 ? _message_refusal : null\n                    },\n                    finish_reason,\n                    index,\n                    logprobs\n                };\n            }\n            if (tool_calls) {\n                var _message_refusal1;\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        refusal: (_message_refusal1 = message.refusal) !== null && _message_refusal1 !== void 0 ? _message_refusal1 : null,\n                        tool_calls: tool_calls.map((tool_call, i)=>{\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].id\\n\").concat(str(snapshot)));\n                            }\n                            if (type == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].type\\n\").concat(str(snapshot)));\n                            }\n                            if (name == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].function.name\\n\").concat(str(snapshot)));\n                            }\n                            if (args == null) {\n                                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"missing choices[\".concat(index, \"].tool_calls[\").concat(i, \"].function.arguments\\n\").concat(str(snapshot)));\n                            }\n                            return {\n                                ...toolRest,\n                                id,\n                                type,\n                                function: {\n                                    ...fnRest,\n                                    name,\n                                    arguments: args\n                                }\n                            };\n                        })\n                    }\n                };\n            }\n            var _message_refusal2;\n            return {\n                ...choiceRest,\n                message: {\n                    ...messageRest,\n                    content,\n                    role,\n                    refusal: (_message_refusal2 = message.refusal) !== null && _message_refusal2 !== void 0 ? _message_refusal2 : null\n                },\n                finish_reason,\n                index,\n                logprobs\n            };\n        }),\n        created,\n        model,\n        object: \"chat.completion\",\n        ...system_fingerprint ? {\n            system_fingerprint\n        } : {}\n    };\n    return (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_3__.maybeParseChatCompletion)(completion, params);\n}\nfunction str(x) {\n    return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */ function assertIsEmpty(obj) {\n    return;\n}\nfunction assertNever(_x) {} //# sourceMappingURL=ChatCompletionStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStreamingRunner: function() { return /* binding */ ChatCompletionStreamingRunner; }\n/* harmony export */ });\n/* harmony import */ var _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChatCompletionStream.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n\nclass ChatCompletionStreamingRunner extends _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner(null);\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    /** @deprecated - please use `runTools` instead. */ static runFunctions(client, params, options) {\n        const runner = new ChatCompletionStreamingRunner(null);\n        const opts = {\n            ...options,\n            headers: {\n                ...options === null || options === void 0 ? void 0 : options.headers,\n                \"X-Stainless-Helper-Method\": \"runFunctions\"\n            }\n        };\n        runner._run(()=>runner._runFunctions(client, params, opts));\n        return runner;\n    }\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionStreamingRunner(// @ts-expect-error TODO these types are incompatible\n        params);\n        const opts = {\n            ...options,\n            headers: {\n                ...options === null || options === void 0 ? void 0 : options.headers,\n                \"X-Stainless-Helper-Method\": \"runTools\"\n            }\n        };\n        runner._run(()=>runner._runTools(client, params, opts));\n        return runner;\n    }\n} //# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUMzRCxNQUFNQyxzQ0FBc0NELDJFQUFvQkE7SUFDbkUsT0FBT0UsbUJBQW1CQyxNQUFNLEVBQUU7UUFDOUIsTUFBTUMsU0FBUyxJQUFJSCw4QkFBOEI7UUFDakRHLE9BQU9DLElBQUksQ0FBQyxJQUFNRCxPQUFPRSxtQkFBbUIsQ0FBQ0g7UUFDN0MsT0FBT0M7SUFDWDtJQUNBLGlEQUFpRCxHQUNqRCxPQUFPRyxhQUFhQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQ3pDLE1BQU1OLFNBQVMsSUFBSUgsOEJBQThCO1FBQ2pELE1BQU1VLE9BQU87WUFDVCxHQUFHRCxPQUFPO1lBQ1ZFLFNBQVM7bUJBQUtGLG9CQUFBQSw4QkFBQUEsUUFBU0UsT0FBTztnQkFBRSw2QkFBNkI7WUFBZTtRQUNoRjtRQUNBUixPQUFPQyxJQUFJLENBQUMsSUFBTUQsT0FBT1MsYUFBYSxDQUFDTCxRQUFRQyxRQUFRRTtRQUN2RCxPQUFPUDtJQUNYO0lBQ0EsT0FBT1UsU0FBU04sTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUNyQyxNQUFNTixTQUFTLElBQUlILDhCQUNuQixxREFBcUQ7UUFDckRRO1FBQ0EsTUFBTUUsT0FBTztZQUNULEdBQUdELE9BQU87WUFDVkUsU0FBUzttQkFBS0Ysb0JBQUFBLDhCQUFBQSxRQUFTRSxPQUFPO2dCQUFFLDZCQUE2QjtZQUFXO1FBQzVFO1FBQ0FSLE9BQU9DLElBQUksQ0FBQyxJQUFNRCxPQUFPVyxTQUFTLENBQUNQLFFBQVFDLFFBQVFFO1FBQ25ELE9BQU9QO0lBQ1g7QUFDSixFQUNBLDBEQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanM/YjRlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbSB9IGZyb20gXCIuL0NoYXRDb21wbGV0aW9uU3RyZWFtLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25TdHJlYW0ge1xuICAgIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcihudWxsKTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9mcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCAtIHBsZWFzZSB1c2UgYHJ1blRvb2xzYCBpbnN0ZWFkLiAqL1xuICAgIHN0YXRpYyBydW5GdW5jdGlvbnMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKG51bGwpO1xuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuRnVuY3Rpb25zJyB9LFxuICAgICAgICB9O1xuICAgICAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1bkZ1bmN0aW9ucyhjbGllbnQsIHBhcmFtcywgb3B0cykpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBzdGF0aWMgcnVuVG9vbHMoY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gdGhlc2UgdHlwZXMgYXJlIGluY29tcGF0aWJsZVxuICAgICAgICBwYXJhbXMpO1xuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuVG9vbHMnIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuVG9vbHMoY2xpZW50LCBwYXJhbXMsIG9wdHMpKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5tanMubWFwIl0sIm5hbWVzIjpbIkNoYXRDb21wbGV0aW9uU3RyZWFtIiwiQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIiLCJmcm9tUmVhZGFibGVTdHJlYW0iLCJzdHJlYW0iLCJydW5uZXIiLCJfcnVuIiwiX2Zyb21SZWFkYWJsZVN0cmVhbSIsInJ1bkZ1bmN0aW9ucyIsImNsaWVudCIsInBhcmFtcyIsIm9wdGlvbnMiLCJvcHRzIiwiaGVhZGVycyIsIl9ydW5GdW5jdGlvbnMiLCJydW5Ub29scyIsIl9ydW5Ub29scyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/EventStream.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/lib/EventStream.mjs ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStream: function() { return /* binding */ EventStream; }\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;\n\nclass EventStream {\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(()=>{\n            executor().then(()=>{\n                this._emitFinal();\n                this._emit(\"end\");\n            }, __classPrivateFieldGet(this, _EventStream_instances, \"m\", _EventStream_handleError).bind(this));\n        }, 0);\n    }\n    _connected() {\n        if (this.ended) return;\n        __classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, \"f\").call(this);\n        this._emit(\"connect\");\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _EventStream_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _EventStream_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _EventStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener\n        });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n        if (!listeners) return this;\n        const index = listeners.findIndex((l)=>l.listener === listener);\n        if (index >= 0) listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener,\n            once: true\n        });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */ emitted(event) {\n        return new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n            if (event !== \"error\") this.once(\"error\", reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _EventStream_endPromise, \"f\");\n    }\n    _emit(event) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _EventStream_ended, \"f\")) {\n            return;\n        }\n        if (event === \"end\") {\n            __classPrivateFieldSet(this, _EventStream_ended, true, \"f\");\n            __classPrivateFieldGet(this, _EventStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = listeners.filter((l)=>!l.once);\n            listeners.forEach((param)=>{\n                let { listener } = param;\n                return listener(...args);\n            });\n        }\n        if (event === \"abort\") {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !(listeners === null || listeners === void 0 ? void 0 : listeners.length)) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n            return;\n        }\n        if (event === \"error\") {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !(listeners === null || listeners === void 0 ? void 0 : listeners.length)) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n        }\n    }\n    _emitFinal() {}\n    constructor(){\n        _EventStream_instances.add(this);\n        this.controller = new AbortController();\n        _EventStream_connectedPromise.set(this, void 0);\n        _EventStream_resolveConnectedPromise.set(this, ()=>{});\n        _EventStream_rejectConnectedPromise.set(this, ()=>{});\n        _EventStream_endPromise.set(this, void 0);\n        _EventStream_resolveEndPromise.set(this, ()=>{});\n        _EventStream_rejectEndPromise.set(this, ()=>{});\n        _EventStream_listeners.set(this, {});\n        _EventStream_ended.set(this, false);\n        _EventStream_errored.set(this, false);\n        _EventStream_aborted.set(this, false);\n        _EventStream_catchingPromiseCreated.set(this, false);\n        __classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _EventStream_connectedPromise, \"f\").catch(()=>{});\n        __classPrivateFieldGet(this, _EventStream_endPromise, \"f\").catch(()=>{});\n    }\n}\n_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {\n    __classPrivateFieldSet(this, _EventStream_errored, true, \"f\");\n    if (error instanceof Error && error.name === \"AbortError\") {\n        error = new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError();\n    }\n    if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError) {\n        __classPrivateFieldSet(this, _EventStream_aborted, true, \"f\");\n        return this._emit(\"abort\", error);\n    }\n    if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError) {\n        return this._emit(\"error\", error);\n    }\n    if (error instanceof Error) {\n        const openAIError = new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(error.message);\n        // @ts-ignore\n        openAIError.cause = error;\n        return this._emit(\"error\", openAIError);\n    }\n    return this._emit(\"error\", new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(String(error)));\n}; //# sourceMappingURL=EventStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/EventStream.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/RunnableFunction.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/lib/RunnableFunction.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParsingFunction: function() { return /* binding */ ParsingFunction; },\n/* harmony export */   ParsingToolFunction: function() { return /* binding */ ParsingToolFunction; },\n/* harmony export */   isRunnableFunctionWithParse: function() { return /* binding */ isRunnableFunctionWithParse; }\n/* harmony export */ });\nfunction isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === \"function\";\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */ class ParsingFunction {\n    constructor(input){\n        this.function = input.function;\n        this.parse = input.parse;\n        this.parameters = input.parameters;\n        this.description = input.description;\n        this.name = input.name;\n    }\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */ class ParsingToolFunction {\n    constructor(input){\n        this.type = \"function\";\n        this.function = input;\n    }\n} //# sourceMappingURL=RunnableFunction.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1J1bm5hYmxlRnVuY3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLFNBQVNBLDRCQUE0QkMsRUFBRTtJQUMxQyxPQUFPLE9BQU9BLEdBQUdDLEtBQUssS0FBSztBQUMvQjtBQUNBOzs7OztDQUtDLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxDQUFDQyxRQUFRLEdBQUdELE1BQU1DLFFBQVE7UUFDOUIsSUFBSSxDQUFDSixLQUFLLEdBQUdHLE1BQU1ILEtBQUs7UUFDeEIsSUFBSSxDQUFDSyxVQUFVLEdBQUdGLE1BQU1FLFVBQVU7UUFDbEMsSUFBSSxDQUFDQyxXQUFXLEdBQUdILE1BQU1HLFdBQVc7UUFDcEMsSUFBSSxDQUFDQyxJQUFJLEdBQUdKLE1BQU1JLElBQUk7SUFDMUI7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DO0lBQ1ROLFlBQVlDLEtBQUssQ0FBRTtRQUNmLElBQUksQ0FBQ00sSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDTCxRQUFRLEdBQUdEO0lBQ3BCO0FBQ0osRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvUnVubmFibGVGdW5jdGlvbi5tanM/YTZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlKGZuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbi5wYXJzZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogVGhpcyBpcyBoZWxwZXIgY2xhc3MgZm9yIHBhc3NpbmcgYSBgZnVuY3Rpb25gIGFuZCBgcGFyc2VgIHdoZXJlIHRoZSBgZnVuY3Rpb25gXG4gKiBhcmd1bWVudCB0eXBlIG1hdGNoZXMgdGhlIGBwYXJzZWAgcmV0dXJuIHR5cGUuXG4gKlxuICogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIFBhcnNpbmdUb29sRnVuY3Rpb24gaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnNpbmdGdW5jdGlvbiB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgdGhpcy5mdW5jdGlvbiA9IGlucHV0LmZ1bmN0aW9uO1xuICAgICAgICB0aGlzLnBhcnNlID0gaW5wdXQucGFyc2U7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IGlucHV0LnBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBpbnB1dC5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lID0gaW5wdXQubmFtZTtcbiAgICB9XG59XG4vKipcbiAqIFRoaXMgaXMgaGVscGVyIGNsYXNzIGZvciBwYXNzaW5nIGEgYGZ1bmN0aW9uYCBhbmQgYHBhcnNlYCB3aGVyZSB0aGUgYGZ1bmN0aW9uYFxuICogYXJndW1lbnQgdHlwZSBtYXRjaGVzIHRoZSBgcGFyc2VgIHJldHVybiB0eXBlLlxuICovXG5leHBvcnQgY2xhc3MgUGFyc2luZ1Rvb2xGdW5jdGlvbiB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2Z1bmN0aW9uJztcbiAgICAgICAgdGhpcy5mdW5jdGlvbiA9IGlucHV0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ1bm5hYmxlRnVuY3Rpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJpc1J1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2UiLCJmbiIsInBhcnNlIiwiUGFyc2luZ0Z1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImZ1bmN0aW9uIiwicGFyYW1ldGVycyIsImRlc2NyaXB0aW9uIiwibmFtZSIsIlBhcnNpbmdUb29sRnVuY3Rpb24iLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/RunnableFunction.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/Util.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/lib/Util.mjs ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettledWithThrow: function() { return /* binding */ allSettledWithThrow; }\n/* harmony export */ });\n/**\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\n */ const allSettledWithThrow = async (promises)=>{\n    const results = await Promise.allSettled(promises);\n    const rejected = results.filter((result)=>result.status === \"rejected\");\n    if (rejected.length) {\n        for (const result of rejected){\n            console.error(result.reason);\n        }\n        throw new Error(\"\".concat(rejected.length, \" promise(s) failed - see the above errors\"));\n    }\n    // Note: TS was complaining about using `.filter().map()` here for some reason\n    const values = [];\n    for (const result of results){\n        if (result.status === \"fulfilled\") {\n            values.push(result.value);\n        }\n    }\n    return values;\n}; //# sourceMappingURL=Util.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1V0aWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLE1BQU1BLHNCQUFzQixPQUFPQztJQUN0QyxNQUFNQyxVQUFVLE1BQU1DLFFBQVFDLFVBQVUsQ0FBQ0g7SUFDekMsTUFBTUksV0FBV0gsUUFBUUksTUFBTSxDQUFDLENBQUNDLFNBQVdBLE9BQU9DLE1BQU0sS0FBSztJQUM5RCxJQUFJSCxTQUFTSSxNQUFNLEVBQUU7UUFDakIsS0FBSyxNQUFNRixVQUFVRixTQUFVO1lBQzNCSyxRQUFRQyxLQUFLLENBQUNKLE9BQU9LLE1BQU07UUFDL0I7UUFDQSxNQUFNLElBQUlDLE1BQU0sR0FBbUIsT0FBaEJSLFNBQVNJLE1BQU0sRUFBQztJQUN2QztJQUNBLDhFQUE4RTtJQUM5RSxNQUFNSyxTQUFTLEVBQUU7SUFDakIsS0FBSyxNQUFNUCxVQUFVTCxRQUFTO1FBQzFCLElBQUlLLE9BQU9DLE1BQU0sS0FBSyxhQUFhO1lBQy9CTSxPQUFPQyxJQUFJLENBQUNSLE9BQU9TLEtBQUs7UUFDNUI7SUFDSjtJQUNBLE9BQU9GO0FBQ1gsRUFBRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9VdGlsLm1qcz9jOGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlrZSBgUHJvbWlzZS5hbGxTZXR0bGVkKClgIGJ1dCB0aHJvd3MgYW4gZXJyb3IgaWYgYW55IHByb21pc2VzIGFyZSByZWplY3RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGFsbFNldHRsZWRXaXRoVGhyb3cgPSBhc3luYyAocHJvbWlzZXMpID0+IHtcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKTtcbiAgICBjb25zdCByZWplY3RlZCA9IHJlc3VsdHMuZmlsdGVyKChyZXN1bHQpID0+IHJlc3VsdC5zdGF0dXMgPT09ICdyZWplY3RlZCcpO1xuICAgIGlmIChyZWplY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVzdWx0LnJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3JlamVjdGVkLmxlbmd0aH0gcHJvbWlzZShzKSBmYWlsZWQgLSBzZWUgdGhlIGFib3ZlIGVycm9yc2ApO1xuICAgIH1cbiAgICAvLyBOb3RlOiBUUyB3YXMgY29tcGxhaW5pbmcgYWJvdXQgdXNpbmcgYC5maWx0ZXIoKS5tYXAoKWAgaGVyZSBmb3Igc29tZSByZWFzb25cbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWwubWpzLm1hcCJdLCJuYW1lcyI6WyJhbGxTZXR0bGVkV2l0aFRocm93IiwicHJvbWlzZXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJyZWplY3RlZCIsImZpbHRlciIsInJlc3VsdCIsInN0YXR1cyIsImxlbmd0aCIsImNvbnNvbGUiLCJlcnJvciIsInJlYXNvbiIsIkVycm9yIiwidmFsdWVzIiwicHVzaCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/Util.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/lib/chatCompletionUtils.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAssistantMessage: function() { return /* binding */ isAssistantMessage; },\n/* harmony export */   isFunctionMessage: function() { return /* binding */ isFunctionMessage; },\n/* harmony export */   isPresent: function() { return /* binding */ isPresent; },\n/* harmony export */   isToolMessage: function() { return /* binding */ isToolMessage; }\n/* harmony export */ });\nconst isAssistantMessage = (message)=>{\n    return (message === null || message === void 0 ? void 0 : message.role) === \"assistant\";\n};\nconst isFunctionMessage = (message)=>{\n    return (message === null || message === void 0 ? void 0 : message.role) === \"function\";\n};\nconst isToolMessage = (message)=>{\n    return (message === null || message === void 0 ? void 0 : message.role) === \"tool\";\n};\nfunction isPresent(obj) {\n    return obj != null;\n} //# sourceMappingURL=chatCompletionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL2NoYXRDb21wbGV0aW9uVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxxQkFBcUIsQ0FBQ0M7SUFDL0IsT0FBT0EsQ0FBQUEsb0JBQUFBLDhCQUFBQSxRQUFTQyxJQUFJLE1BQUs7QUFDN0IsRUFBRTtBQUNLLE1BQU1DLG9CQUFvQixDQUFDRjtJQUM5QixPQUFPQSxDQUFBQSxvQkFBQUEsOEJBQUFBLFFBQVNDLElBQUksTUFBSztBQUM3QixFQUFFO0FBQ0ssTUFBTUUsZ0JBQWdCLENBQUNIO0lBQzFCLE9BQU9BLENBQUFBLG9CQUFBQSw4QkFBQUEsUUFBU0MsSUFBSSxNQUFLO0FBQzdCLEVBQUU7QUFDSyxTQUFTRyxVQUFVQyxHQUFHO0lBQ3pCLE9BQU9BLE9BQU87QUFDbEIsRUFDQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvY2hhdENvbXBsZXRpb25VdGlscy5tanM/NzJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNBc3Npc3RhbnRNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ2Fzc2lzdGFudCc7XG59O1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb25NZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ2Z1bmN0aW9uJztcbn07XG5leHBvcnQgY29uc3QgaXNUb29sTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2U/LnJvbGUgPT09ICd0b29sJztcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNQcmVzZW50KG9iaikge1xuICAgIHJldHVybiBvYmogIT0gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXRDb21wbGV0aW9uVXRpbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJpc0Fzc2lzdGFudE1lc3NhZ2UiLCJtZXNzYWdlIiwicm9sZSIsImlzRnVuY3Rpb25NZXNzYWdlIiwiaXNUb29sTWVzc2FnZSIsImlzUHJlc2VudCIsIm9iaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/lib/parser.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/lib/parser.mjs ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasAutoParseableInput: function() { return /* binding */ hasAutoParseableInput; },\n/* harmony export */   isAutoParsableResponseFormat: function() { return /* binding */ isAutoParsableResponseFormat; },\n/* harmony export */   isAutoParsableTool: function() { return /* binding */ isAutoParsableTool; },\n/* harmony export */   makeParseableResponseFormat: function() { return /* binding */ makeParseableResponseFormat; },\n/* harmony export */   makeParseableTool: function() { return /* binding */ makeParseableTool; },\n/* harmony export */   maybeParseChatCompletion: function() { return /* binding */ maybeParseChatCompletion; },\n/* harmony export */   parseChatCompletion: function() { return /* binding */ parseChatCompletion; },\n/* harmony export */   shouldParseToolCall: function() { return /* binding */ shouldParseToolCall; },\n/* harmony export */   validateInputTools: function() { return /* binding */ validateInputTools; }\n/* harmony export */ });\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n\nfunction makeParseableResponseFormat(response_format, parser) {\n    const obj = {\n        ...response_format\n    };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: \"auto-parseable-response-format\",\n            enumerable: false\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false\n        }\n    });\n    return obj;\n}\nfunction isAutoParsableResponseFormat(response_format) {\n    return (response_format === null || response_format === void 0 ? void 0 : response_format[\"$brand\"]) === \"auto-parseable-response-format\";\n}\nfunction makeParseableTool(tool, param) {\n    let { parser, callback } = param;\n    const obj = {\n        ...tool\n    };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: \"auto-parseable-tool\",\n            enumerable: false\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false\n        },\n        $callback: {\n            value: callback,\n            enumerable: false\n        }\n    });\n    return obj;\n}\nfunction isAutoParsableTool(tool) {\n    return (tool === null || tool === void 0 ? void 0 : tool[\"$brand\"]) === \"auto-parseable-tool\";\n}\nfunction maybeParseChatCompletion(completion, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...completion,\n            choices: completion.choices.map((choice)=>{\n                var _choice_message_tool_calls;\n                return {\n                    ...choice,\n                    message: {\n                        ...choice.message,\n                        parsed: null,\n                        tool_calls: (_choice_message_tool_calls = choice.message.tool_calls) !== null && _choice_message_tool_calls !== void 0 ? _choice_message_tool_calls : []\n                    }\n                };\n            })\n        };\n    }\n    return parseChatCompletion(completion, params);\n}\nfunction parseChatCompletion(completion, params) {\n    const choices = completion.choices.map((choice)=>{\n        var _choice_message_tool_calls;\n        if (choice.finish_reason === \"length\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.LengthFinishReasonError();\n        }\n        if (choice.finish_reason === \"content_filter\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.ContentFilterFinishReasonError();\n        }\n        var _choice_message_tool_calls_map;\n        return {\n            ...choice,\n            message: {\n                ...choice.message,\n                tool_calls: (_choice_message_tool_calls_map = (_choice_message_tool_calls = choice.message.tool_calls) === null || _choice_message_tool_calls === void 0 ? void 0 : _choice_message_tool_calls.map((toolCall)=>parseToolCall(params, toolCall))) !== null && _choice_message_tool_calls_map !== void 0 ? _choice_message_tool_calls_map : [],\n                parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null\n            }\n        };\n    });\n    return {\n        ...completion,\n        choices\n    };\n}\nfunction parseResponseFormat(params, content) {\n    var _params_response_format, _params_response_format1;\n    if (((_params_response_format = params.response_format) === null || _params_response_format === void 0 ? void 0 : _params_response_format.type) !== \"json_schema\") {\n        return null;\n    }\n    if (((_params_response_format1 = params.response_format) === null || _params_response_format1 === void 0 ? void 0 : _params_response_format1.type) === \"json_schema\") {\n        if (\"$parseRaw\" in params.response_format) {\n            const response_format = params.response_format;\n            return response_format.$parseRaw(content);\n        }\n        return JSON.parse(content);\n    }\n    return null;\n}\nfunction parseToolCall(params, toolCall) {\n    var _params_tools;\n    const inputTool = (_params_tools = params.tools) === null || _params_tools === void 0 ? void 0 : _params_tools.find((inputTool)=>{\n        var _inputTool_function;\n        return ((_inputTool_function = inputTool.function) === null || _inputTool_function === void 0 ? void 0 : _inputTool_function.name) === toolCall.function.name;\n    });\n    return {\n        ...toolCall,\n        function: {\n            ...toolCall.function,\n            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : (inputTool === null || inputTool === void 0 ? void 0 : inputTool.function.strict) ? JSON.parse(toolCall.function.arguments) : null\n        }\n    };\n}\nfunction shouldParseToolCall(params, toolCall) {\n    var _params_tools;\n    if (!params) {\n        return false;\n    }\n    const inputTool = (_params_tools = params.tools) === null || _params_tools === void 0 ? void 0 : _params_tools.find((inputTool)=>{\n        var _inputTool_function;\n        return ((_inputTool_function = inputTool.function) === null || _inputTool_function === void 0 ? void 0 : _inputTool_function.name) === toolCall.function.name;\n    });\n    return isAutoParsableTool(inputTool) || (inputTool === null || inputTool === void 0 ? void 0 : inputTool.function.strict) || false;\n}\nfunction hasAutoParseableInput(params) {\n    var _params_tools;\n    if (isAutoParsableResponseFormat(params.response_format)) {\n        return true;\n    }\n    var _params_tools_some;\n    return (_params_tools_some = (_params_tools = params.tools) === null || _params_tools === void 0 ? void 0 : _params_tools.some((t)=>isAutoParsableTool(t) || t.type === \"function\" && t.function.strict === true)) !== null && _params_tools_some !== void 0 ? _params_tools_some : false;\n}\nfunction validateInputTools(tools) {\n    for (const tool of tools !== null && tools !== void 0 ? tools : []){\n        if (tool.type !== \"function\") {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"Currently only `function` tool types support auto-parsing; Received `\".concat(tool.type, \"`\"));\n        }\n        if (tool.function.strict !== true) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"The `\".concat(tool.function.name, \"` tool is not marked with `strict: true`. Only strict function tools can be auto-parsed\"));\n        }\n    }\n} //# sourceMappingURL=parser.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/lib/parser.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/pagination.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/pagination.mjs ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CursorPage: function() { return /* binding */ CursorPage; },\n/* harmony export */   Page: function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class Page extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    getPaginatedItems() {\n        var _this_data;\n        return (_this_data = this.data) !== null && _this_data !== void 0 ? _this_data : [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    /**\n     * This page represents a response that isn't actually paginated at the API level\n     * so there will never be any next page params.\n     */ nextPageParams() {\n        return null;\n    }\n    nextPageInfo() {\n        return null;\n    }\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.object = body.object;\n    }\n}\nclass CursorPage extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    getPaginatedItems() {\n        var _this_data;\n        return (_this_data = this.data) !== null && _this_data !== void 0 ? _this_data : [];\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info) return null;\n        if (\"params\" in info) return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length) return null;\n        return params;\n    }\n    nextPageInfo() {\n        var _data_;\n        const data = this.getPaginatedItems();\n        if (!data.length) {\n            return null;\n        }\n        const id = (_data_ = data[data.length - 1]) === null || _data_ === void 0 ? void 0 : _data_.id;\n        if (!id) {\n            return null;\n        }\n        return {\n            params: {\n                after: id\n            }\n        };\n    }\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data || [];\n    }\n} //# sourceMappingURL=pagination.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcGFnaW5hdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQzVDO0FBQzFDOztDQUVDLEdBQ00sTUFBTUMsYUFBYUQsbURBQVlBO0lBTWxDRSxvQkFBb0I7WUFDVDtRQUFQLE9BQU8sa0JBQUksQ0FBQ0MsSUFBSSxjQUFULHFDQUFhLEVBQUU7SUFDMUI7SUFDQSxrREFBa0Q7SUFDbEQ7OztLQUdDLEdBQ0RDLGlCQUFpQjtRQUNiLE9BQU87SUFDWDtJQUNBQyxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBbEJBQyxZQUFZQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDekMsS0FBSyxDQUFDSCxRQUFRQyxVQUFVQyxNQUFNQztRQUM5QixJQUFJLENBQUNQLElBQUksR0FBR00sS0FBS04sSUFBSSxJQUFJLEVBQUU7UUFDM0IsSUFBSSxDQUFDUSxNQUFNLEdBQUdGLEtBQUtFLE1BQU07SUFDN0I7QUFlSjtBQUNPLE1BQU1DLG1CQUFtQlosbURBQVlBO0lBS3hDRSxvQkFBb0I7WUFDVDtRQUFQLE9BQU8sa0JBQUksQ0FBQ0MsSUFBSSxjQUFULHFDQUFhLEVBQUU7SUFDMUI7SUFDQSxrREFBa0Q7SUFDbERDLGlCQUFpQjtRQUNiLE1BQU1TLE9BQU8sSUFBSSxDQUFDUixZQUFZO1FBQzlCLElBQUksQ0FBQ1EsTUFDRCxPQUFPO1FBQ1gsSUFBSSxZQUFZQSxNQUNaLE9BQU9BLEtBQUtDLE1BQU07UUFDdEIsTUFBTUEsU0FBU0MsT0FBT0MsV0FBVyxDQUFDSCxLQUFLSSxHQUFHLENBQUNDLFlBQVk7UUFDdkQsSUFBSSxDQUFDSCxPQUFPSSxJQUFJLENBQUNMLFFBQVFNLE1BQU0sRUFDM0IsT0FBTztRQUNYLE9BQU9OO0lBQ1g7SUFDQVQsZUFBZTtZQUtBRjtRQUpYLE1BQU1BLE9BQU8sSUFBSSxDQUFDRCxpQkFBaUI7UUFDbkMsSUFBSSxDQUFDQyxLQUFLaUIsTUFBTSxFQUFFO1lBQ2QsT0FBTztRQUNYO1FBQ0EsTUFBTUMsTUFBS2xCLFNBQUFBLElBQUksQ0FBQ0EsS0FBS2lCLE1BQU0sR0FBRyxFQUFFLGNBQXJCakIsNkJBQUFBLE9BQXVCa0IsRUFBRTtRQUNwQyxJQUFJLENBQUNBLElBQUk7WUFDTCxPQUFPO1FBQ1g7UUFDQSxPQUFPO1lBQUVQLFFBQVE7Z0JBQUVRLE9BQU9EO1lBQUc7UUFBRTtJQUNuQztJQTdCQWYsWUFBWUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsT0FBTyxDQUFFO1FBQ3pDLEtBQUssQ0FBQ0gsUUFBUUMsVUFBVUMsTUFBTUM7UUFDOUIsSUFBSSxDQUFDUCxJQUFJLEdBQUdNLEtBQUtOLElBQUksSUFBSSxFQUFFO0lBQy9CO0FBMkJKLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcGFnaW5hdGlvbi5tanM/MmM3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQWJzdHJhY3RQYWdlIH0gZnJvbSBcIi4vY29yZS5tanNcIjtcbi8qKlxuICogTm90ZTogbm8gcGFnaW5hdGlvbiBhY3R1YWxseSBvY2N1cnMgeWV0LCB0aGlzIGlzIGZvciBmb3J3YXJkcy1jb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xuICAgICAgICB0aGlzLm9iamVjdCA9IGJvZHkub2JqZWN0O1xuICAgIH1cbiAgICBnZXRQYWdpbmF0ZWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA/PyBbXTtcbiAgICB9XG4gICAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcbiAgICAvKipcbiAgICAgKiBUaGlzIHBhZ2UgcmVwcmVzZW50cyBhIHJlc3BvbnNlIHRoYXQgaXNuJ3QgYWN0dWFsbHkgcGFnaW5hdGVkIGF0IHRoZSBBUEkgbGV2ZWxcbiAgICAgKiBzbyB0aGVyZSB3aWxsIG5ldmVyIGJlIGFueSBuZXh0IHBhZ2UgcGFyYW1zLlxuICAgICAqL1xuICAgIG5leHRQYWdlUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbmV4dFBhZ2VJbmZvKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ3Vyc29yUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xuICAgIH1cbiAgICBnZXRQYWdpbmF0ZWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSA/PyBbXTtcbiAgICB9XG4gICAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcbiAgICBuZXh0UGFnZVBhcmFtcygpIHtcbiAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMubmV4dFBhZ2VJbmZvKCk7XG4gICAgICAgIGlmICghaW5mbylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoJ3BhcmFtcycgaW4gaW5mbylcbiAgICAgICAgICAgIHJldHVybiBpbmZvLnBhcmFtcztcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKGluZm8udXJsLnNlYXJjaFBhcmFtcyk7XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgbmV4dFBhZ2VJbmZvKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRQYWdpbmF0ZWRJdGVtcygpO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpZCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXT8uaWQ7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHBhcmFtczogeyBhZnRlcjogaWQgfSB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2luYXRpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJBYnN0cmFjdFBhZ2UiLCJQYWdlIiwiZ2V0UGFnaW5hdGVkSXRlbXMiLCJkYXRhIiwibmV4dFBhZ2VQYXJhbXMiLCJuZXh0UGFnZUluZm8iLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsInJlc3BvbnNlIiwiYm9keSIsIm9wdGlvbnMiLCJvYmplY3QiLCJDdXJzb3JQYWdlIiwiaW5mbyIsInBhcmFtcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwidXJsIiwic2VhcmNoUGFyYW1zIiwia2V5cyIsImxlbmd0aCIsImlkIiwiYWZ0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/pagination.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resource.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/resource.mjs ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: function() { return /* binding */ APIResource; }\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nclass APIResource {\n    constructor(client){\n        this._client = client;\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxzRkFBc0Y7QUFDL0UsTUFBTUE7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHRDtJQUNuQjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2UubWpzP2UyYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resource.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/audio/audio.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/audio/audio.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: function() { return /* binding */ Audio; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _speech_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./speech.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/audio/speech.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./translations.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Audio extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.transcriptions = new _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions(this._client);\n        this.translations = new _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations(this._client);\n        this.speech = new _speech_mjs__WEBPACK_IMPORTED_MODULE_3__.Speech(this._client);\n    }\n}\nAudio.Transcriptions = _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions;\nAudio.Translations = _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations;\nAudio.Speech = _speech_mjs__WEBPACK_IMPORTED_MODULE_3__.Speech; //# sourceMappingURL=audio.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNQO0FBQ0o7QUFDb0I7QUFDSDtBQUNEO0FBQ0g7QUFDNUMsTUFBTU8sY0FBY1Asc0RBQVdBO0lBQ2xDUSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUlQLCtEQUFnQyxDQUFDLElBQUksQ0FBQ1EsT0FBTztRQUN2RSxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJUCwyREFBNEIsQ0FBQyxJQUFJLENBQUNNLE9BQU87UUFDakUsSUFBSSxDQUFDRSxNQUFNLEdBQUcsSUFBSVosK0NBQWdCLENBQUMsSUFBSSxDQUFDVSxPQUFPO0lBQ25EO0FBQ0o7QUFDQUosTUFBTUgsY0FBYyxHQUFHQSwrREFBY0E7QUFDckNHLE1BQU1ELFlBQVksR0FBR0EsMkRBQVlBO0FBQ2pDQyxNQUFNTCxNQUFNLEdBQUdBLCtDQUFNQSxFQUNyQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vYXVkaW8ubWpzP2RhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgU3BlZWNoQVBJIGZyb20gXCIuL3NwZWVjaC5tanNcIjtcbmltcG9ydCB7IFNwZWVjaCB9IGZyb20gXCIuL3NwZWVjaC5tanNcIjtcbmltcG9ydCAqIGFzIFRyYW5zY3JpcHRpb25zQVBJIGZyb20gXCIuL3RyYW5zY3JpcHRpb25zLm1qc1wiO1xuaW1wb3J0IHsgVHJhbnNjcmlwdGlvbnMsIH0gZnJvbSBcIi4vdHJhbnNjcmlwdGlvbnMubWpzXCI7XG5pbXBvcnQgKiBhcyBUcmFuc2xhdGlvbnNBUEkgZnJvbSBcIi4vdHJhbnNsYXRpb25zLm1qc1wiO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25zLCB9IGZyb20gXCIuL3RyYW5zbGF0aW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBBdWRpbyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50cmFuc2NyaXB0aW9ucyA9IG5ldyBUcmFuc2NyaXB0aW9uc0FQSS5UcmFuc2NyaXB0aW9ucyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLnRyYW5zbGF0aW9ucyA9IG5ldyBUcmFuc2xhdGlvbnNBUEkuVHJhbnNsYXRpb25zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuc3BlZWNoID0gbmV3IFNwZWVjaEFQSS5TcGVlY2godGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG5BdWRpby5UcmFuc2NyaXB0aW9ucyA9IFRyYW5zY3JpcHRpb25zO1xuQXVkaW8uVHJhbnNsYXRpb25zID0gVHJhbnNsYXRpb25zO1xuQXVkaW8uU3BlZWNoID0gU3BlZWNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaW8ubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlNwZWVjaEFQSSIsIlNwZWVjaCIsIlRyYW5zY3JpcHRpb25zQVBJIiwiVHJhbnNjcmlwdGlvbnMiLCJUcmFuc2xhdGlvbnNBUEkiLCJUcmFuc2xhdGlvbnMiLCJBdWRpbyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwidHJhbnNjcmlwdGlvbnMiLCJfY2xpZW50IiwidHJhbnNsYXRpb25zIiwic3BlZWNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/audio/audio.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/audio/speech.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/resources/audio/speech.mjs ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: function() { return /* binding */ Speech; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Speech extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Generates audio from the input text.\n     */ create(body, options) {\n        return this._client.post(\"/audio/speech\", {\n            body,\n            ...options,\n            headers: {\n                Accept: \"application/octet-stream\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            },\n            __binaryResponse: true\n        });\n    }\n} //# sourceMappingURL=speech.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3NwZWVjaC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzRkFBc0Y7QUFDckM7QUFDMUMsTUFBTUMsZUFBZUQsc0RBQVdBO0lBQ25DOztLQUVDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxpQkFBaUI7WUFDdENIO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFQyxRQUFRO21CQUErQkosb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7WUFDbkVFLGtCQUFrQjtRQUN0QjtJQUNKO0FBQ0osRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vc3BlZWNoLm1qcz85Y2IwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBTcGVlY2ggZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGF1ZGlvIGZyb20gdGhlIGlucHV0IHRleHQuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vc3BlZWNoJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgICAgIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwZWVjaC5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU3BlZWNoIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImhlYWRlcnMiLCJBY2NlcHQiLCJfX2JpbmFyeVJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/audio/speech.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/audio/transcriptions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/audio/transcriptions.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: function() { return /* binding */ Transcriptions; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Transcriptions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/audio/transcriptions\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n} //# sourceMappingURL=transcriptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zY3JpcHRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRkFBc0Y7QUFDckM7QUFDVjtBQUNoQyxNQUFNRSx1QkFBdUJGLHNEQUFXQTtJQUMzQ0csT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHlCQUF5Qk4sa0VBQWdDLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDMUc7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanM/NWZjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gXCIuLi8uLi9jb3JlLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zY3JpcHRpb25zJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2NyaXB0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29yZSIsIlRyYW5zY3JpcHRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/audio/transcriptions.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/audio/translations.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/resources/audio/translations.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: function() { return /* binding */ Translations; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Translations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/audio/translations\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n} //# sourceMappingURL=translations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3JDO0FBQ1Y7QUFDaEMsTUFBTUUscUJBQXFCRixzREFBV0E7SUFDekNHLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyx1QkFBdUJOLGtFQUFnQyxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3hHO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vdHJhbnNsYXRpb25zLm1qcz80YzFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIENvcmUgZnJvbSBcIi4uLy4uL2NvcmUubWpzXCI7XG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zbGF0aW9ucycsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNsYXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb3JlIiwiVHJhbnNsYXRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/audio/translations.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/batches.mjs":
/*!***************************************************!*\
  !*** ./node_modules/openai/resources/batches.mjs ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: function() { return /* binding */ Batches; },\n/* harmony export */   BatchesPage: function() { return /* binding */ BatchesPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Batches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates and executes a batch from an uploaded file of requests\n     */ create(body, options) {\n        return this._client.post(\"/batches\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Retrieves a batch.\n     */ retrieve(batchId, options) {\n        return this._client.get(\"/batches/\".concat(batchId), options);\n    }\n    list() {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, options = arguments.length > 1 ? arguments[1] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/batches\", BatchesPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\n     * 10 minutes, before changing to `cancelled`, where it will have partial results\n     * (if any) available in the output file.\n     */ cancel(batchId, options) {\n        return this._client.post(\"/batches/\".concat(batchId, \"/cancel\"), options);\n    }\n}\nclass BatchesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nBatches.BatchesPage = BatchesPage; //# sourceMappingURL=batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JhdGNoZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3hDO0FBQ0M7QUFDQTtBQUN4QyxNQUFNRyxnQkFBZ0JILHNEQUFXQTtJQUNwQzs7S0FFQyxHQUNESSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsWUFBWTtZQUFFSDtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUM1RDtJQUNBOztLQUVDLEdBQ0RHLFNBQVNDLE9BQU8sRUFBRUosT0FBTyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxZQUFvQixPQUFSRCxVQUFXSjtJQUNuRDtJQUNBTSxPQUEwQjtZQUFyQkMsUUFBQUEsaUVBQVEsQ0FBQyxHQUFHUDtRQUNiLElBQUlMLDJEQUFnQkEsQ0FBQ1ksUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBR0M7UUFDekI7UUFDQSxPQUFPLElBQUksQ0FBQ04sT0FBTyxDQUFDTyxVQUFVLENBQUMsWUFBWUMsYUFBYTtZQUFFRjtZQUFPLEdBQUdQLE9BQU87UUFBQztJQUNoRjtJQUNBOzs7O0tBSUMsR0FDRFUsT0FBT04sT0FBTyxFQUFFSixPQUFPLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFlBQW9CLE9BQVJFLFNBQVEsWUFBVUo7SUFDM0Q7QUFDSjtBQUNPLE1BQU1TLG9CQUFvQmIsdURBQVVBO0FBQzNDO0FBQ0FDLFFBQVFZLFdBQVcsR0FBR0EsYUFDdEIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JhdGNoZXMubWpzP2M0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi9jb3JlLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEJhdGNoZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgZXhlY3V0ZXMgYSBiYXRjaCBmcm9tIGFuIHVwbG9hZGVkIGZpbGUgb2YgcmVxdWVzdHNcbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9iYXRjaGVzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBiYXRjaC5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShiYXRjaElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvYmF0Y2hlcy8ke2JhdGNoSWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9iYXRjaGVzJywgQmF0Y2hlc1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYW4gaW4tcHJvZ3Jlc3MgYmF0Y2guIFRoZSBiYXRjaCB3aWxsIGJlIGluIHN0YXR1cyBgY2FuY2VsbGluZ2AgZm9yIHVwIHRvXG4gICAgICogMTAgbWludXRlcywgYmVmb3JlIGNoYW5naW5nIHRvIGBjYW5jZWxsZWRgLCB3aGVyZSBpdCB3aWxsIGhhdmUgcGFydGlhbCByZXN1bHRzXG4gICAgICogKGlmIGFueSkgYXZhaWxhYmxlIGluIHRoZSBvdXRwdXQgZmlsZS5cbiAgICAgKi9cbiAgICBjYW5jZWwoYmF0Y2hJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9iYXRjaGVzLyR7YmF0Y2hJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJhdGNoZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5CYXRjaGVzLkJhdGNoZXNQYWdlID0gQmF0Y2hlc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXRjaGVzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiQ3Vyc29yUGFnZSIsIkJhdGNoZXMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwicmV0cmlldmUiLCJiYXRjaElkIiwiZ2V0IiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIkJhdGNoZXNQYWdlIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/batches.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/assistants.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants.mjs ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assistants: function() { return /* binding */ Assistants; },\n/* harmony export */   AssistantsPage: function() { return /* binding */ AssistantsPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Assistants extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an assistant with a model and instructions.\n     */ create(body, options) {\n        return this._client.post(\"/assistants\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     */ retrieve(assistantId, options) {\n        return this._client.get(\"/assistants/\".concat(assistantId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Modifies an assistant.\n     */ update(assistantId, body, options) {\n        return this._client.post(\"/assistants/\".concat(assistantId), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    list() {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, options = arguments.length > 1 ? arguments[1] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/assistants\", AssistantsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Delete an assistant.\n     */ del(assistantId, options) {\n        return this._client.delete(\"/assistants/\".concat(assistantId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n}\nclass AssistantsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nAssistants.AssistantsPage = AssistantsPage; //# sourceMappingURL=assistants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDckM7QUFDQztBQUNBO0FBQzNDLE1BQU1HLG1CQUFtQkgsc0RBQVdBO0lBQ3ZDOztLQUVDLEdBQ0RJLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxlQUFlO1lBQ3BDSDtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RDLFNBQVNDLFdBQVcsRUFBRUwsT0FBTyxFQUFFO1FBQzNCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLEdBQUcsQ0FBQyxlQUEyQixPQUFaRCxjQUFlO1lBQ2xELEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RJLE9BQU9GLFdBQVcsRUFBRU4sSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDL0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGVBQTJCLE9BQVpHLGNBQWU7WUFDbkROO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0FLLE9BQTBCO1lBQXJCQyxRQUFBQSxpRUFBUSxDQUFDLEdBQUdUO1FBQ2IsSUFBSUwsMkRBQWdCQSxDQUFDYyxRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHQztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDUixPQUFPLENBQUNTLFVBQVUsQ0FBQyxlQUFlQyxnQkFBZ0I7WUFDMURGO1lBQ0EsR0FBR1QsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDRFMsSUFBSVAsV0FBVyxFQUFFTCxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDLGVBQTJCLE9BQVpSLGNBQWU7WUFDckQsR0FBR0wsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0o7QUFDTyxNQUFNUSx1QkFBdUJmLHVEQUFVQTtBQUM5QztBQUNBQyxXQUFXYyxjQUFjLEdBQUdBLGdCQUM1Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzLm1qcz80NTNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vY29yZS5tanNcIjtcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tIFwiLi4vLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBhc3Npc3RhbnQgd2l0aCBhIG1vZGVsIGFuZCBpbnN0cnVjdGlvbnMuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXNzaXN0YW50cycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbiBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgcmV0cmlldmUoYXNzaXN0YW50SWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBhbiBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgdXBkYXRlKGFzc2lzdGFudElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvYXNzaXN0YW50cycsIEFzc2lzdGFudHNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGFzc2lzdGFudC5cbiAgICAgKi9cbiAgICBkZWwoYXNzaXN0YW50SWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuQXNzaXN0YW50cy5Bc3Npc3RhbnRzUGFnZSA9IEFzc2lzdGFudHNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzaXN0YW50cy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkN1cnNvclBhZ2UiLCJBc3Npc3RhbnRzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsImFzc2lzdGFudElkIiwiZ2V0IiwidXBkYXRlIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIkFzc2lzdGFudHNQYWdlIiwiZGVsIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/assistants.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/beta.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/beta/beta.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: function() { return /* binding */ Beta; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _assistants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./assistants.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/assistants.mjs\");\n/* harmony import */ var _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chat/chat.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/chat/chat.mjs\");\n/* harmony import */ var _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./realtime/realtime.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/realtime/realtime.mjs\");\n/* harmony import */ var _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./threads/threads.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/threads/threads.mjs\");\n/* harmony import */ var _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector-stores/vector-stores.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\n\n\nclass Beta extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.realtime = new _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_1__.Realtime(this._client);\n        this.vectorStores = new _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStores(this._client);\n        this.chat = new _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_3__.Chat(this._client);\n        this.assistants = new _assistants_mjs__WEBPACK_IMPORTED_MODULE_4__.Assistants(this._client);\n        this.threads = new _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_5__.Threads(this._client);\n    }\n}\nBeta.Realtime = _realtime_realtime_mjs__WEBPACK_IMPORTED_MODULE_1__.Realtime;\nBeta.VectorStores = _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStores;\nBeta.VectorStoresPage = _vector_stores_vector_stores_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoresPage;\nBeta.Assistants = _assistants_mjs__WEBPACK_IMPORTED_MODULE_4__.Assistants;\nBeta.AssistantsPage = _assistants_mjs__WEBPACK_IMPORTED_MODULE_4__.AssistantsPage;\nBeta.Threads = _threads_threads_mjs__WEBPACK_IMPORTED_MODULE_5__.Threads; //# sourceMappingURL=beta.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYmV0YS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNDO0FBQ1A7QUFDb0I7QUFDUjtBQUNKO0FBQ0M7QUFDSDtBQUNvQjtBQUNlO0FBQzdDO0FBQ2hDLE1BQU1hLGFBQWFiLHNEQUFXQTtJQUNqQ2MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJWCw0REFBb0IsQ0FBQyxJQUFJLENBQUNZLE9BQU87UUFDckQsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSVQsMEVBQTRCLENBQUMsSUFBSSxDQUFDUSxPQUFPO1FBQ2pFLElBQUksQ0FBQ0UsSUFBSSxHQUFHLElBQUlqQixnREFBWSxDQUFDLElBQUksQ0FBQ2UsT0FBTztRQUN6QyxJQUFJLENBQUNHLFVBQVUsR0FBRyxJQUFJbkIsdURBQXdCLENBQUMsSUFBSSxDQUFDZ0IsT0FBTztRQUMzRCxJQUFJLENBQUNJLE9BQU8sR0FBRyxJQUFJZCx5REFBa0IsQ0FBQyxJQUFJLENBQUNVLE9BQU87SUFDdEQ7QUFDSjtBQUNBSixLQUFLUCxRQUFRLEdBQUdBLDREQUFRQTtBQUN4Qk8sS0FBS0gsWUFBWSxHQUFHQSwwRUFBWUE7QUFDaENHLEtBQUtGLGdCQUFnQixHQUFHQSw4RUFBZ0JBO0FBQ3hDRSxLQUFLVixVQUFVLEdBQUdBLHVEQUFVQTtBQUM1QlUsS0FBS1QsY0FBYyxHQUFHQSwyREFBY0E7QUFDcENTLEtBQUtMLE9BQU8sR0FBR0EseURBQU9BLEVBQ3RCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2JldGEubWpzP2Y5MjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQXNzaXN0YW50c0FQSSBmcm9tIFwiLi9hc3Npc3RhbnRzLm1qc1wiO1xuaW1wb3J0ICogYXMgQ2hhdEFQSSBmcm9tIFwiLi9jaGF0L2NoYXQubWpzXCI7XG5pbXBvcnQgeyBBc3Npc3RhbnRzLCBBc3Npc3RhbnRzUGFnZSwgfSBmcm9tIFwiLi9hc3Npc3RhbnRzLm1qc1wiO1xuaW1wb3J0ICogYXMgUmVhbHRpbWVBUEkgZnJvbSBcIi4vcmVhbHRpbWUvcmVhbHRpbWUubWpzXCI7XG5pbXBvcnQgeyBSZWFsdGltZSB9IGZyb20gXCIuL3JlYWx0aW1lL3JlYWx0aW1lLm1qc1wiO1xuaW1wb3J0ICogYXMgVGhyZWFkc0FQSSBmcm9tIFwiLi90aHJlYWRzL3RocmVhZHMubWpzXCI7XG5pbXBvcnQgeyBUaHJlYWRzLCB9IGZyb20gXCIuL3RocmVhZHMvdGhyZWFkcy5tanNcIjtcbmltcG9ydCAqIGFzIFZlY3RvclN0b3Jlc0FQSSBmcm9tIFwiLi92ZWN0b3Itc3RvcmVzL3ZlY3Rvci1zdG9yZXMubWpzXCI7XG5pbXBvcnQgeyBWZWN0b3JTdG9yZXMsIFZlY3RvclN0b3Jlc1BhZ2UsIH0gZnJvbSBcIi4vdmVjdG9yLXN0b3Jlcy92ZWN0b3Itc3RvcmVzLm1qc1wiO1xuaW1wb3J0IHsgQ2hhdCB9IGZyb20gXCIuL2NoYXQvY2hhdC5tanNcIjtcbmV4cG9ydCBjbGFzcyBCZXRhIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJlYWx0aW1lID0gbmV3IFJlYWx0aW1lQVBJLlJlYWx0aW1lKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMudmVjdG9yU3RvcmVzID0gbmV3IFZlY3RvclN0b3Jlc0FQSS5WZWN0b3JTdG9yZXModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5jaGF0ID0gbmV3IENoYXRBUEkuQ2hhdCh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLmFzc2lzdGFudHMgPSBuZXcgQXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRzKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMudGhyZWFkcyA9IG5ldyBUaHJlYWRzQVBJLlRocmVhZHModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG5CZXRhLlJlYWx0aW1lID0gUmVhbHRpbWU7XG5CZXRhLlZlY3RvclN0b3JlcyA9IFZlY3RvclN0b3JlcztcbkJldGEuVmVjdG9yU3RvcmVzUGFnZSA9IFZlY3RvclN0b3Jlc1BhZ2U7XG5CZXRhLkFzc2lzdGFudHMgPSBBc3Npc3RhbnRzO1xuQmV0YS5Bc3Npc3RhbnRzUGFnZSA9IEFzc2lzdGFudHNQYWdlO1xuQmV0YS5UaHJlYWRzID0gVGhyZWFkcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJldGEubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkFzc2lzdGFudHNBUEkiLCJDaGF0QVBJIiwiQXNzaXN0YW50cyIsIkFzc2lzdGFudHNQYWdlIiwiUmVhbHRpbWVBUEkiLCJSZWFsdGltZSIsIlRocmVhZHNBUEkiLCJUaHJlYWRzIiwiVmVjdG9yU3RvcmVzQVBJIiwiVmVjdG9yU3RvcmVzIiwiVmVjdG9yU3RvcmVzUGFnZSIsIkNoYXQiLCJCZXRhIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJyZWFsdGltZSIsIl9jbGllbnQiLCJ2ZWN0b3JTdG9yZXMiLCJjaGF0IiwiYXNzaXN0YW50cyIsInRocmVhZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/beta.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/chat/chat.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/chat.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: function() { return /* binding */ Chat; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\n(function(Chat) {\n    Chat.Completions = _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions;\n})(Chat || (Chat = {})); //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jaGF0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRkFBc0Y7QUFDbEM7QUFDQTtBQUM3QyxNQUFNRSxhQUFhRixzREFBV0E7SUFDakNHLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSUoseURBQTBCLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ2xFO0FBQ0o7QUFDQyxVQUFVTCxJQUFJO0lBQ1hBLEtBQUtJLFdBQVcsR0FBR0wseURBQTBCO0FBQ2pELEdBQUdDLFFBQVNBLENBQUFBLE9BQU8sQ0FBQyxLQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NoYXQubWpzPzZmODciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSBcIi4vY29tcGxldGlvbnMubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hhdCBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jb21wbGV0aW9ucyA9IG5ldyBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoQ2hhdCkge1xuICAgIENoYXQuQ29tcGxldGlvbnMgPSBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucztcbn0pKENoYXQgfHwgKENoYXQgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdC5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnNBUEkiLCJDaGF0IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJjb21wbGV0aW9ucyIsIkNvbXBsZXRpb25zIiwiX2NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/chat/chat.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/chat/completions.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/completions.mjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: function() { return /* reexport safe */ _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionRunner; },\n/* harmony export */   ChatCompletionStream: function() { return /* reexport safe */ _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_2__.ChatCompletionStream; },\n/* harmony export */   ChatCompletionStreamingRunner: function() { return /* reexport safe */ _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner; },\n/* harmony export */   Completions: function() { return /* binding */ Completions; },\n/* harmony export */   ParsingFunction: function() { return /* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_1__.ParsingFunction; },\n/* harmony export */   ParsingToolFunction: function() { return /* reexport safe */ _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_1__.ParsingToolFunction; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/ChatCompletionRunner.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/ChatCompletionRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/ChatCompletionStreamingRunner.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\");\n/* harmony import */ var _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/ChatCompletionStream.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n/* harmony import */ var _lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/parser.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/parser.mjs\");\n/* harmony import */ var _lib_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/RunnableFunction.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/RunnableFunction.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\n\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_4__.APIResource {\n    parse(body, options) {\n        (0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.validateInputTools)(body.tools);\n        return this._client.chat.completions.create(body, {\n            ...options,\n            headers: {\n                ...options === null || options === void 0 ? void 0 : options.headers,\n                \"X-Stainless-Helper-Method\": \"beta.chat.completions.parse\"\n            }\n        })._thenUnwrap((completion)=>(0,_lib_parser_mjs__WEBPACK_IMPORTED_MODULE_5__.parseChatCompletion)(completion, body));\n    }\n    runFunctions(body, options) {\n        if (body.stream) {\n            return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner.runFunctions(this._client, body, options);\n        }\n        return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionRunner.runFunctions(this._client, body, options);\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return _lib_ChatCompletionStreamingRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStreamingRunner.runTools(this._client, body, options);\n        }\n        return _lib_ChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionRunner.runTools(this._client, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */ stream(body, options) {\n        return _lib_ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_2__.ChatCompletionStream.createChatCompletion(this._client, body, options);\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2xDO0FBQ3lCO0FBQ21CO0FBQ25CO0FBQ0s7QUFDYztBQUNOO0FBQ2I7QUFDQztBQUN2RSxNQUFNUSxvQkFBb0JSLHNEQUFXQTtJQUN4Q1MsTUFBTUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDakJOLG1FQUFrQkEsQ0FBQ0ssS0FBS0UsS0FBSztRQUM3QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUNDLFdBQVcsQ0FDL0JDLE1BQU0sQ0FBQ04sTUFBTTtZQUNkLEdBQUdDLE9BQU87WUFDVk0sU0FBUzttQkFDRk4sb0JBQUFBLDhCQUFBQSxRQUFTTSxPQUFPO2dCQUNuQiw2QkFBNkI7WUFDakM7UUFDSixHQUNLQyxXQUFXLENBQUMsQ0FBQ0MsYUFBZWYsb0VBQW1CQSxDQUFDZSxZQUFZVDtJQUNyRTtJQUNBVSxhQUFhVixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUN4QixJQUFJRCxLQUFLVyxNQUFNLEVBQUU7WUFDYixPQUFPbkIsaUdBQTZCQSxDQUFDa0IsWUFBWSxDQUFDLElBQUksQ0FBQ1AsT0FBTyxFQUFFSCxNQUFNQztRQUMxRTtRQUNBLE9BQU9WLCtFQUFvQkEsQ0FBQ21CLFlBQVksQ0FBQyxJQUFJLENBQUNQLE9BQU8sRUFBRUgsTUFBTUM7SUFDakU7SUFDQVcsU0FBU1osSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsSUFBSUQsS0FBS1csTUFBTSxFQUFFO1lBQ2IsT0FBT25CLGlHQUE2QkEsQ0FBQ29CLFFBQVEsQ0FBQyxJQUFJLENBQUNULE9BQU8sRUFBRUgsTUFBTUM7UUFDdEU7UUFDQSxPQUFPViwrRUFBb0JBLENBQUNxQixRQUFRLENBQUMsSUFBSSxDQUFDVCxPQUFPLEVBQUVILE1BQU1DO0lBQzdEO0lBQ0E7O0tBRUMsR0FDRFUsT0FBT1gsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBT1IsK0VBQW9CQSxDQUFDb0Isb0JBQW9CLENBQUMsSUFBSSxDQUFDVixPQUFPLEVBQUVILE1BQU1DO0lBQ3pFO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9jaGF0L2NvbXBsZXRpb25zLm1qcz8wMGNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uUnVubmVyIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzXCI7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW0ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZUNoYXRDb21wbGV0aW9uLCB2YWxpZGF0ZUlucHV0VG9vbHMgfSBmcm9tIFwiLi4vLi4vLi4vbGliL3BhcnNlci5tanNcIjtcbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIubWpzXCI7XG5leHBvcnQgeyBQYXJzaW5nRnVuY3Rpb24sIFBhcnNpbmdUb29sRnVuY3Rpb24sIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLm1qc1wiO1xuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW0gfSBmcm9tIFwiLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtLm1qc1wiO1xuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25SdW5uZXIsIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBwYXJzZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhbGlkYXRlSW5wdXRUb29scyhib2R5LnRvb2xzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5jaGF0LmNvbXBsZXRpb25zXG4gICAgICAgICAgICAuY3JlYXRlKGJvZHksIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgICAgICAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdiZXRhLmNoYXQuY29tcGxldGlvbnMucGFyc2UnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5fdGhlblVud3JhcCgoY29tcGxldGlvbikgPT4gcGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBib2R5KSk7XG4gICAgfVxuICAgIHJ1bkZ1bmN0aW9ucyhib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChib2R5LnN0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLnJ1bkZ1bmN0aW9ucyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5GdW5jdGlvbnModGhpcy5fY2xpZW50LCBib2R5LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcnVuVG9vbHMoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoYm9keS5zdHJlYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2hhdCBjb21wbGV0aW9uIHN0cmVhbVxuICAgICAqL1xuICAgIHN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblN0cmVhbS5jcmVhdGVDaGF0Q29tcGxldGlvbih0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDaGF0Q29tcGxldGlvblJ1bm5lciIsIkNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIiwiQ2hhdENvbXBsZXRpb25TdHJlYW0iLCJwYXJzZUNoYXRDb21wbGV0aW9uIiwidmFsaWRhdGVJbnB1dFRvb2xzIiwiUGFyc2luZ0Z1bmN0aW9uIiwiUGFyc2luZ1Rvb2xGdW5jdGlvbiIsIkNvbXBsZXRpb25zIiwicGFyc2UiLCJib2R5Iiwib3B0aW9ucyIsInRvb2xzIiwiX2NsaWVudCIsImNoYXQiLCJjb21wbGV0aW9ucyIsImNyZWF0ZSIsImhlYWRlcnMiLCJfdGhlblVud3JhcCIsImNvbXBsZXRpb24iLCJydW5GdW5jdGlvbnMiLCJzdHJlYW0iLCJydW5Ub29scyIsImNyZWF0ZUNoYXRDb21wbGV0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/chat/completions.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/realtime/realtime.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/realtime.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Realtime: function() { return /* binding */ Realtime; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sessions.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/realtime/sessions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Realtime extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.sessions = new _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__.Sessions(this._client);\n    }\n}\nRealtime.Sessions = _sessions_mjs__WEBPACK_IMPORTED_MODULE_1__.Sessions; //# sourceMappingURL=realtime.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvcmVhbHRpbWUvcmVhbHRpbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNsQztBQUNOO0FBQ0g7QUFDcEMsTUFBTUcsaUJBQWlCSCxzREFBV0E7SUFDckNJLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSUwsbURBQW9CLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ3pEO0FBQ0o7QUFDQUosU0FBU0QsUUFBUSxHQUFHQSxtREFBUUEsRUFDNUIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvcmVhbHRpbWUvcmVhbHRpbWUubWpzP2I1YjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgU2Vzc2lvbnNBUEkgZnJvbSBcIi4vc2Vzc2lvbnMubWpzXCI7XG5pbXBvcnQgeyBTZXNzaW9ucywgfSBmcm9tIFwiLi9zZXNzaW9ucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBSZWFsdGltZSBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zZXNzaW9ucyA9IG5ldyBTZXNzaW9uc0FQSS5TZXNzaW9ucyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cblJlYWx0aW1lLlNlc3Npb25zID0gU2Vzc2lvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFsdGltZS5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU2Vzc2lvbnNBUEkiLCJTZXNzaW9ucyIsIlJlYWx0aW1lIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzZXNzaW9ucyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/realtime/realtime.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/realtime/sessions.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/realtime/sessions.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sessions: function() { return /* binding */ Sessions; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Sessions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API. Can be configured with the same session parameters as the\n     * `session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     */ create(body, options) {\n        return this._client.post(\"/realtime/sessions\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n} //# sourceMappingURL=sessions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvcmVhbHRpbWUvc2Vzc2lvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2xDO0FBQzdDLE1BQU1DLGlCQUFpQkQsc0RBQVdBO0lBQ3JDOzs7Ozs7OztLQVFDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxzQkFBc0I7WUFDM0NIO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0osRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9yZWFsdGltZS9zZXNzaW9ucy5tanM/YjVkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgU2Vzc2lvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGVwaGVtZXJhbCBBUEkgdG9rZW4gZm9yIHVzZSBpbiBjbGllbnQtc2lkZSBhcHBsaWNhdGlvbnMgd2l0aCB0aGVcbiAgICAgKiBSZWFsdGltZSBBUEkuIENhbiBiZSBjb25maWd1cmVkIHdpdGggdGhlIHNhbWUgc2Vzc2lvbiBwYXJhbWV0ZXJzIGFzIHRoZVxuICAgICAqIGBzZXNzaW9uLnVwZGF0ZWAgY2xpZW50IGV2ZW50LlxuICAgICAqXG4gICAgICogSXQgcmVzcG9uZHMgd2l0aCBhIHNlc3Npb24gb2JqZWN0LCBwbHVzIGEgYGNsaWVudF9zZWNyZXRgIGtleSB3aGljaCBjb250YWlucyBhXG4gICAgICogdXNhYmxlIGVwaGVtZXJhbCBBUEkgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBhdXRoZW50aWNhdGUgYnJvd3NlciBjbGllbnRzIGZvclxuICAgICAqIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvcmVhbHRpbWUvc2Vzc2lvbnMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJTZXNzaW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/realtime/sessions.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/threads/messages.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages.mjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: function() { return /* binding */ Messages; },\n/* harmony export */   MessagesPage: function() { return /* binding */ MessagesPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Messages extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a message.\n     */ create(threadId, body, options) {\n        return this._client.post(\"/threads/\".concat(threadId, \"/messages\"), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Retrieve a message.\n     */ retrieve(threadId, messageId, options) {\n        return this._client.get(\"/threads/\".concat(threadId, \"/messages/\").concat(messageId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Modifies a message.\n     */ update(threadId, messageId, body, options) {\n        return this._client.post(\"/threads/\".concat(threadId, \"/messages/\").concat(messageId), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    list(threadId) {\n        let query = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 ? arguments[2] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(\"/threads/\".concat(threadId, \"/messages\"), MessagesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Deletes a message.\n     */ del(threadId, messageId, options) {\n        return this._client.delete(\"/threads/\".concat(threadId, \"/messages/\").concat(messageId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n}\nclass MessagesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nMessages.MessagesPage = MessagesPage; //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbEM7QUFDQztBQUNBO0FBQzlDLE1BQU1HLGlCQUFpQkgsc0RBQVdBO0lBQ3JDOztLQUVDLEdBQ0RJLE9BQU9DLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFlBQXFCLE9BQVRKLFVBQVMsY0FBWTtZQUN0REM7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTttQkFBb0JILG9CQUFBQSw4QkFBQUEsUUFBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxTQUFTTixRQUFRLEVBQUVPLFNBQVMsRUFBRUwsT0FBTyxFQUFFO1FBQ25DLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLEdBQUcsQ0FBQyxZQUFpQ0QsT0FBckJQLFVBQVMsY0FBc0IsT0FBVk8sWUFBYTtZQUNsRSxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTttQkFBb0JILG9CQUFBQSw4QkFBQUEsUUFBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNESSxPQUFPVCxRQUFRLEVBQUVPLFNBQVMsRUFBRU4sSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFlBQWlDRyxPQUFyQlAsVUFBUyxjQUFzQixPQUFWTyxZQUFhO1lBQ25FTjtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBSyxLQUFLVixRQUFRLEVBQXVCO1lBQXJCVyxRQUFBQSxpRUFBUSxDQUFDLEdBQUdUO1FBQ3ZCLElBQUlOLDJEQUFnQkEsQ0FBQ2UsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDVixVQUFVLENBQUMsR0FBR1c7UUFDbkM7UUFDQSxPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxVQUFVLENBQUMsWUFBcUIsT0FBVFosVUFBUyxjQUFZYSxjQUFjO1lBQzFFRjtZQUNBLEdBQUdULE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RTLElBQUlkLFFBQVEsRUFBRU8sU0FBUyxFQUFFTCxPQUFPLEVBQUU7UUFDOUIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDLFlBQWlDUixPQUFyQlAsVUFBUyxjQUFzQixPQUFWTyxZQUFhO1lBQ3JFLEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtBQUNKO0FBQ08sTUFBTVEscUJBQXFCaEIsdURBQVVBO0FBQzVDO0FBQ0FDLFNBQVNlLFlBQVksR0FBR0EsY0FDeEIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy5tanM/MDVkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgTWVzc2FnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjcmVhdGUodGhyZWFkSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlc2AsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICByZXRyaWV2ZSh0aHJlYWRJZCwgbWVzc2FnZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlcy8ke21lc3NhZ2VJZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vZGlmaWVzIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICB1cGRhdGUodGhyZWFkSWQsIG1lc3NhZ2VJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfWAsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QodGhyZWFkSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXNgLCBNZXNzYWdlc1BhZ2UsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBkZWwodGhyZWFkSWQsIG1lc3NhZ2VJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNZXNzYWdlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbk1lc3NhZ2VzLk1lc3NhZ2VzUGFnZSA9IE1lc3NhZ2VzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiQ3Vyc29yUGFnZSIsIk1lc3NhZ2VzIiwiY3JlYXRlIiwidGhyZWFkSWQiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwibWVzc2FnZUlkIiwiZ2V0IiwidXBkYXRlIiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIk1lc3NhZ2VzUGFnZSIsImRlbCIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/threads/messages.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/runs.mjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: function() { return /* binding */ Runs; },\n/* harmony export */   RunsPage: function() { return /* binding */ RunsPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../lib/AssistantStream.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _steps_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./steps.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Runs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(threadId, params, options) {\n        const { include, ...body } = params;\n        var _params_stream;\n        return this._client.post(\"/threads/\".concat(threadId, \"/runs\"), {\n            query: {\n                include\n            },\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            },\n            stream: (_params_stream = params.stream) !== null && _params_stream !== void 0 ? _params_stream : false\n        });\n    }\n    /**\n     * Retrieves a run.\n     */ retrieve(threadId, runId, options) {\n        return this._client.get(\"/threads/\".concat(threadId, \"/runs/\").concat(runId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Modifies a run.\n     */ update(threadId, runId, body, options) {\n        return this._client.post(\"/threads/\".concat(threadId, \"/runs/\").concat(runId), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    list(threadId) {\n        let query = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 ? arguments[2] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(\"/threads/\".concat(threadId, \"/runs\"), RunsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     */ cancel(threadId, runId, options) {\n        return this._client.post(\"/threads/\".concat(threadId, \"/runs/\").concat(runId, \"/cancel\"), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * A helper to create a run an poll for a terminal state. More information on Run\n     * lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async createAndPoll(threadId, body, options) {\n        const run = await this.create(threadId, body, options);\n        return await this.poll(threadId, run.id, options);\n    }\n    /**\n     * Create a Run stream\n     *\n     * @deprecated use `stream` instead\n     */ createAndStream(threadId, body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_2__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    /**\n     * A helper to poll a run status until it reaches a terminal state. More\n     * information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async poll(threadId, runId, options) {\n        const headers = {\n            ...options === null || options === void 0 ? void 0 : options.headers,\n            \"X-Stainless-Poll-Helper\": \"true\"\n        };\n        if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n            headers[\"X-Stainless-Custom-Poll-Interval\"] = options.pollIntervalMs.toString();\n        }\n        while(true){\n            const { data: run, response } = await this.retrieve(threadId, runId, {\n                ...options,\n                headers: {\n                    ...options === null || options === void 0 ? void 0 : options.headers,\n                    ...headers\n                }\n            }).withResponse();\n            switch(run.status){\n                //If we are in any sort of intermediate state we poll\n                case \"queued\":\n                case \"in_progress\":\n                case \"cancelling\":\n                    let sleepInterval = 5000;\n                    if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    } else {\n                        const headerInterval = response.headers.get(\"openai-poll-after-ms\");\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\n                    break;\n                //We return the run in any terminal state.\n                case \"requires_action\":\n                case \"incomplete\":\n                case \"cancelled\":\n                case \"completed\":\n                case \"failed\":\n                case \"expired\":\n                    return run;\n            }\n        }\n    }\n    /**\n     * Create a Run stream\n     */ stream(threadId, body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_2__.AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    submitToolOutputs(threadId, runId, body, options) {\n        var _body_stream;\n        return this._client.post(\"/threads/\".concat(threadId, \"/runs/\").concat(runId, \"/submit_tool_outputs\"), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            },\n            stream: (_body_stream = body.stream) !== null && _body_stream !== void 0 ? _body_stream : false\n        });\n    }\n    /**\n     * A helper to submit a tool output to a run and poll for a terminal run state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async submitToolOutputsAndPoll(threadId, runId, body, options) {\n        const run = await this.submitToolOutputs(threadId, runId, body, options);\n        return await this.poll(threadId, run.id, options);\n    }\n    /**\n     * Submit the tool outputs from a previous run and stream the run to a terminal\n     * state. More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ submitToolOutputsStream(threadId, runId, body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_2__.AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);\n    }\n    constructor(){\n        super(...arguments);\n        this.steps = new _steps_mjs__WEBPACK_IMPORTED_MODULE_3__.Steps(this._client);\n    }\n}\nclass RunsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {\n}\nRuns.RunsPage = RunsPage;\nRuns.Steps = _steps_mjs__WEBPACK_IMPORTED_MODULE_3__.Steps;\nRuns.RunStepsPage = _steps_mjs__WEBPACK_IMPORTED_MODULE_3__.RunStepsPage; //# sourceMappingURL=runs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/steps.mjs ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunStepsPage: function() { return /* binding */ RunStepsPage; },\n/* harmony export */   Steps: function() { return /* binding */ Steps; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Steps extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    retrieve(threadId, runId, stepId) {\n        let query = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, options = arguments.length > 4 ? arguments[4] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.retrieve(threadId, runId, stepId, {}, query);\n        }\n        return this._client.get(\"/threads/\".concat(threadId, \"/runs/\").concat(runId, \"/steps/\").concat(stepId), {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    list(threadId, runId) {\n        let query = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, options = arguments.length > 3 ? arguments[3] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, runId, {}, query);\n        }\n        return this._client.getAPIList(\"/threads/\".concat(threadId, \"/runs/\").concat(runId, \"/steps\"), RunStepsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n}\nclass RunStepsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nSteps.RunStepsPage = RunStepsPage; //# sourceMappingURL=steps.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3N0ZXBzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHNGQUFzRjtBQUMvQjtBQUNDO0FBQ0E7QUFDakQsTUFBTUcsY0FBY0gsc0RBQVdBO0lBQ2xDSSxTQUFTQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUF1QjtZQUFyQkMsUUFBQUEsaUVBQVEsQ0FBQyxHQUFHQztRQUMxQyxJQUFJUiwyREFBZ0JBLENBQUNPLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNKLFFBQVEsQ0FBQ0MsVUFBVUMsT0FBT0MsUUFBUSxDQUFDLEdBQUdDO1FBQ3REO1FBQ0EsT0FBTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFlBQTZCTCxPQUFqQkQsVUFBUyxVQUF1QkUsT0FBZkQsT0FBTSxXQUFnQixPQUFQQyxTQUFVO1lBQzFFQztZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBQyxLQUFLUixRQUFRLEVBQUVDLEtBQUssRUFBdUI7WUFBckJFLFFBQUFBLGlFQUFRLENBQUMsR0FBR0M7UUFDOUIsSUFBSVIsMkRBQWdCQSxDQUFDTyxRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDSyxJQUFJLENBQUNSLFVBQVVDLE9BQU8sQ0FBQyxHQUFHRTtRQUMxQztRQUNBLE9BQU8sSUFBSSxDQUFDRSxPQUFPLENBQUNJLFVBQVUsQ0FBQyxZQUE2QlIsT0FBakJELFVBQVMsVUFBYyxPQUFOQyxPQUFNLFdBQVNTLGNBQWM7WUFDckZQO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0o7QUFDTyxNQUFNRyxxQkFBcUJiLHVEQUFVQTtBQUM1QztBQUNBQyxNQUFNWSxZQUFZLEdBQUdBLGNBQ3JCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcy5tanM/NDdlMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgU3RlcHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgcmV0cmlldmUodGhyZWFkSWQsIHJ1bklkLCBzdGVwSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZSh0aHJlYWRJZCwgcnVuSWQsIHN0ZXBJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9zdGVwcy8ke3N0ZXBJZH1gLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdCh0aHJlYWRJZCwgcnVuSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCBydW5JZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3RlcHNgLCBSdW5TdGVwc1BhZ2UsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5TdGVwc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cblN0ZXBzLlJ1blN0ZXBzUGFnZSA9IFJ1blN0ZXBzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZXBzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiQ3Vyc29yUGFnZSIsIlN0ZXBzIiwicmV0cmlldmUiLCJ0aHJlYWRJZCIsInJ1bklkIiwic3RlcElkIiwicXVlcnkiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldCIsImhlYWRlcnMiLCJsaXN0IiwiZ2V0QVBJTGlzdCIsIlJ1blN0ZXBzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/threads/threads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/threads.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Threads: function() { return /* binding */ Threads; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/AssistantStream.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/AssistantStream.mjs\");\n/* harmony import */ var _messages_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./messages.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/threads/messages.mjs\");\n/* harmony import */ var _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./runs/runs.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Threads extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create() {\n        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, options = arguments.length > 1 ? arguments[1] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(body)) {\n            return this.create({}, body);\n        }\n        return this._client.post(\"/threads\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a thread.\n     */ retrieve(threadId, options) {\n        return this._client.get(\"/threads/\".concat(threadId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Modifies a thread.\n     */ update(threadId, body, options) {\n        return this._client.post(\"/threads/\".concat(threadId), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Delete a thread.\n     */ del(threadId, options) {\n        return this._client.delete(\"/threads/\".concat(threadId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    createAndRun(body, options) {\n        var _body_stream;\n        return this._client.post(\"/threads/runs\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            },\n            stream: (_body_stream = body.stream) !== null && _body_stream !== void 0 ? _body_stream : false\n        });\n    }\n    /**\n     * A helper to create a thread, start a run and then poll for a terminal state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */ async createAndRunPoll(body, options) {\n        const run = await this.createAndRun(body, options);\n        return await this.runs.poll(run.thread_id, run.id, options);\n    }\n    /**\n     * Create a thread and stream the run back\n     */ createAndRunStream(body, options) {\n        return _lib_AssistantStream_mjs__WEBPACK_IMPORTED_MODULE_2__.AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n    }\n    constructor(){\n        super(...arguments);\n        this.runs = new _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_3__.Runs(this._client);\n        this.messages = new _messages_mjs__WEBPACK_IMPORTED_MODULE_4__.Messages(this._client);\n    }\n}\nThreads.Runs = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_3__.Runs;\nThreads.RunsPage = _runs_runs_mjs__WEBPACK_IMPORTED_MODULE_3__.RunsPage;\nThreads.Messages = _messages_mjs__WEBPACK_IMPORTED_MODULE_4__.Messages;\nThreads.MessagesPage = _messages_mjs__WEBPACK_IMPORTED_MODULE_4__.MessagesPage; //# sourceMappingURL=threads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy90aHJlYWRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxzRkFBc0Y7QUFDbEM7QUFDQztBQUNjO0FBQ3JCO0FBQ1c7QUFDZDtBQUNPO0FBQzNDLE1BQU1TLGdCQUFnQlQsc0RBQVdBO0lBTXBDVSxTQUEyQjtZQUFwQkMsT0FBQUEsaUVBQU8sQ0FBQyxHQUFHQztRQUNkLElBQUlYLDJEQUFnQkEsQ0FBQ1UsT0FBTztZQUN4QixPQUFPLElBQUksQ0FBQ0QsTUFBTSxDQUFDLENBQUMsR0FBR0M7UUFDM0I7UUFDQSxPQUFPLElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLENBQUMsWUFBWTtZQUNqQ0g7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTttQkFBb0JILG9CQUFBQSw4QkFBQUEsUUFBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxTQUFTQyxRQUFRLEVBQUVMLE9BQU8sRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSyxHQUFHLENBQUMsWUFBcUIsT0FBVEQsV0FBWTtZQUM1QyxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTttQkFBb0JILG9CQUFBQSw4QkFBQUEsUUFBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNESSxPQUFPRixRQUFRLEVBQUVOLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxZQUFxQixPQUFURyxXQUFZO1lBQzdDTjtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RLLElBQUlILFFBQVEsRUFBRUwsT0FBTyxFQUFFO1FBQ25CLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNRLE1BQU0sQ0FBQyxZQUFxQixPQUFUSixXQUFZO1lBQy9DLEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBTyxhQUFhWCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtZQUtaRDtRQUpaLE9BQU8sSUFBSSxDQUFDRSxPQUFPLENBQUNDLElBQUksQ0FBQyxpQkFBaUI7WUFDdENIO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztZQUMvRFEsUUFBUVosQ0FBQUEsZUFBQUEsS0FBS1ksTUFBTSxjQUFYWiwwQkFBQUEsZUFBZTtRQUMzQjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNELE1BQU1hLGlCQUFpQmIsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEMsTUFBTWEsTUFBTSxNQUFNLElBQUksQ0FBQ0gsWUFBWSxDQUFDWCxNQUFNQztRQUMxQyxPQUFPLE1BQU0sSUFBSSxDQUFDYyxJQUFJLENBQUNDLElBQUksQ0FBQ0YsSUFBSUcsU0FBUyxFQUFFSCxJQUFJSSxFQUFFLEVBQUVqQjtJQUN2RDtJQUNBOztLQUVDLEdBQ0RrQixtQkFBbUJuQixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM5QixPQUFPVixxRUFBZUEsQ0FBQzZCLDJCQUEyQixDQUFDcEIsTUFBTSxJQUFJLENBQUNFLE9BQU8sQ0FBQ21CLElBQUksQ0FBQ0MsT0FBTyxFQUFFckI7SUFDeEY7SUFqRUFzQixhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ1QsSUFBSSxHQUFHLElBQUlwQixnREFBWSxDQUFDLElBQUksQ0FBQ08sT0FBTztRQUN6QyxJQUFJLENBQUN1QixRQUFRLEdBQUcsSUFBSWpDLG1EQUFvQixDQUFDLElBQUksQ0FBQ1UsT0FBTztJQUN6RDtBQThESjtBQUNBSixRQUFRRixJQUFJLEdBQUdBLGdEQUFJQTtBQUNuQkUsUUFBUUQsUUFBUSxHQUFHQSxvREFBUUE7QUFDM0JDLFFBQVFMLFFBQVEsR0FBR0EsbURBQVFBO0FBQzNCSyxRQUFRSixZQUFZLEdBQUdBLHVEQUFZQSxFQUNuQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3RocmVhZHMubWpzPzY3NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0IHsgQXNzaXN0YW50U3RyZWFtIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi9Bc3Npc3RhbnRTdHJlYW0ubWpzXCI7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tIFwiLi9tZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IE1lc3NhZ2VzLCBNZXNzYWdlc1BhZ2UsIH0gZnJvbSBcIi4vbWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgKiBhcyBSdW5zQVBJIGZyb20gXCIuL3J1bnMvcnVucy5tanNcIjtcbmltcG9ydCB7IFJ1bnMsIFJ1bnNQYWdlLCB9IGZyb20gXCIuL3J1bnMvcnVucy5tanNcIjtcbmV4cG9ydCBjbGFzcyBUaHJlYWRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0FQSS5SdW5zKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgTWVzc2FnZXNBUEkuTWVzc2FnZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgY3JlYXRlKGJvZHkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhib2R5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHt9LCBib2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy90aHJlYWRzJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgdGhyZWFkLlxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSB0aHJlYWQuXG4gICAgICovXG4gICAgdXBkYXRlKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSB0aHJlYWQuXG4gICAgICovXG4gICAgZGVsKHRocmVhZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlQW5kUnVuKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdGhyZWFkcy9ydW5zJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICAgICAgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhIHRocmVhZCwgc3RhcnQgYSBydW4gYW5kIHRoZW4gcG9sbCBmb3IgYSB0ZXJtaW5hbCBzdGF0ZS5cbiAgICAgKiBNb3JlIGluZm9ybWF0aW9uIG9uIFJ1biBsaWZlY3ljbGVzIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgICAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvaG93LWl0LXdvcmtzL3J1bnMtYW5kLXJ1bi1zdGVwc1xuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUFuZFJ1blBvbGwoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW4gPSBhd2FpdCB0aGlzLmNyZWF0ZUFuZFJ1bihib2R5LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucnVucy5wb2xsKHJ1bi50aHJlYWRfaWQsIHJ1bi5pZCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHRocmVhZCBhbmQgc3RyZWFtIHRoZSBydW4gYmFja1xuICAgICAqL1xuICAgIGNyZWF0ZUFuZFJ1blN0cmVhbShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBBc3Npc3RhbnRTdHJlYW0uY3JlYXRlVGhyZWFkQXNzaXN0YW50U3RyZWFtKGJvZHksIHRoaXMuX2NsaWVudC5iZXRhLnRocmVhZHMsIG9wdGlvbnMpO1xuICAgIH1cbn1cblRocmVhZHMuUnVucyA9IFJ1bnM7XG5UaHJlYWRzLlJ1bnNQYWdlID0gUnVuc1BhZ2U7XG5UaHJlYWRzLk1lc3NhZ2VzID0gTWVzc2FnZXM7XG5UaHJlYWRzLk1lc3NhZ2VzUGFnZSA9IE1lc3NhZ2VzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocmVhZHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJBc3Npc3RhbnRTdHJlYW0iLCJNZXNzYWdlc0FQSSIsIk1lc3NhZ2VzIiwiTWVzc2FnZXNQYWdlIiwiUnVuc0FQSSIsIlJ1bnMiLCJSdW5zUGFnZSIsIlRocmVhZHMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwidGhyZWFkSWQiLCJnZXQiLCJ1cGRhdGUiLCJkZWwiLCJkZWxldGUiLCJjcmVhdGVBbmRSdW4iLCJzdHJlYW0iLCJjcmVhdGVBbmRSdW5Qb2xsIiwicnVuIiwicnVucyIsInBvbGwiLCJ0aHJlYWRfaWQiLCJpZCIsImNyZWF0ZUFuZFJ1blN0cmVhbSIsImNyZWF0ZVRocmVhZEFzc2lzdGFudFN0cmVhbSIsImJldGEiLCJ0aHJlYWRzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJtZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/threads/threads.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/file-batches.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/vector-stores/file-batches.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileBatches: function() { return /* binding */ FileBatches; },\n/* harmony export */   VectorStoreFilesPage: function() { return /* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _lib_Util_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/Util.mjs */ \"(app-pages-browser)/./node_modules/openai/lib/Util.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./files.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/files.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass FileBatches extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a vector store file batch.\n     */ create(vectorStoreId, body, options) {\n        return this._client.post(\"/vector_stores/\".concat(vectorStoreId, \"/file_batches\"), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a vector store file batch.\n     */ retrieve(vectorStoreId, batchId, options) {\n        return this._client.get(\"/vector_stores/\".concat(vectorStoreId, \"/file_batches/\").concat(batchId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Cancel a vector store file batch. This attempts to cancel the processing of\n     * files in this batch as soon as possible.\n     */ cancel(vectorStoreId, batchId, options) {\n        return this._client.post(\"/vector_stores/\".concat(vectorStoreId, \"/file_batches/\").concat(batchId, \"/cancel\"), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Create a vector store batch and poll until all files have been processed.\n     */ async createAndPoll(vectorStoreId, body, options) {\n        const batch = await this.create(vectorStoreId, body);\n        return await this.poll(vectorStoreId, batch.id, options);\n    }\n    listFiles(vectorStoreId, batchId) {\n        let query = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, options = arguments.length > 3 ? arguments[3] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.listFiles(vectorStoreId, batchId, {}, query);\n        }\n        return this._client.getAPIList(\"/vector_stores/\".concat(vectorStoreId, \"/file_batches/\").concat(batchId, \"/files\"), _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Wait for the given file batch to be processed.\n     *\n     * Note: this will return even if one of the files failed to process, you need to\n     * check batch.file_counts.failed_count to handle this case.\n     */ async poll(vectorStoreId, batchId, options) {\n        const headers = {\n            ...options === null || options === void 0 ? void 0 : options.headers,\n            \"X-Stainless-Poll-Helper\": \"true\"\n        };\n        if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n            headers[\"X-Stainless-Custom-Poll-Interval\"] = options.pollIntervalMs.toString();\n        }\n        while(true){\n            const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {\n                ...options,\n                headers\n            }).withResponse();\n            switch(batch.status){\n                case \"in_progress\":\n                    let sleepInterval = 5000;\n                    if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    } else {\n                        const headerInterval = response.headers.get(\"openai-poll-after-ms\");\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\n                    break;\n                case \"failed\":\n                case \"cancelled\":\n                case \"completed\":\n                    return batch;\n            }\n        }\n    }\n    /**\n     * Uploads the given files concurrently and then creates a vector store file batch.\n     *\n     * The concurrency limit is configurable using the `maxConcurrency` parameter.\n     */ async uploadAndPoll(vectorStoreId, param, options) {\n        let { files, fileIds = [] } = param;\n        if (files == null || files.length == 0) {\n            throw new Error(\"No `files` provided to process. If you've already uploaded files you should use `.createAndPoll()` instead\");\n        }\n        var _options_maxConcurrency;\n        const configuredConcurrency = (_options_maxConcurrency = options === null || options === void 0 ? void 0 : options.maxConcurrency) !== null && _options_maxConcurrency !== void 0 ? _options_maxConcurrency : 5;\n        // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n        const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n        const client = this._client;\n        const fileIterator = files.values();\n        const allFileIds = [\n            ...fileIds\n        ];\n        // This code is based on this design. The libraries don't accommodate our environment limits.\n        // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n        async function processFiles(iterator) {\n            for (let item of iterator){\n                const fileObj = await client.files.create({\n                    file: item,\n                    purpose: \"assistants\"\n                }, options);\n                allFileIds.push(fileObj.id);\n            }\n        }\n        // Start workers to process results\n        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n        // Wait for all processing to complete.\n        await (0,_lib_Util_mjs__WEBPACK_IMPORTED_MODULE_3__.allSettledWithThrow)(workers);\n        return await this.createAndPoll(vectorStoreId, {\n            file_ids: allFileIds\n        });\n    }\n}\n //# sourceMappingURL=file-batches.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/file-batches.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/files.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/openai/resources/beta/vector-stores/files.mjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: function() { return /* binding */ Files; },\n/* harmony export */   VectorStoreFilesPage: function() { return /* binding */ VectorStoreFilesPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a vector store file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to a\n     * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n     */ create(vectorStoreId, body, options) {\n        return this._client.post(\"/vector_stores/\".concat(vectorStoreId, \"/files\"), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a vector store file.\n     */ retrieve(vectorStoreId, fileId, options) {\n        return this._client.get(\"/vector_stores/\".concat(vectorStoreId, \"/files/\").concat(fileId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    list(vectorStoreId) {\n        let query = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 ? arguments[2] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(vectorStoreId, {}, query);\n        }\n        return this._client.getAPIList(\"/vector_stores/\".concat(vectorStoreId, \"/files\"), VectorStoreFilesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Delete a vector store file. This will remove the file from the vector store but\n     * the file itself will not be deleted. To delete the file, use the\n     * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n     * endpoint.\n     */ del(vectorStoreId, fileId, options) {\n        return this._client.delete(\"/vector_stores/\".concat(vectorStoreId, \"/files/\").concat(fileId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Attach a file to the given vector store and wait for it to be processed.\n     */ async createAndPoll(vectorStoreId, body, options) {\n        const file = await this.create(vectorStoreId, body, options);\n        return await this.poll(vectorStoreId, file.id, options);\n    }\n    /**\n     * Wait for the vector store file to finish processing.\n     *\n     * Note: this will return even if the file failed to process, you need to check\n     * file.last_error and file.status to handle these cases\n     */ async poll(vectorStoreId, fileId, options) {\n        const headers = {\n            ...options === null || options === void 0 ? void 0 : options.headers,\n            \"X-Stainless-Poll-Helper\": \"true\"\n        };\n        if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n            headers[\"X-Stainless-Custom-Poll-Interval\"] = options.pollIntervalMs.toString();\n        }\n        while(true){\n            const fileResponse = await this.retrieve(vectorStoreId, fileId, {\n                ...options,\n                headers\n            }).withResponse();\n            const file = fileResponse.data;\n            switch(file.status){\n                case \"in_progress\":\n                    let sleepInterval = 5000;\n                    if (options === null || options === void 0 ? void 0 : options.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    } else {\n                        const headerInterval = fileResponse.response.headers.get(\"openai-poll-after-ms\");\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.sleep)(sleepInterval);\n                    break;\n                case \"failed\":\n                case \"completed\":\n                    return file;\n            }\n        }\n    }\n    /**\n     * Upload a file to the `files` API and then attach it to the given vector store.\n     *\n     * Note the file will be asynchronously processed (you can use the alternative\n     * polling helper method to wait for processing to complete).\n     */ async upload(vectorStoreId, file, options) {\n        const fileInfo = await this._client.files.create({\n            file: file,\n            purpose: \"assistants\"\n        }, options);\n        return this.create(vectorStoreId, {\n            file_id: fileInfo.id\n        }, options);\n    }\n    /**\n     * Add a file to a vector store and poll until processing is complete.\n     */ async uploadAndPoll(vectorStoreId, file, options) {\n        const fileInfo = await this.upload(vectorStoreId, file, options);\n        return await this.poll(vectorStoreId, fileInfo.id, options);\n    }\n}\nclass VectorStoreFilesPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nFiles.VectorStoreFilesPage = VectorStoreFilesPage; //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/files.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorStores: function() { return /* binding */ VectorStores; },\n/* harmony export */   VectorStoresPage: function() { return /* binding */ VectorStoresPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _file_batches_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file-batches.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/file-batches.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./files.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/files.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass VectorStores extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create a vector store.\n     */ create(body, options) {\n        return this._client.post(\"/vector_stores\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a vector store.\n     */ retrieve(vectorStoreId, options) {\n        return this._client.get(\"/vector_stores/\".concat(vectorStoreId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Modifies a vector store.\n     */ update(vectorStoreId, body, options) {\n        return this._client.post(\"/vector_stores/\".concat(vectorStoreId), {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    list() {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, options = arguments.length > 1 ? arguments[1] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/vector_stores\", VectorStoresPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    /**\n     * Delete a vector store.\n     */ del(vectorStoreId, options) {\n        return this._client.delete(\"/vector_stores/\".concat(vectorStoreId), {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v2\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.files = new _files_mjs__WEBPACK_IMPORTED_MODULE_2__.Files(this._client);\n        this.fileBatches = new _file_batches_mjs__WEBPACK_IMPORTED_MODULE_3__.FileBatches(this._client);\n    }\n}\nclass VectorStoresPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {\n}\nVectorStores.VectorStoresPage = VectorStoresPage;\nVectorStores.Files = _files_mjs__WEBPACK_IMPORTED_MODULE_2__.Files;\nVectorStores.VectorStoreFilesPage = _files_mjs__WEBPACK_IMPORTED_MODULE_2__.VectorStoreFilesPage;\nVectorStores.FileBatches = _file_batches_mjs__WEBPACK_IMPORTED_MODULE_3__.FileBatches; //# sourceMappingURL=vector-stores.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdmVjdG9yLXN0b3Jlcy92ZWN0b3Itc3RvcmVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2xDO0FBQ0M7QUFDQTtBQUNIO0FBQ1Y7QUFDbUI7QUFDTjtBQUM5QyxNQUFNUSxxQkFBcUJSLHNEQUFXQTtJQU16Qzs7S0FFQyxHQUNEUyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsa0JBQWtCO1lBQ3ZDSDtZQUNBLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RDLFNBQVNDLGFBQWEsRUFBRUwsT0FBTyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLEdBQUcsQ0FBQyxrQkFBZ0MsT0FBZEQsZ0JBQWlCO1lBQ3ZELEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO21CQUFvQkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RJLE9BQU9GLGFBQWEsRUFBRU4sSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDakMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGtCQUFnQyxPQUFkRyxnQkFBaUI7WUFDeEROO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0FLLE9BQTBCO1lBQXJCQyxRQUFBQSxpRUFBUSxDQUFDLEdBQUdUO1FBQ2IsSUFBSVYsMkRBQWdCQSxDQUFDbUIsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBR0M7UUFDekI7UUFDQSxPQUFPLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxVQUFVLENBQUMsa0JBQWtCQyxrQkFBa0I7WUFDL0RGO1lBQ0EsR0FBR1QsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDRFMsSUFBSVAsYUFBYSxFQUFFTCxPQUFPLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDLGtCQUFnQyxPQUFkUixnQkFBaUI7WUFDMUQsR0FBR0wsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7bUJBQW9CSCxvQkFBQUEsOEJBQUFBLFFBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBcERBVyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUl2Qiw2Q0FBYyxDQUFDLElBQUksQ0FBQ1EsT0FBTztRQUM1QyxJQUFJLENBQUNnQixXQUFXLEdBQUcsSUFBSTFCLDBEQUEwQixDQUFDLElBQUksQ0FBQ1UsT0FBTztJQUNsRTtBQWlESjtBQUNPLE1BQU1VLHlCQUF5QmYsdURBQVVBO0FBQ2hEO0FBQ0FDLGFBQWFjLGdCQUFnQixHQUFHQTtBQUNoQ2QsYUFBYUgsS0FBSyxHQUFHQSw2Q0FBS0E7QUFDMUJHLGFBQWFGLG9CQUFvQixHQUFHQSw0REFBb0JBO0FBQ3hERSxhQUFhTCxXQUFXLEdBQUdBLDBEQUFXQSxFQUN0QywwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS92ZWN0b3Itc3RvcmVzL3ZlY3Rvci1zdG9yZXMubWpzPzI0NzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlLm1qc1wiO1xuaW1wb3J0ICogYXMgRmlsZUJhdGNoZXNBUEkgZnJvbSBcIi4vZmlsZS1iYXRjaGVzLm1qc1wiO1xuaW1wb3J0IHsgRmlsZUJhdGNoZXMsIH0gZnJvbSBcIi4vZmlsZS1iYXRjaGVzLm1qc1wiO1xuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSBcIi4vZmlsZXMubWpzXCI7XG5pbXBvcnQgeyBGaWxlcywgVmVjdG9yU3RvcmVGaWxlc1BhZ2UsIH0gZnJvbSBcIi4vZmlsZXMubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgVmVjdG9yU3RvcmVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmZpbGVzID0gbmV3IEZpbGVzQVBJLkZpbGVzKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuZmlsZUJhdGNoZXMgPSBuZXcgRmlsZUJhdGNoZXNBUEkuRmlsZUJhdGNoZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdmVjdG9yIHN0b3JlLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3ZlY3Rvcl9zdG9yZXMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSB2ZWN0b3Igc3RvcmUuXG4gICAgICovXG4gICAgcmV0cmlldmUodmVjdG9yU3RvcmVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSB2ZWN0b3Igc3RvcmUuXG4gICAgICovXG4gICAgdXBkYXRlKHZlY3RvclN0b3JlSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9YCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdChxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL3ZlY3Rvcl9zdG9yZXMnLCBWZWN0b3JTdG9yZXNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgdmVjdG9yIHN0b3JlLlxuICAgICAqL1xuICAgIGRlbCh2ZWN0b3JTdG9yZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBWZWN0b3JTdG9yZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5WZWN0b3JTdG9yZXMuVmVjdG9yU3RvcmVzUGFnZSA9IFZlY3RvclN0b3Jlc1BhZ2U7XG5WZWN0b3JTdG9yZXMuRmlsZXMgPSBGaWxlcztcblZlY3RvclN0b3Jlcy5WZWN0b3JTdG9yZUZpbGVzUGFnZSA9IFZlY3RvclN0b3JlRmlsZXNQYWdlO1xuVmVjdG9yU3RvcmVzLkZpbGVCYXRjaGVzID0gRmlsZUJhdGNoZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZWN0b3Itc3RvcmVzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiRmlsZUJhdGNoZXNBUEkiLCJGaWxlQmF0Y2hlcyIsIkZpbGVzQVBJIiwiRmlsZXMiLCJWZWN0b3JTdG9yZUZpbGVzUGFnZSIsIkN1cnNvclBhZ2UiLCJWZWN0b3JTdG9yZXMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwidmVjdG9yU3RvcmVJZCIsImdldCIsInVwZGF0ZSIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJWZWN0b3JTdG9yZXNQYWdlIiwiZGVsIiwiZGVsZXRlIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJmaWxlcyIsImZpbGVCYXRjaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/beta/vector-stores/vector-stores.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/chat/chat.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/chat/chat.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: function() { return /* binding */ Chat; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Chat extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\nChat.Completions = _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions; //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY2hhdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3JDO0FBQ0c7QUFDSDtBQUMxQyxNQUFNRyxhQUFhSCxzREFBV0E7SUFDakNJLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSUwseURBQTBCLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ2xFO0FBQ0o7QUFDQUosS0FBS0QsV0FBVyxHQUFHQSx5REFBV0EsRUFDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY2hhdC5tanM/OTBjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBDb21wbGV0aW9uc0FQSSBmcm9tIFwiLi9jb21wbGV0aW9ucy5tanNcIjtcbmltcG9ydCB7IENvbXBsZXRpb25zLCB9IGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbnMgPSBuZXcgQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG5DaGF0LkNvbXBsZXRpb25zID0gQ29tcGxldGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGF0Lm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9uc0FQSSIsIkNvbXBsZXRpb25zIiwiQ2hhdCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY29tcGxldGlvbnMiLCJfY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/chat/chat.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/chat/completions.mjs":
/*!************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: function() { return /* binding */ Completions; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        var _body_stream;\n        return this._client.post(\"/chat/completions\", {\n            body,\n            ...options,\n            stream: (_body_stream = body.stream) !== null && _body_stream !== void 0 ? _body_stream : false\n        });\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3JDO0FBQzFDLE1BQU1DLG9CQUFvQkQsc0RBQVdBO0lBQ3hDRSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtZQUN3REQ7UUFBMUUsT0FBTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHFCQUFxQjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87WUFBRUcsUUFBUUosQ0FBQUEsZUFBQUEsS0FBS0ksTUFBTSxjQUFYSiwwQkFBQUEsZUFBZTtRQUFNO0lBQ25HO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy5tanM/ZGYzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvY2hhdC9jb21wbGV0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucywgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Iiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/chat/completions.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/completions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/completions.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: function() { return /* binding */ Completions; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Completions extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        var _body_stream;\n        return this._client.post(\"/completions\", {\n            body,\n            ...options,\n            stream: (_body_stream = body.stream) !== null && _body_stream !== void 0 ? _body_stream : false\n        });\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUN4QztBQUN2QyxNQUFNQyxvQkFBb0JELHNEQUFXQTtJQUN4Q0UsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7WUFDbUREO1FBQXJFLE9BQU8sSUFBSSxDQUFDRSxPQUFPLENBQUNDLElBQUksQ0FBQyxnQkFBZ0I7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1lBQUVHLFFBQVFKLENBQUFBLGVBQUFBLEtBQUtJLE1BQU0sY0FBWEosMEJBQUFBLGVBQWU7UUFBTTtJQUM5RjtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcz9hNDgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9jb21wbGV0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucywgc3RyZWFtOiBib2R5LnN0cmVhbSA/PyBmYWxzZSB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Iiwic3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/completions.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/embeddings.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/embeddings.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: function() { return /* binding */ Embeddings; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Embeddings extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     */ create(body, options) {\n        return this._client.post(\"/embeddings\", {\n            body,\n            ...options\n        });\n    }\n} //# sourceMappingURL=embeddings.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VtYmVkZGluZ3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3hDO0FBQ3ZDLE1BQU1DLG1CQUFtQkQsc0RBQVdBO0lBQ3ZDOztLQUVDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxlQUFlO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQy9EO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZW1iZWRkaW5ncy5tanM/ODc5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UubWpzXCI7XG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2VtYmVkZGluZ3MnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1iZWRkaW5ncy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiRW1iZWRkaW5ncyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/embeddings.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/files.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/files.mjs ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileObjectsPage: function() { return /* binding */ FileObjectsPage; },\n/* harmony export */   Files: function() { return /* binding */ Files; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Files extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Upload a file that can be used across various endpoints. Individual files can be\n     * up to 512 MB, and the size of all files uploaded by one organization can be up\n     * to 100 GB.\n     *\n     * The Assistants API supports files up to 2 million tokens and of specific file\n     * types. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n     * details.\n     *\n     * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n     * required formats for fine-tuning\n     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n     * models.\n     *\n     * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n     * has a specific required\n     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */ create(body, options) {\n        return this._client.post(\"/files\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Returns information about a specific file.\n     */ retrieve(fileId, options) {\n        return this._client.get(\"/files/\".concat(fileId), options);\n    }\n    list() {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, options = arguments.length > 1 ? arguments[1] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/files\", FileObjectsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete a file.\n     */ del(fileId, options) {\n        return this._client.delete(\"/files/\".concat(fileId), options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */ content(fileId, options) {\n        return this._client.get(\"/files/\".concat(fileId, \"/content\"), {\n            ...options,\n            headers: {\n                Accept: \"application/binary\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            },\n            __binaryResponse: true\n        });\n    }\n    /**\n     * Returns the contents of the specified file.\n     *\n     * @deprecated The `.content()` method should be used instead\n     */ retrieveContent(fileId, options) {\n        return this._client.get(\"/files/\".concat(fileId, \"/content\"), options);\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */ async waitForProcessing(id) {\n        let { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const TERMINAL_STATES = new Set([\n            \"processed\",\n            \"error\",\n            \"deleted\"\n        ]);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while(!file.status || !TERMINAL_STATES.has(file.status)){\n            await (0,_core_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError({\n                    message: \"Giving up on waiting for file \".concat(id, \" to finish processing after \").concat(maxWait, \" milliseconds.\")\n                });\n            }\n        }\n        return file;\n    }\n}\nclass FileObjectsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage {\n}\nFiles.FileObjectsPage = FileObjectsPage; //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/files.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: function() { return /* binding */ FineTuning; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jobs/jobs.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass FineTuning extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.jobs = new _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs(this._client);\n    }\n}\nFineTuning.Jobs = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs;\nFineTuning.FineTuningJobsPage = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobsPage;\nFineTuning.FineTuningJobEventsPage = _jobs_jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobEventsPage; //# sourceMappingURL=fine-tuning.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzRkFBc0Y7QUFDckM7QUFDTjtBQUMwQztBQUM5RSxNQUFNSyxtQkFBbUJMLHNEQUFXQTtJQUN2Q00sYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJUCxnREFBWSxDQUFDLElBQUksQ0FBQ1EsT0FBTztJQUM3QztBQUNKO0FBQ0FKLFdBQVdELElBQUksR0FBR0EsZ0RBQUlBO0FBQ3RCQyxXQUFXRixrQkFBa0IsR0FBR0EsOERBQWtCQTtBQUNsREUsV0FBV0gsdUJBQXVCLEdBQUdBLG1FQUF1QkEsRUFDNUQsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qcz8yNjc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCAqIGFzIEpvYnNBUEkgZnJvbSBcIi4vam9icy9qb2JzLm1qc1wiO1xuaW1wb3J0IHsgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UsIEZpbmVUdW5pbmdKb2JzUGFnZSwgSm9icywgfSBmcm9tIFwiLi9qb2JzL2pvYnMubWpzXCI7XG5leHBvcnQgY2xhc3MgRmluZVR1bmluZyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5qb2JzID0gbmV3IEpvYnNBUEkuSm9icyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbn1cbkZpbmVUdW5pbmcuSm9icyA9IEpvYnM7XG5GaW5lVHVuaW5nLkZpbmVUdW5pbmdKb2JzUGFnZSA9IEZpbmVUdW5pbmdKb2JzUGFnZTtcbkZpbmVUdW5pbmcuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmUtdHVuaW5nLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJKb2JzQVBJIiwiRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UiLCJGaW5lVHVuaW5nSm9ic1BhZ2UiLCJKb2JzIiwiRmluZVR1bmluZyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiam9icyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Checkpoints: function() { return /* binding */ Checkpoints; },\n/* harmony export */   FineTuningJobCheckpointsPage: function() { return /* binding */ FineTuningJobCheckpointsPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Checkpoints extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    list(fineTuningJobId) {\n        let query = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 ? arguments[2] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(fineTuningJobId, {}, query);\n        }\n        return this._client.getAPIList(\"/fine_tuning/jobs/\".concat(fineTuningJobId, \"/checkpoints\"), FineTuningJobCheckpointsPage, {\n            query,\n            ...options\n        });\n    }\n}\nclass FineTuningJobCheckpointsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nCheckpoints.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage; //# sourceMappingURL=checkpoints.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMvY2hlY2twb2ludHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ2xDO0FBQ0M7QUFDQTtBQUM5QyxNQUFNRyxvQkFBb0JILHNEQUFXQTtJQUN4Q0ksS0FBS0MsZUFBZSxFQUF1QjtZQUFyQkMsUUFBQUEsaUVBQVEsQ0FBQyxHQUFHQztRQUM5QixJQUFJTiwyREFBZ0JBLENBQUNLLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNGLElBQUksQ0FBQ0MsaUJBQWlCLENBQUMsR0FBR0M7UUFDMUM7UUFDQSxPQUFPLElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxVQUFVLENBQUMscUJBQXFDLE9BQWhCSixpQkFBZ0IsaUJBQWVLLDhCQUE4QjtZQUFFSjtZQUFPLEdBQUdDLE9BQU87UUFBQztJQUN6STtBQUNKO0FBQ08sTUFBTUcscUNBQXFDUix1REFBVUE7QUFDNUQ7QUFDQUMsWUFBWU8sNEJBQTRCLEdBQUdBLDhCQUMzQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy9jaGVja3BvaW50cy5tanM/NDY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3BhZ2luYXRpb24ubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hlY2twb2ludHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgbGlzdChmaW5lVHVuaW5nSm9iSWQsIHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfS9jaGVja3BvaW50c2AsIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbkNoZWNrcG9pbnRzLkZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2twb2ludHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJDdXJzb3JQYWdlIiwiQ2hlY2twb2ludHMiLCJsaXN0IiwiZmluZVR1bmluZ0pvYklkIiwicXVlcnkiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldEFQSUxpc3QiLCJGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuningJobEventsPage: function() { return /* binding */ FineTuningJobEventsPage; },\n/* harmony export */   FineTuningJobsPage: function() { return /* binding */ FineTuningJobsPage; },\n/* harmony export */   Jobs: function() { return /* binding */ Jobs; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checkpoints.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Jobs extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a fine-tuning job which begins the process of creating a new model from\n     * a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */ create(body, options) {\n        return this._client.post(\"/fine_tuning/jobs\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */ retrieve(fineTuningJobId, options) {\n        return this._client.get(\"/fine_tuning/jobs/\".concat(fineTuningJobId), options);\n    }\n    list() {\n        let query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, options = arguments.length > 1 ? arguments[1] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/fine_tuning/jobs\", FineTuningJobsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     */ cancel(fineTuningJobId, options) {\n        return this._client.post(\"/fine_tuning/jobs/\".concat(fineTuningJobId, \"/cancel\"), options);\n    }\n    listEvents(fineTuningJobId) {\n        let query = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, options = arguments.length > 2 ? arguments[2] : void 0;\n        if ((0,_core_mjs__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.listEvents(fineTuningJobId, {}, query);\n        }\n        return this._client.getAPIList(\"/fine_tuning/jobs/\".concat(fineTuningJobId, \"/events\"), FineTuningJobEventsPage, {\n            query,\n            ...options\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.checkpoints = new _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__.Checkpoints(this._client);\n    }\n}\nclass FineTuningJobsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\nclass FineTuningJobEventsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\nJobs.FineTuningJobsPage = FineTuningJobsPage;\nJobs.FineTuningJobEventsPage = FineTuningJobEventsPage;\nJobs.Checkpoints = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__.Checkpoints;\nJobs.FineTuningJobCheckpointsPage = _checkpoints_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTuningJobCheckpointsPage; //# sourceMappingURL=jobs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMvam9icy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHNGQUFzRjtBQUNsQztBQUNDO0FBQ0Q7QUFDMkI7QUFDMUI7QUFDOUMsTUFBTU0sYUFBYU4sc0RBQVdBO0lBS2pDOzs7Ozs7OztLQVFDLEdBQ0RPLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxxQkFBcUI7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDckU7SUFDQTs7OztLQUlDLEdBQ0RHLFNBQVNDLGVBQWUsRUFBRUosT0FBTyxFQUFFO1FBQy9CLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxxQkFBcUMsT0FBaEJELGtCQUFtQko7SUFDcEU7SUFDQU0sT0FBMEI7WUFBckJDLFFBQUFBLGlFQUFRLENBQUMsR0FBR1A7UUFDYixJQUFJUiwyREFBZ0JBLENBQUNlLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQyxDQUFDLEdBQUdDO1FBQ3pCO1FBQ0EsT0FBTyxJQUFJLENBQUNOLE9BQU8sQ0FBQ08sVUFBVSxDQUFDLHFCQUFxQkMsb0JBQW9CO1lBQUVGO1lBQU8sR0FBR1AsT0FBTztRQUFDO0lBQ2hHO0lBQ0E7O0tBRUMsR0FDRFUsT0FBT04sZUFBZSxFQUFFSixPQUFPLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHFCQUFxQyxPQUFoQkUsaUJBQWdCLFlBQVVKO0lBQzVFO0lBQ0FXLFdBQVdQLGVBQWUsRUFBdUI7WUFBckJHLFFBQUFBLGlFQUFRLENBQUMsR0FBR1A7UUFDcEMsSUFBSVIsMkRBQWdCQSxDQUFDZSxRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDSSxVQUFVLENBQUNQLGlCQUFpQixDQUFDLEdBQUdHO1FBQ2hEO1FBQ0EsT0FBTyxJQUFJLENBQUNOLE9BQU8sQ0FBQ08sVUFBVSxDQUFDLHFCQUFxQyxPQUFoQkosaUJBQWdCLFlBQVVRLHlCQUF5QjtZQUNuR0w7WUFDQSxHQUFHUCxPQUFPO1FBQ2Q7SUFDSjtJQTVDQWEsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJdEIseURBQTBCLENBQUMsSUFBSSxDQUFDUSxPQUFPO0lBQ2xFO0FBMENKO0FBQ08sTUFBTVEsMkJBQTJCYix1REFBVUE7QUFDbEQ7QUFDTyxNQUFNZ0IsZ0NBQWdDaEIsdURBQVVBO0FBQ3ZEO0FBQ0FDLEtBQUtZLGtCQUFrQixHQUFHQTtBQUMxQlosS0FBS2UsdUJBQXVCLEdBQUdBO0FBQy9CZixLQUFLSCxXQUFXLEdBQUdBLHlEQUFXQTtBQUM5QkcsS0FBS0YsNEJBQTRCLEdBQUdBLDBFQUE0QkEsRUFDaEUsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMvam9icy5tanM/OTgxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUubWpzXCI7XG5pbXBvcnQgKiBhcyBDaGVja3BvaW50c0FQSSBmcm9tIFwiLi9jaGVja3BvaW50cy5tanNcIjtcbmltcG9ydCB7IENoZWNrcG9pbnRzLCBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlLCB9IGZyb20gXCIuL2NoZWNrcG9pbnRzLm1qc1wiO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gXCIuLi8uLi8uLi9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEpvYnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hlY2twb2ludHMgPSBuZXcgQ2hlY2twb2ludHNBUEkuQ2hlY2twb2ludHModGhpcy5fY2xpZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZpbmUtdHVuaW5nIGpvYiB3aGljaCBiZWdpbnMgdGhlIHByb2Nlc3Mgb2YgY3JlYXRpbmcgYSBuZXcgbW9kZWwgZnJvbVxuICAgICAqIGEgZ2l2ZW4gZGF0YXNldC5cbiAgICAgKlxuICAgICAqIFJlc3BvbnNlIGluY2x1ZGVzIGRldGFpbHMgb2YgdGhlIGVucXVldWVkIGpvYiBpbmNsdWRpbmcgam9iIHN0YXR1cyBhbmQgdGhlIG5hbWVcbiAgICAgKiBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIFtMZWFybiBtb3JlIGFib3V0IGZpbmUtdHVuaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmluZV90dW5pbmcvam9icycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGluZm8gYWJvdXQgYSBmaW5lLXR1bmluZyBqb2IuXG4gICAgICpcbiAgICAgKiBbTGVhcm4gbW9yZSBhYm91dCBmaW5lLXR1bmluZ10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAqL1xuICAgIHJldHJpZXZlKGZpbmVUdW5pbmdKb2JJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9maW5lX3R1bmluZy9qb2JzJywgRmluZVR1bmluZ0pvYnNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbW1lZGlhdGVseSBjYW5jZWwgYSBmaW5lLXR1bmUgam9iLlxuICAgICAqL1xuICAgIGNhbmNlbChmaW5lVHVuaW5nSm9iSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGxpc3RFdmVudHMoZmluZVR1bmluZ0pvYklkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdEV2ZW50cyhmaW5lVHVuaW5nSm9iSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vZXZlbnRzYCwgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG5Kb2JzLkZpbmVUdW5pbmdKb2JzUGFnZSA9IEZpbmVUdW5pbmdKb2JzUGFnZTtcbkpvYnMuRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZTtcbkpvYnMuQ2hlY2twb2ludHMgPSBDaGVja3BvaW50cztcbkpvYnMuRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZSA9IEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qb2JzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiQ2hlY2twb2ludHNBUEkiLCJDaGVja3BvaW50cyIsIkZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UiLCJDdXJzb3JQYWdlIiwiSm9icyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJyZXRyaWV2ZSIsImZpbmVUdW5pbmdKb2JJZCIsImdldCIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJGaW5lVHVuaW5nSm9ic1BhZ2UiLCJjYW5jZWwiLCJsaXN0RXZlbnRzIiwiRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNoZWNrcG9pbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/images.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/images.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: function() { return /* binding */ Images; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Images extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a variation of a given image.\n     */ createVariation(body, options) {\n        return this._client.post(\"/images/variations\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Creates an edited or extended image given an original image and a prompt.\n     */ edit(body, options) {\n        return this._client.post(\"/images/edits\", _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Creates an image given a prompt.\n     */ generate(body, options) {\n        return this._client.post(\"/images/generations\", {\n            body,\n            ...options\n        });\n    }\n} //# sourceMappingURL=images.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ltYWdlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3hDO0FBQ1Y7QUFDN0IsTUFBTUUsZUFBZUYsc0RBQVdBO0lBQ25DOztLQUVDLEdBQ0RHLGdCQUFnQkMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLHNCQUFzQk4sa0VBQWdDLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDdkc7SUFDQTs7S0FFQyxHQUNESSxLQUFLTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsaUJBQWlCTixrRUFBZ0MsQ0FBQztZQUFFRztZQUFNLEdBQUdDLE9BQU87UUFBQztJQUNsRztJQUNBOztLQUVDLEdBQ0RLLFNBQVNOLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyx1QkFBdUI7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDdkU7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzPzZmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vY29yZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBJbWFnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHZhcmlhdGlvbiBvZiBhIGdpdmVuIGltYWdlLlxuICAgICAqL1xuICAgIGNyZWF0ZVZhcmlhdGlvbihib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ltYWdlcy92YXJpYXRpb25zJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxuICAgICAqL1xuICAgIGVkaXQoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvZWRpdHMnLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgICAqL1xuICAgIGdlbmVyYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2dlbmVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29yZSIsIkltYWdlcyIsImNyZWF0ZVZhcmlhdGlvbiIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJlZGl0IiwiZ2VuZXJhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/images.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/models.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/models.mjs ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: function() { return /* binding */ Models; },\n/* harmony export */   ModelsPage: function() { return /* binding */ ModelsPage; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pagination.mjs */ \"(app-pages-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Models extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */ retrieve(model, options) {\n        return this._client.get(\"/models/\".concat(model), options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */ list(options) {\n        return this._client.getAPIList(\"/models\", ModelsPage, options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */ del(model, options) {\n        return this._client.delete(\"/models/\".concat(model), options);\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class ModelsPage extends _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page {\n}\nModels.ModelsPage = ModelsPage; //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHNGQUFzRjtBQUN4QztBQUNMO0FBQ2xDLE1BQU1FLGVBQWVGLHNEQUFXQTtJQUNuQzs7O0tBR0MsR0FDREcsU0FBU0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFdBQWlCLE9BQU5ILFFBQVNDO0lBQ2hEO0lBQ0E7OztLQUdDLEdBQ0RHLEtBQUtILE9BQU8sRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNHLFVBQVUsQ0FBQyxXQUFXQyxZQUFZTDtJQUMxRDtJQUNBOzs7S0FHQyxHQUNETSxJQUFJUCxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDTSxNQUFNLENBQUMsV0FBaUIsT0FBTlIsUUFBU0M7SUFDbkQ7QUFDSjtBQUNBOztDQUVDLEdBQ00sTUFBTUssbUJBQW1CVCxpREFBSUE7QUFDcEM7QUFDQUMsT0FBT1EsVUFBVSxHQUFHQSxZQUNwQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZWxzLm1qcz9mN2EyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi5tanNcIjtcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kZWwgc3VjaCBhc1xuICAgICAqIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgKi9cbiAgICByZXRyaWV2ZShtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL21vZGVscy8ke21vZGVsfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBtb2RlbHMsIGFuZCBwcm92aWRlcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBlYWNoXG4gICAgICogb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICovXG4gICAgbGlzdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL21vZGVscycsIE1vZGVsc1BhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uIHRvXG4gICAgICogZGVsZXRlIGEgbW9kZWwuXG4gICAgICovXG4gICAgZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvbW9kZWxzLyR7bW9kZWx9YCwgb3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RlbHNQYWdlIGV4dGVuZHMgUGFnZSB7XG59XG5Nb2RlbHMuTW9kZWxzUGFnZSA9IE1vZGVsc1BhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlBhZ2UiLCJNb2RlbHMiLCJyZXRyaWV2ZSIsIm1vZGVsIiwib3B0aW9ucyIsIl9jbGllbnQiLCJnZXQiLCJsaXN0IiwiZ2V0QVBJTGlzdCIsIk1vZGVsc1BhZ2UiLCJkZWwiLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/models.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/moderations.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/moderations.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: function() { return /* binding */ Moderations; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass Moderations extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Classifies if text and/or image inputs are potentially harmful. Learn more in\n     * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n     */ create(body, options) {\n        return this._client.post(\"/moderations\", {\n            body,\n            ...options\n        });\n    }\n} //# sourceMappingURL=moderations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVyYXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNGQUFzRjtBQUN4QztBQUN2QyxNQUFNQyxvQkFBb0JELHNEQUFXQTtJQUN4Qzs7O0tBR0MsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGdCQUFnQjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUNoRTtBQUNKLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVyYXRpb25zLm1qcz9hZmU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBNb2RlcmF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDbGFzc2lmaWVzIGlmIHRleHQgYW5kL29yIGltYWdlIGlucHV0cyBhcmUgcG90ZW50aWFsbHkgaGFybWZ1bC4gTGVhcm4gbW9yZSBpblxuICAgICAqIHRoZSBbbW9kZXJhdGlvbiBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL21vZGVyYXRpb24pLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL21vZGVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVyYXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJNb2RlcmF0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/moderations.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/uploads/parts.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/parts.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parts: function() { return /* binding */ Parts; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core.mjs */ \"(app-pages-browser)/./node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Parts extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Adds a\n     * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n     * A Part represents a chunk of bytes from the file you are trying to upload.\n     *\n     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n     * maximum of 8 GB.\n     *\n     * It is possible to add multiple Parts in parallel. You can decide the intended\n     * order of the Parts when you\n     * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n     */ create(uploadId, body, options) {\n        return this._client.post(\"/uploads/\".concat(uploadId, \"/parts\"), _core_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions({\n            body,\n            ...options\n        }));\n    }\n} //# sourceMappingURL=parts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3VwbG9hZHMvcGFydHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUFzRjtBQUNyQztBQUNWO0FBQ2hDLE1BQU1FLGNBQWNGLHNEQUFXQTtJQUNsQzs7Ozs7Ozs7Ozs7O0tBWUMsR0FDREcsT0FBT0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsWUFBcUIsT0FBVEosVUFBUyxXQUFTSCxrRUFBZ0MsQ0FBQztZQUFFSTtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUMvRztBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3VwbG9hZHMvcGFydHMubWpzP2JkNzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiLi4vLi4vY29yZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBQYXJ0cyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBBZGRzIGFcbiAgICAgKiBbUGFydF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL3BhcnQtb2JqZWN0KSB0byBhblxuICAgICAqIFtVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9vYmplY3QpIG9iamVjdC5cbiAgICAgKiBBIFBhcnQgcmVwcmVzZW50cyBhIGNodW5rIG9mIGJ5dGVzIGZyb20gdGhlIGZpbGUgeW91IGFyZSB0cnlpbmcgdG8gdXBsb2FkLlxuICAgICAqXG4gICAgICogRWFjaCBQYXJ0IGNhbiBiZSBhdCBtb3N0IDY0IE1CLCBhbmQgeW91IGNhbiBhZGQgUGFydHMgdW50aWwgeW91IGhpdCB0aGUgVXBsb2FkXG4gICAgICogbWF4aW11bSBvZiA4IEdCLlxuICAgICAqXG4gICAgICogSXQgaXMgcG9zc2libGUgdG8gYWRkIG11bHRpcGxlIFBhcnRzIGluIHBhcmFsbGVsLiBZb3UgY2FuIGRlY2lkZSB0aGUgaW50ZW5kZWRcbiAgICAgKiBvcmRlciBvZiB0aGUgUGFydHMgd2hlbiB5b3VcbiAgICAgKiBbY29tcGxldGUgdGhlIFVwbG9hZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL2NvbXBsZXRlKS5cbiAgICAgKi9cbiAgICBjcmVhdGUodXBsb2FkSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdXBsb2Fkcy8ke3VwbG9hZElkfS9wYXJ0c2AsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvcmUiLCJQYXJ0cyIsImNyZWF0ZSIsInVwbG9hZElkIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/uploads/parts.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/resources/uploads/uploads.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/openai/resources/uploads/uploads.mjs ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Uploads: function() { return /* binding */ Uploads; }\n/* harmony export */ });\n/* harmony import */ var _resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource.mjs */ \"(app-pages-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var _parts_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parts.mjs */ \"(app-pages-browser)/./node_modules/openai/resources/uploads/parts.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\nclass Uploads extends _resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates an intermediate\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n     * that you can add\n     * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n     * Currently, an Upload can accept at most 8 GB in total and expires after an hour\n     * after you create it.\n     *\n     * Once you complete the Upload, we will create a\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * contains all the parts you uploaded. This File is usable in the rest of our\n     * platform as a regular File object.\n     *\n     * For certain `purpose`s, the correct `mime_type` must be specified. Please refer\n     * to documentation for the supported MIME types for your use case:\n     *\n     * - [Assistants](https://platform.openai.com/docs/assistants/tools/file-search#supported-files)\n     *\n     * For guidance on the proper filename extensions for each purpose, please follow\n     * the documentation on\n     * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n     */ create(body, options) {\n        return this._client.post(\"/uploads\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Cancels the Upload. No Parts may be added after an Upload is cancelled.\n     */ cancel(uploadId, options) {\n        return this._client.post(\"/uploads/\".concat(uploadId, \"/cancel\"), options);\n    }\n    /**\n     * Completes the\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n     *\n     * Within the returned Upload object, there is a nested\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * is ready to use in the rest of the platform.\n     *\n     * You can specify the order of the Parts by passing in an ordered list of the Part\n     * IDs.\n     *\n     * The number of bytes uploaded upon completion must match the number of bytes\n     * initially specified when creating the Upload object. No Parts may be added after\n     * an Upload is completed.\n     */ complete(uploadId, body, options) {\n        return this._client.post(\"/uploads/\".concat(uploadId, \"/complete\"), {\n            body,\n            ...options\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.parts = new _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts(this._client);\n    }\n}\nUploads.Parts = _parts_mjs__WEBPACK_IMPORTED_MODULE_1__.Parts; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3VwbG9hZHMvdXBsb2Fkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0ZBQXNGO0FBQ3JDO0FBQ1Q7QUFDSjtBQUM3QixNQUFNRyxnQkFBZ0JILHNEQUFXQTtJQUtwQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBcUJDLEdBQ0RJLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxZQUFZO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzVEO0lBQ0E7O0tBRUMsR0FDREcsT0FBT0MsUUFBUSxFQUFFSixPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFlBQXFCLE9BQVRFLFVBQVMsWUFBVUo7SUFDNUQ7SUFDQTs7Ozs7Ozs7Ozs7Ozs7S0FjQyxHQUNESyxTQUFTRCxRQUFRLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzlCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxZQUFxQixPQUFURSxVQUFTLGNBQVk7WUFBRUw7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDakY7SUFwREFNLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSWIsNkNBQWMsQ0FBQyxJQUFJLENBQUNNLE9BQU87SUFDaEQ7QUFrREo7QUFDQUosUUFBUUQsS0FBSyxHQUFHQSw2Q0FBS0EsRUFDckIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3VwbG9hZHMvdXBsb2Fkcy5tanM/YzIxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBQYXJ0c0FQSSBmcm9tIFwiLi9wYXJ0cy5tanNcIjtcbmltcG9ydCB7IFBhcnRzIH0gZnJvbSBcIi4vcGFydHMubWpzXCI7XG5leHBvcnQgY2xhc3MgVXBsb2FkcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5wYXJ0cyA9IG5ldyBQYXJ0c0FQSS5QYXJ0cyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGludGVybWVkaWF0ZVxuICAgICAqIFtVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9vYmplY3QpIG9iamVjdFxuICAgICAqIHRoYXQgeW91IGNhbiBhZGRcbiAgICAgKiBbUGFydHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9wYXJ0LW9iamVjdCkgdG8uXG4gICAgICogQ3VycmVudGx5LCBhbiBVcGxvYWQgY2FuIGFjY2VwdCBhdCBtb3N0IDggR0IgaW4gdG90YWwgYW5kIGV4cGlyZXMgYWZ0ZXIgYW4gaG91clxuICAgICAqIGFmdGVyIHlvdSBjcmVhdGUgaXQuXG4gICAgICpcbiAgICAgKiBPbmNlIHlvdSBjb21wbGV0ZSB0aGUgVXBsb2FkLCB3ZSB3aWxsIGNyZWF0ZSBhXG4gICAgICogW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvb2JqZWN0KSBvYmplY3QgdGhhdFxuICAgICAqIGNvbnRhaW5zIGFsbCB0aGUgcGFydHMgeW91IHVwbG9hZGVkLiBUaGlzIEZpbGUgaXMgdXNhYmxlIGluIHRoZSByZXN0IG9mIG91clxuICAgICAqIHBsYXRmb3JtIGFzIGEgcmVndWxhciBGaWxlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEZvciBjZXJ0YWluIGBwdXJwb3NlYHMsIHRoZSBjb3JyZWN0IGBtaW1lX3R5cGVgIG11c3QgYmUgc3BlY2lmaWVkLiBQbGVhc2UgcmVmZXJcbiAgICAgKiB0byBkb2N1bWVudGF0aW9uIGZvciB0aGUgc3VwcG9ydGVkIE1JTUUgdHlwZXMgZm9yIHlvdXIgdXNlIGNhc2U6XG4gICAgICpcbiAgICAgKiAtIFtBc3Npc3RhbnRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hc3Npc3RhbnRzL3Rvb2xzL2ZpbGUtc2VhcmNoI3N1cHBvcnRlZC1maWxlcylcbiAgICAgKlxuICAgICAqIEZvciBndWlkYW5jZSBvbiB0aGUgcHJvcGVyIGZpbGVuYW1lIGV4dGVuc2lvbnMgZm9yIGVhY2ggcHVycG9zZSwgcGxlYXNlIGZvbGxvd1xuICAgICAqIHRoZSBkb2N1bWVudGF0aW9uIG9uXG4gICAgICogW2NyZWF0aW5nIGEgRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9jcmVhdGUpLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3VwbG9hZHMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgdGhlIFVwbG9hZC4gTm8gUGFydHMgbWF5IGJlIGFkZGVkIGFmdGVyIGFuIFVwbG9hZCBpcyBjYW5jZWxsZWQuXG4gICAgICovXG4gICAgY2FuY2VsKHVwbG9hZElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3VwbG9hZHMvJHt1cGxvYWRJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBsZXRlcyB0aGVcbiAgICAgKiBbVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIFdpdGhpbiB0aGUgcmV0dXJuZWQgVXBsb2FkIG9iamVjdCwgdGhlcmUgaXMgYSBuZXN0ZWRcbiAgICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9vYmplY3QpIG9iamVjdCB0aGF0XG4gICAgICogaXMgcmVhZHkgdG8gdXNlIGluIHRoZSByZXN0IG9mIHRoZSBwbGF0Zm9ybS5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gc3BlY2lmeSB0aGUgb3JkZXIgb2YgdGhlIFBhcnRzIGJ5IHBhc3NpbmcgaW4gYW4gb3JkZXJlZCBsaXN0IG9mIHRoZSBQYXJ0XG4gICAgICogSURzLlxuICAgICAqXG4gICAgICogVGhlIG51bWJlciBvZiBieXRlcyB1cGxvYWRlZCB1cG9uIGNvbXBsZXRpb24gbXVzdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4gICAgICogaW5pdGlhbGx5IHNwZWNpZmllZCB3aGVuIGNyZWF0aW5nIHRoZSBVcGxvYWQgb2JqZWN0LiBObyBQYXJ0cyBtYXkgYmUgYWRkZWQgYWZ0ZXJcbiAgICAgKiBhbiBVcGxvYWQgaXMgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGNvbXBsZXRlKHVwbG9hZElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3VwbG9hZHMvJHt1cGxvYWRJZH0vY29tcGxldGVgLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuVXBsb2Fkcy5QYXJ0cyA9IFBhcnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBsb2Fkcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGFydHNBUEkiLCJQYXJ0cyIsIlVwbG9hZHMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiY2FuY2VsIiwidXBsb2FkSWQiLCJjb21wbGV0ZSIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicGFydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/resources/uploads/uploads.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/streaming.mjs":
/*!*******************************************!*\
  !*** ./node_modules/openai/streaming.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: function() { return /* binding */ Stream; },\n/* harmony export */   _decodeChunks: function() { return /* binding */ _decodeChunks; },\n/* harmony export */   _iterSSEMessages: function() { return /* binding */ _iterSSEMessages; }\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(app-pages-browser)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(app-pages-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/decoders/line.mjs */ \"(app-pages-browser)/./node_modules/openai/internal/decoders/line.mjs\");\n/* harmony import */ var _internal_stream_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/stream-utils.mjs */ \"(app-pages-browser)/./node_modules/openai/internal/stream-utils.mjs\");\n\n\n\n\n\nclass Stream {\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)){\n                    if (done) continue;\n                    if (sse.data.startsWith(\"[DONE]\")) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(\"Could not parse message into JSON:\", sse.data);\n                            console.error(\"From chunk:\", sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, undefined, undefined);\n                        }\n                        yield data;\n                    } else {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(\"Could not parse message into JSON:\", sse.data);\n                            console.error(\"From chunk:\", sse.raw);\n                            throw e;\n                        }\n                        // TODO: Is this where the error should be thrown?\n                        if (sse.event == \"error\") {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, data.message, undefined);\n                        }\n                        yield {\n                            event: sse.event,\n                            data: data\n                        };\n                    }\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */ static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n            const iter = (0,_internal_stream_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.ReadableStreamToAsyncIterable)(readableStream);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()){\n                    if (done) continue;\n                    if (line) yield JSON.parse(line);\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */ tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue)=>{\n            return {\n                next: ()=>{\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                }\n            };\n        };\n        return [\n            new Stream(()=>teeIterator(left), this.controller),\n            new Stream(()=>teeIterator(right), this.controller)\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */ toReadableStream() {\n        const self = this;\n        let iter;\n        const encoder = new TextEncoder();\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream({\n            async start () {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull (ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done) return ctrl.close();\n                    const bytes = encoder.encode(JSON.stringify(value) + \"\\n\");\n                    ctrl.enqueue(bytes);\n                } catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel () {\n                var _iter_return;\n                await ((_iter_return = iter.return) === null || _iter_return === void 0 ? void 0 : _iter_return.call(iter));\n            }\n        });\n    }\n    constructor(iterator, controller){\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n}\nasync function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"Attempted to iterate over a response with no body\");\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n    const iter = (0,_internal_stream_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.ReadableStreamToAsyncIterable)(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)){\n        for (const line of lineDecoder.decode(sseChunk)){\n            const sse = sseDecoder.decode(line);\n            if (sse) yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()){\n        const sse = sseDecoder.decode(line);\n        if (sse) yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */ async function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator){\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === \"string\" ? new TextEncoder().encode(chunk) : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while((patternIndex = findDoubleNewlineIndex(data)) !== -1){\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nfunction findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for(let i = 0; i < buffer.length - 2; i++){\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n}\nclass SSEDecoder {\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n}\n/** This is an internal helper function that's just used for testing */ function _decodeChunks(chunks) {\n    const decoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n    const lines = [];\n    for (const chunk of chunks){\n        lines.push(...decoder.decode(chunk));\n    }\n    return lines;\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/streaming.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/uploads.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/uploads.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createForm: function() { return /* binding */ createForm; },\n/* harmony export */   fileFromPath: function() { return /* reexport safe */ _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath; },\n/* harmony export */   isBlobLike: function() { return /* binding */ isBlobLike; },\n/* harmony export */   isFileLike: function() { return /* binding */ isFileLike; },\n/* harmony export */   isMultipartBody: function() { return /* binding */ isMultipartBody; },\n/* harmony export */   isResponseLike: function() { return /* binding */ isResponseLike; },\n/* harmony export */   isUploadable: function() { return /* binding */ isUploadable; },\n/* harmony export */   maybeMultipartFormRequestOptions: function() { return /* binding */ maybeMultipartFormRequestOptions; },\n/* harmony export */   multipartFormRequestOptions: function() { return /* binding */ multipartFormRequestOptions; },\n/* harmony export */   toFile: function() { return /* binding */ toFile; }\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(app-pages-browser)/./node_modules/openai/_shims/index.mjs\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/../../node_modules/buffer/index.js\")[\"Buffer\"];\n\n\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\nconst isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\nconst isUploadable = (value)=>{\n    return isFileLike(value) || isResponseLike(value) || (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream)(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options) {\n    // If it's a promise, resolve it.\n    value = await value;\n    // If we've been given a `File` we don't need to do anything\n    if (isFileLike(value)) {\n        return value;\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        var _pathname_split_pop;\n        name || (name = (_pathname_split_pop = new URL(value.url).pathname.split(/[\\\\/]/).pop()) !== null && _pathname_split_pop !== void 0 ? _pathname_split_pop : \"unknown_file\");\n        // we need to convert the `Blob` into an array buffer because the `Blob` class\n        // that `node-fetch` defines is incompatible with the web standard which results\n        // in `new File` interpreting it as a string instead of binary data.\n        const data = isBlobLike(blob) ? [\n            await blob.arrayBuffer()\n        ] : [\n            blob\n        ];\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(data, name, options);\n    }\n    const bits = await getBytes(value);\n    var _getName;\n    name || (name = (_getName = getName(value)) !== null && _getName !== void 0 ? _getName : \"unknown_file\");\n    if (!(options === null || options === void 0 ? void 0 : options.type)) {\n        var _bits_;\n        const type = (_bits_ = bits[0]) === null || _bits_ === void 0 ? void 0 : _bits_.type;\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(chunk); // TODO, consider validating?\n        }\n    } else {\n        var _value_constructor;\n        throw new Error(\"Unexpected data type: \".concat(typeof value, \"; constructor: \").concat(value === null || value === void 0 ? void 0 : (_value_constructor = value.constructor) === null || _value_constructor === void 0 ? void 0 : _value_constructor.name, \"; props: \").concat(propsForError(value)));\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return \"[\".concat(props.map((p)=>'\"'.concat(p, '\"')).join(\", \"), \"]\");\n}\nfunction getName(value) {\n    var // For fs.ReadStream\n    _getStringFromMaybeBuffer;\n    return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || ((_getStringFromMaybeBuffer = getStringFromMaybeBuffer(value.path)) === null || _getStringFromMaybeBuffer === void 0 ? void 0 : _getStringFromMaybeBuffer.split(/[\\\\/]/).pop());\n}\nconst getStringFromMaybeBuffer = (x)=>{\n    if (typeof x === \"string\") return x;\n    if (typeof Buffer !== \"undefined\" && x instanceof Buffer) return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\nconst isMultipartBody = (body)=>body && typeof body === \"object\" && body.body && body[Symbol.toStringTag] === \"MultipartBody\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst multipartFormRequestOptions = async (opts)=>{\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst createForm = async (body)=>{\n    const form = new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData();\n    await Promise.all(Object.entries(body || {}).map((param)=>{\n        let [key, value] = param;\n        return addFormValue(form, key, value);\n    }));\n    return form;\n};\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError('Received null for \"'.concat(key, \"\\\"; to pass null in FormData, you must use the string 'null'\"));\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map((param)=>{\n            let [name, prop] = param;\n            return addFormValue(form, \"\".concat(key, \"[\").concat(name, \"]\"), prop);\n        }));\n    } else {\n        throw new TypeError(\"Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got \".concat(value, \" instead\"));\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvdXBsb2Fkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQWlHO0FBQy9DO0FBQzNDLE1BQU1LLGlCQUFpQixDQUFDQyxRQUFVQSxTQUFTLFFBQzlDLE9BQU9BLFVBQVUsWUFDakIsT0FBT0EsTUFBTUMsR0FBRyxLQUFLLFlBQ3JCLE9BQU9ELE1BQU1FLElBQUksS0FBSyxXQUFXO0FBQzlCLE1BQU1DLGFBQWEsQ0FBQ0gsUUFBVUEsU0FBUyxRQUMxQyxPQUFPQSxVQUFVLFlBQ2pCLE9BQU9BLE1BQU1JLElBQUksS0FBSyxZQUN0QixPQUFPSixNQUFNSyxZQUFZLEtBQUssWUFDOUJDLFdBQVdOLE9BQU87QUFDdEI7OztDQUdDLEdBQ00sTUFBTU0sYUFBYSxDQUFDTixRQUFVQSxTQUFTLFFBQzFDLE9BQU9BLFVBQVUsWUFDakIsT0FBT0EsTUFBTU8sSUFBSSxLQUFLLFlBQ3RCLE9BQU9QLE1BQU1RLElBQUksS0FBSyxZQUN0QixPQUFPUixNQUFNUyxJQUFJLEtBQUssY0FDdEIsT0FBT1QsTUFBTVUsS0FBSyxLQUFLLGNBQ3ZCLE9BQU9WLE1BQU1XLFdBQVcsS0FBSyxXQUFXO0FBQ3JDLE1BQU1DLGVBQWUsQ0FBQ1o7SUFDekIsT0FBT0csV0FBV0gsVUFBVUQsZUFBZUMsVUFBVUgsZ0VBQWNBLENBQUNHO0FBQ3hFLEVBQUU7QUFDRjs7Ozs7Ozs7Q0FRQyxHQUNNLGVBQWVhLE9BQU9iLEtBQUssRUFBRUksSUFBSSxFQUFFVSxPQUFPO0lBQzdDLGlDQUFpQztJQUNqQ2QsUUFBUSxNQUFNQTtJQUNkLDREQUE0RDtJQUM1RCxJQUFJRyxXQUFXSCxRQUFRO1FBQ25CLE9BQU9BO0lBQ1g7SUFDQSxJQUFJRCxlQUFlQyxRQUFRO1FBQ3ZCLE1BQU1FLE9BQU8sTUFBTUYsTUFBTUUsSUFBSTtZQUNiO1FBQWhCRSxRQUFTQSxDQUFBQSxPQUFPLDJCQUFJVyxJQUFJZixNQUFNQyxHQUFHLEVBQUVlLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDLFNBQVNDLEdBQUcsZ0JBQTlDLHVEQUFvRCxjQUFhO1FBQ2pGLDhFQUE4RTtRQUM5RSxnRkFBZ0Y7UUFDaEYsb0VBQW9FO1FBQ3BFLE1BQU1DLE9BQU9iLFdBQVdKLFFBQVE7WUFBRSxNQUFNQSxLQUFLUyxXQUFXO1NBQUksR0FBRztZQUFDVDtTQUFLO1FBQ3JFLE9BQU8sSUFBSVAsa0RBQUlBLENBQUN3QixNQUFNZixNQUFNVTtJQUNoQztJQUNBLE1BQU1NLE9BQU8sTUFBTUMsU0FBU3JCO1FBQ1pzQjtJQUFoQmxCLFFBQVNBLENBQUFBLE9BQU9rQixDQUFBQSxXQUFBQSxRQUFRdEIsb0JBQVJzQixzQkFBQUEsV0FBa0IsY0FBYTtJQUMvQyxJQUFJLEVBQUNSLG9CQUFBQSw4QkFBQUEsUUFBU04sSUFBSSxHQUFFO1lBQ0hZO1FBQWIsTUFBTVosUUFBT1ksU0FBQUEsSUFBSSxDQUFDLEVBQUUsY0FBUEEsNkJBQUFBLE9BQVNaLElBQUk7UUFDMUIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7WUFDMUJNLFVBQVU7Z0JBQUUsR0FBR0EsT0FBTztnQkFBRU47WUFBSztRQUNqQztJQUNKO0lBQ0EsT0FBTyxJQUFJYixrREFBSUEsQ0FBQ3lCLE1BQU1oQixNQUFNVTtBQUNoQztBQUNBLGVBQWVPLFNBQVNyQixLQUFLO0lBQ3pCLElBQUl1QixRQUFRLEVBQUU7SUFDZCxJQUFJLE9BQU92QixVQUFVLFlBQ2pCd0IsWUFBWUMsTUFBTSxDQUFDekIsVUFBVSxvQ0FBb0M7SUFDakVBLGlCQUFpQndCLGFBQWE7UUFDOUJELE1BQU1HLElBQUksQ0FBQzFCO0lBQ2YsT0FDSyxJQUFJTSxXQUFXTixRQUFRO1FBQ3hCdUIsTUFBTUcsSUFBSSxDQUFDLE1BQU0xQixNQUFNVyxXQUFXO0lBQ3RDLE9BQ0ssSUFBSWdCLHdCQUF3QjNCLE9BQU8sMENBQTBDO01BQ2hGO1FBQ0UsV0FBVyxNQUFNNEIsU0FBUzVCLE1BQU87WUFDN0J1QixNQUFNRyxJQUFJLENBQUNFLFFBQVEsNkJBQTZCO1FBQ3BEO0lBQ0osT0FDSztZQUNzRTVCO1FBQXZFLE1BQU0sSUFBSTZCLE1BQU0sZ0NBQXlCLE9BQU83QixPQUFNLG1CQUNoQzhCLE9BRGlEOUIsa0JBQUFBLDZCQUFBQSxxQkFBQUEsTUFBTytCLFdBQVcsY0FBbEIvQix5Q0FBQUEsbUJBQ2pFSSxJQUFJLEVBQUMsYUFBZ0MsT0FBckIwQixjQUFjOUI7SUFDeEM7SUFDQSxPQUFPdUI7QUFDWDtBQUNBLFNBQVNPLGNBQWM5QixLQUFLO0lBQ3hCLE1BQU1nQyxRQUFRQyxPQUFPQyxtQkFBbUIsQ0FBQ2xDO0lBQ3pDLE9BQU8sSUFBMEMsT0FBdENnQyxNQUFNRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxJQUFNLE9BQUZBLEdBQUUsTUFBSUMsSUFBSSxDQUFDLE9BQU07QUFDckQ7QUFDQSxTQUFTZixRQUFRdEIsS0FBSztRQUdkLG9CQUFvQjtJQUNwQnNDO0lBSEosT0FBUUEseUJBQXlCdEMsTUFBTUksSUFBSSxLQUN2Q2tDLHlCQUF5QnRDLE1BQU11QyxRQUFRLE9BRXZDRCw0QkFBQUEseUJBQXlCdEMsTUFBTXdDLElBQUksZUFBbkNGLGdEQUFBQSwwQkFBc0NyQixLQUFLLENBQUMsU0FBU0MsR0FBRztBQUNoRTtBQUNBLE1BQU1vQiwyQkFBMkIsQ0FBQ0c7SUFDOUIsSUFBSSxPQUFPQSxNQUFNLFVBQ2IsT0FBT0E7SUFDWCxJQUFJLE9BQU9DLE1BQU1BLEtBQUssZUFBZUQsYUFBYUMsTUFBTUEsRUFDcEQsT0FBT0MsT0FBT0Y7SUFDbEIsT0FBT0c7QUFDWDtBQUNBLE1BQU1qQiwwQkFBMEIsQ0FBQzNCLFFBQVVBLFNBQVMsUUFBUSxPQUFPQSxVQUFVLFlBQVksT0FBT0EsS0FBSyxDQUFDNkMsT0FBT0MsYUFBYSxDQUFDLEtBQUs7QUFDekgsTUFBTUMsa0JBQWtCLENBQUNDLE9BQVNBLFFBQVEsT0FBT0EsU0FBUyxZQUFZQSxLQUFLQSxJQUFJLElBQUlBLElBQUksQ0FBQ0gsT0FBT0ksV0FBVyxDQUFDLEtBQUssZ0JBQWdCO0FBQ3ZJOzs7Q0FHQyxHQUNNLE1BQU1DLG1DQUFtQyxPQUFPQztJQUNuRCxJQUFJLENBQUNDLG1CQUFtQkQsS0FBS0gsSUFBSSxHQUM3QixPQUFPRztJQUNYLE1BQU1FLE9BQU8sTUFBTUMsV0FBV0gsS0FBS0gsSUFBSTtJQUN2QyxPQUFPcEQsNEVBQTBCQSxDQUFDeUQsTUFBTUY7QUFDNUMsRUFBRTtBQUNLLE1BQU1JLDhCQUE4QixPQUFPSjtJQUM5QyxNQUFNRSxPQUFPLE1BQU1DLFdBQVdILEtBQUtILElBQUk7SUFDdkMsT0FBT3BELDRFQUEwQkEsQ0FBQ3lELE1BQU1GO0FBQzVDLEVBQUU7QUFDSyxNQUFNRyxhQUFhLE9BQU9OO0lBQzdCLE1BQU1LLE9BQU8sSUFBSTNELHNEQUFRQTtJQUN6QixNQUFNOEQsUUFBUUMsR0FBRyxDQUFDeEIsT0FBT3lCLE9BQU8sQ0FBQ1YsUUFBUSxDQUFDLEdBQUdiLEdBQUcsQ0FBQztZQUFDLENBQUN3QixLQUFLM0QsTUFBTTtlQUFLNEQsYUFBYVAsTUFBTU0sS0FBSzNEOztJQUMzRixPQUFPcUQ7QUFDWCxFQUFFO0FBQ0YsTUFBTUQscUJBQXFCLENBQUNwRDtJQUN4QixJQUFJWSxhQUFhWixRQUNiLE9BQU87SUFDWCxJQUFJNkQsTUFBTUMsT0FBTyxDQUFDOUQsUUFDZCxPQUFPQSxNQUFNK0QsSUFBSSxDQUFDWDtJQUN0QixJQUFJcEQsU0FBUyxPQUFPQSxVQUFVLFVBQVU7UUFDcEMsSUFBSyxNQUFNZ0UsS0FBS2hFLE1BQU87WUFDbkIsSUFBSW9ELG1CQUFtQnBELEtBQUssQ0FBQ2dFLEVBQUUsR0FDM0IsT0FBTztRQUNmO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFDQSxNQUFNSixlQUFlLE9BQU9QLE1BQU1NLEtBQUszRDtJQUNuQyxJQUFJQSxVQUFVNEMsV0FDVjtJQUNKLElBQUk1QyxTQUFTLE1BQU07UUFDZixNQUFNLElBQUlpRSxVQUFVLHNCQUEwQixPQUFKTixLQUFJO0lBQ2xEO0lBQ0EseUNBQXlDO0lBQ3pDLElBQUksT0FBTzNELFVBQVUsWUFBWSxPQUFPQSxVQUFVLFlBQVksT0FBT0EsVUFBVSxXQUFXO1FBQ3RGcUQsS0FBS2EsTUFBTSxDQUFDUCxLQUFLaEIsT0FBTzNDO0lBQzVCLE9BQ0ssSUFBSVksYUFBYVosUUFBUTtRQUMxQixNQUFNbUUsT0FBTyxNQUFNdEQsT0FBT2I7UUFDMUJxRCxLQUFLYSxNQUFNLENBQUNQLEtBQUtRO0lBQ3JCLE9BQ0ssSUFBSU4sTUFBTUMsT0FBTyxDQUFDOUQsUUFBUTtRQUMzQixNQUFNd0QsUUFBUUMsR0FBRyxDQUFDekQsTUFBTW1DLEdBQUcsQ0FBQyxDQUFDaUMsUUFBVVIsYUFBYVAsTUFBTU0sTUFBTSxNQUFNUztJQUMxRSxPQUNLLElBQUksT0FBT3BFLFVBQVUsVUFBVTtRQUNoQyxNQUFNd0QsUUFBUUMsR0FBRyxDQUFDeEIsT0FBT3lCLE9BQU8sQ0FBQzFELE9BQU9tQyxHQUFHLENBQUM7Z0JBQUMsQ0FBQy9CLE1BQU1pRSxLQUFLO21CQUFLVCxhQUFhUCxNQUFNLEdBQVVqRCxPQUFQdUQsS0FBSSxLQUFRLE9BQUx2RCxNQUFLLE1BQUlpRTs7SUFDeEcsT0FDSztRQUNELE1BQU0sSUFBSUosVUFBVSx3R0FBOEcsT0FBTmpFLE9BQU07SUFDdEk7QUFDSixHQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvb3BlbmFpL3VwbG9hZHMubWpzPzE2MDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybURhdGEsIEZpbGUsIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zLCBpc0ZzUmVhZFN0cmVhbSwgfSBmcm9tIFwiLi9fc2hpbXMvaW5kZXgubWpzXCI7XG5leHBvcnQgeyBmaWxlRnJvbVBhdGggfSBmcm9tIFwiLi9fc2hpbXMvaW5kZXgubWpzXCI7XG5leHBvcnQgY29uc3QgaXNSZXNwb25zZUxpa2UgPSAodmFsdWUpID0+IHZhbHVlICE9IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIHZhbHVlLnVybCA9PT0gJ3N0cmluZycgJiZcbiAgICB0eXBlb2YgdmFsdWUuYmxvYiA9PT0gJ2Z1bmN0aW9uJztcbmV4cG9ydCBjb25zdCBpc0ZpbGVMaWtlID0gKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5uYW1lID09PSAnc3RyaW5nJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5sYXN0TW9kaWZpZWQgPT09ICdudW1iZXInICYmXG4gICAgaXNCbG9iTGlrZSh2YWx1ZSk7XG4vKipcbiAqIFRoZSBCbG9iTGlrZSB0eXBlIG9taXRzIGFycmF5QnVmZmVyKCkgYmVjYXVzZSBAdHlwZXMvbm9kZS1mZXRjaEBeMi42LjQgbGFja3MgaXQ7IGJ1dCB0aGlzIGNoZWNrXG4gKiBhZGRzIHRoZSBhcnJheUJ1ZmZlcigpIG1ldGhvZCB0eXBlIGJlY2F1c2UgaXQgaXMgYXZhaWxhYmxlIGFuZCB1c2VkIGF0IHJ1bnRpbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQmxvYkxpa2UgPSAodmFsdWUpID0+IHZhbHVlICE9IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIHZhbHVlLnNpemUgPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnICYmXG4gICAgdHlwZW9mIHZhbHVlLnRleHQgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsdWUuc2xpY2UgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsdWUuYXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5leHBvcnQgY29uc3QgaXNVcGxvYWRhYmxlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGlzRmlsZUxpa2UodmFsdWUpIHx8IGlzUmVzcG9uc2VMaWtlKHZhbHVlKSB8fCBpc0ZzUmVhZFN0cmVhbSh2YWx1ZSk7XG59O1xuLyoqXG4gKiBIZWxwZXIgZm9yIGNyZWF0aW5nIGEge0BsaW5rIEZpbGV9IHRvIHBhc3MgdG8gYW4gU0RLIHVwbG9hZCBtZXRob2QgZnJvbSBhIHZhcmlldHkgb2YgZGlmZmVyZW50IGRhdGEgZm9ybWF0c1xuICogQHBhcmFtIHZhbHVlIHRoZSByYXcgY29udGVudCBvZiB0aGUgZmlsZS4gIENhbiBiZSBhbiB7QGxpbmsgVXBsb2FkYWJsZX0sIHtAbGluayBCbG9iTGlrZVBhcnR9LCBvciB7QGxpbmsgQXN5bmNJdGVyYWJsZX0gb2Yge0BsaW5rIEJsb2JMaWtlUGFydH1zXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgdGhlIG5hbWUgb2YgdGhlIGZpbGUuIElmIG9taXR0ZWQsIHRvRmlsZSB3aWxsIHRyeSB0byBkZXRlcm1pbmUgYSBmaWxlIG5hbWUgZnJvbSBiaXRzIGlmIHBvc3NpYmxlXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgYWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMudHlwZSB0aGUgTUlNRSB0eXBlIG9mIHRoZSBjb250ZW50XG4gKiBAcGFyYW0ge251bWJlcj19IG9wdGlvbnMubGFzdE1vZGlmaWVkIHRoZSBsYXN0IG1vZGlmaWVkIHRpbWVzdGFtcFxuICogQHJldHVybnMgYSB7QGxpbmsgRmlsZX0gd2l0aCB0aGUgZ2l2ZW4gcHJvcGVydGllc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9GaWxlKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gICAgLy8gSWYgaXQncyBhIHByb21pc2UsIHJlc29sdmUgaXQuXG4gICAgdmFsdWUgPSBhd2FpdCB2YWx1ZTtcbiAgICAvLyBJZiB3ZSd2ZSBiZWVuIGdpdmVuIGEgYEZpbGVgIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICBpZiAoaXNGaWxlTGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoaXNSZXNwb25zZUxpa2UodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCB2YWx1ZS5ibG9iKCk7XG4gICAgICAgIG5hbWUgfHwgKG5hbWUgPSBuZXcgVVJMKHZhbHVlLnVybCkucGF0aG5hbWUuc3BsaXQoL1tcXFxcL10vKS5wb3AoKSA/PyAndW5rbm93bl9maWxlJyk7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gY29udmVydCB0aGUgYEJsb2JgIGludG8gYW4gYXJyYXkgYnVmZmVyIGJlY2F1c2UgdGhlIGBCbG9iYCBjbGFzc1xuICAgICAgICAvLyB0aGF0IGBub2RlLWZldGNoYCBkZWZpbmVzIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSB3ZWIgc3RhbmRhcmQgd2hpY2ggcmVzdWx0c1xuICAgICAgICAvLyBpbiBgbmV3IEZpbGVgIGludGVycHJldGluZyBpdCBhcyBhIHN0cmluZyBpbnN0ZWFkIG9mIGJpbmFyeSBkYXRhLlxuICAgICAgICBjb25zdCBkYXRhID0gaXNCbG9iTGlrZShibG9iKSA/IFsoYXdhaXQgYmxvYi5hcnJheUJ1ZmZlcigpKV0gOiBbYmxvYl07XG4gICAgICAgIHJldHVybiBuZXcgRmlsZShkYXRhLCBuYW1lLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgYml0cyA9IGF3YWl0IGdldEJ5dGVzKHZhbHVlKTtcbiAgICBuYW1lIHx8IChuYW1lID0gZ2V0TmFtZSh2YWx1ZSkgPz8gJ3Vua25vd25fZmlsZScpO1xuICAgIGlmICghb3B0aW9ucz8udHlwZSkge1xuICAgICAgICBjb25zdCB0eXBlID0gYml0c1swXT8udHlwZTtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHsgLi4ub3B0aW9ucywgdHlwZSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmlsZShiaXRzLCBuYW1lLCBvcHRpb25zKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEJ5dGVzKHZhbHVlKSB7XG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSB8fCAvLyBpbmNsdWRlcyBVaW50OEFycmF5LCBCdWZmZXIsIGV0Yy5cbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCbG9iTGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcGFydHMucHVzaChhd2FpdCB2YWx1ZS5hcnJheUJ1ZmZlcigpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBc3luY0l0ZXJhYmxlSXRlcmF0b3IodmFsdWUpIC8vIGluY2x1ZGVzIFJlYWRhYmxlLCBSZWFkYWJsZVN0cmVhbSwgZXRjLlxuICAgICkge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGNodW5rKTsgLy8gVE9ETywgY29uc2lkZXIgdmFsaWRhdGluZz9cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRhdGEgdHlwZTogJHt0eXBlb2YgdmFsdWV9OyBjb25zdHJ1Y3RvcjogJHt2YWx1ZT8uY29uc3RydWN0b3JcbiAgICAgICAgICAgID8ubmFtZX07IHByb3BzOiAke3Byb3BzRm9yRXJyb3IodmFsdWUpfWApO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG59XG5mdW5jdGlvbiBwcm9wc0ZvckVycm9yKHZhbHVlKSB7XG4gICAgY29uc3QgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gICAgcmV0dXJuIGBbJHtwcm9wcy5tYXAoKHApID0+IGBcIiR7cH1cImApLmpvaW4oJywgJyl9XWA7XG59XG5mdW5jdGlvbiBnZXROYW1lKHZhbHVlKSB7XG4gICAgcmV0dXJuIChnZXRTdHJpbmdGcm9tTWF5YmVCdWZmZXIodmFsdWUubmFtZSkgfHxcbiAgICAgICAgZ2V0U3RyaW5nRnJvbU1heWJlQnVmZmVyKHZhbHVlLmZpbGVuYW1lKSB8fFxuICAgICAgICAvLyBGb3IgZnMuUmVhZFN0cmVhbVxuICAgICAgICBnZXRTdHJpbmdGcm9tTWF5YmVCdWZmZXIodmFsdWUucGF0aCk/LnNwbGl0KC9bXFxcXC9dLykucG9wKCkpO1xufVxuY29uc3QgZ2V0U3RyaW5nRnJvbU1heWJlQnVmZmVyID0gKHgpID0+IHtcbiAgICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4geDtcbiAgICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEJ1ZmZlcilcbiAgICAgICAgcmV0dXJuIFN0cmluZyh4KTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmNvbnN0IGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yID0gKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbmV4cG9ydCBjb25zdCBpc011bHRpcGFydEJvZHkgPSAoYm9keSkgPT4gYm9keSAmJiB0eXBlb2YgYm9keSA9PT0gJ29iamVjdCcgJiYgYm9keS5ib2R5ICYmIGJvZHlbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ011bHRpcGFydEJvZHknO1xuLyoqXG4gKiBSZXR1cm5zIGEgbXVsdGlwYXJ0L2Zvcm0tZGF0YSByZXF1ZXN0IGlmIGFueSBwYXJ0IG9mIHRoZSBnaXZlbiByZXF1ZXN0IGJvZHkgY29udGFpbnMgYSBGaWxlIC8gQmxvYiB2YWx1ZS5cbiAqIE90aGVyd2lzZSByZXR1cm5zIHRoZSByZXF1ZXN0IGFzIGlzLlxuICovXG5leHBvcnQgY29uc3QgbWF5YmVNdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgPSBhc3luYyAob3B0cykgPT4ge1xuICAgIGlmICghaGFzVXBsb2FkYWJsZVZhbHVlKG9wdHMuYm9keSkpXG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgIGNvbnN0IGZvcm0gPSBhd2FpdCBjcmVhdGVGb3JtKG9wdHMuYm9keSk7XG4gICAgcmV0dXJuIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zKGZvcm0sIG9wdHMpO1xufTtcbmV4cG9ydCBjb25zdCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgPSBhc3luYyAob3B0cykgPT4ge1xuICAgIGNvbnN0IGZvcm0gPSBhd2FpdCBjcmVhdGVGb3JtKG9wdHMuYm9keSk7XG4gICAgcmV0dXJuIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zKGZvcm0sIG9wdHMpO1xufTtcbmV4cG9ydCBjb25zdCBjcmVhdGVGb3JtID0gYXN5bmMgKGJvZHkpID0+IHtcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoT2JqZWN0LmVudHJpZXMoYm9keSB8fCB7fSkubWFwKChba2V5LCB2YWx1ZV0pID0+IGFkZEZvcm1WYWx1ZShmb3JtLCBrZXksIHZhbHVlKSkpO1xuICAgIHJldHVybiBmb3JtO1xufTtcbmNvbnN0IGhhc1VwbG9hZGFibGVWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmIChpc1VwbG9hZGFibGUodmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB2YWx1ZS5zb21lKGhhc1VwbG9hZGFibGVWYWx1ZSk7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaGFzVXBsb2FkYWJsZVZhbHVlKHZhbHVlW2tdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgYWRkRm9ybVZhbHVlID0gYXN5bmMgKGZvcm0sIGtleSwgdmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFJlY2VpdmVkIG51bGwgZm9yIFwiJHtrZXl9XCI7IHRvIHBhc3MgbnVsbCBpbiBGb3JtRGF0YSwgeW91IG11c3QgdXNlIHRoZSBzdHJpbmcgJ251bGwnYCk7XG4gICAgfVxuICAgIC8vIFRPRE86IG1ha2UgbmVzdGVkIGZvcm1hdHMgY29uZmlndXJhYmxlXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICBmb3JtLmFwcGVuZChrZXksIFN0cmluZyh2YWx1ZSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1VwbG9hZGFibGUodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0b0ZpbGUodmFsdWUpO1xuICAgICAgICBmb3JtLmFwcGVuZChrZXksIGZpbGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoKGVudHJ5KSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwga2V5ICsgJ1tdJywgZW50cnkpKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW25hbWUsIHByb3BdKSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwgYCR7a2V5fVske25hbWV9XWAsIHByb3ApKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIGdpdmVuIHRvIGZvcm0sIGV4cGVjdGVkIGEgc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIG9iamVjdCwgQXJyYXksIEZpbGUgb3IgQmxvYiBidXQgZ290ICR7dmFsdWV9IGluc3RlYWRgKTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBsb2Fkcy5tanMubWFwIl0sIm5hbWVzIjpbIkZvcm1EYXRhIiwiRmlsZSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiaXNGc1JlYWRTdHJlYW0iLCJmaWxlRnJvbVBhdGgiLCJpc1Jlc3BvbnNlTGlrZSIsInZhbHVlIiwidXJsIiwiYmxvYiIsImlzRmlsZUxpa2UiLCJuYW1lIiwibGFzdE1vZGlmaWVkIiwiaXNCbG9iTGlrZSIsInNpemUiLCJ0eXBlIiwidGV4dCIsInNsaWNlIiwiYXJyYXlCdWZmZXIiLCJpc1VwbG9hZGFibGUiLCJ0b0ZpbGUiLCJvcHRpb25zIiwiVVJMIiwicGF0aG5hbWUiLCJzcGxpdCIsInBvcCIsImRhdGEiLCJiaXRzIiwiZ2V0Qnl0ZXMiLCJnZXROYW1lIiwicGFydHMiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInB1c2giLCJpc0FzeW5jSXRlcmFibGVJdGVyYXRvciIsImNodW5rIiwiRXJyb3IiLCJwcm9wc0ZvckVycm9yIiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJtYXAiLCJwIiwiam9pbiIsImdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlciIsImZpbGVuYW1lIiwicGF0aCIsIngiLCJCdWZmZXIiLCJTdHJpbmciLCJ1bmRlZmluZWQiLCJTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwiaXNNdWx0aXBhcnRCb2R5IiwiYm9keSIsInRvU3RyaW5nVGFnIiwibWF5YmVNdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJvcHRzIiwiaGFzVXBsb2FkYWJsZVZhbHVlIiwiZm9ybSIsImNyZWF0ZUZvcm0iLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJQcm9taXNlIiwiYWxsIiwiZW50cmllcyIsImtleSIsImFkZEZvcm1WYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInNvbWUiLCJrIiwiVHlwZUVycm9yIiwiYXBwZW5kIiwiZmlsZSIsImVudHJ5IiwicHJvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/uploads.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/openai/version.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/version.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: function() { return /* binding */ VERSION; }\n/* harmony export */ });\nconst VERSION = \"4.80.1\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvdmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsU0FBUyxDQUFDLDJCQUEyQjtDQUM1RCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL29wZW5haS92ZXJzaW9uLm1qcz9kYzJmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuODAuMSc7IC8vIHgtcmVsZWFzZS1wbGVhc2UtdmVyc2lvblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwIl0sIm5hbWVzIjpbIlZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/openai/version.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: function() { return /* binding */ BRAND; },\n/* harmony export */   DIRTY: function() { return /* binding */ DIRTY; },\n/* harmony export */   EMPTY_PATH: function() { return /* binding */ EMPTY_PATH; },\n/* harmony export */   INVALID: function() { return /* binding */ INVALID; },\n/* harmony export */   NEVER: function() { return /* binding */ NEVER; },\n/* harmony export */   OK: function() { return /* binding */ OK; },\n/* harmony export */   ParseStatus: function() { return /* binding */ ParseStatus; },\n/* harmony export */   Schema: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodAny: function() { return /* binding */ ZodAny; },\n/* harmony export */   ZodArray: function() { return /* binding */ ZodArray; },\n/* harmony export */   ZodBigInt: function() { return /* binding */ ZodBigInt; },\n/* harmony export */   ZodBoolean: function() { return /* binding */ ZodBoolean; },\n/* harmony export */   ZodBranded: function() { return /* binding */ ZodBranded; },\n/* harmony export */   ZodCatch: function() { return /* binding */ ZodCatch; },\n/* harmony export */   ZodDate: function() { return /* binding */ ZodDate; },\n/* harmony export */   ZodDefault: function() { return /* binding */ ZodDefault; },\n/* harmony export */   ZodDiscriminatedUnion: function() { return /* binding */ ZodDiscriminatedUnion; },\n/* harmony export */   ZodEffects: function() { return /* binding */ ZodEffects; },\n/* harmony export */   ZodEnum: function() { return /* binding */ ZodEnum; },\n/* harmony export */   ZodError: function() { return /* binding */ ZodError; },\n/* harmony export */   ZodFirstPartyTypeKind: function() { return /* binding */ ZodFirstPartyTypeKind; },\n/* harmony export */   ZodFunction: function() { return /* binding */ ZodFunction; },\n/* harmony export */   ZodIntersection: function() { return /* binding */ ZodIntersection; },\n/* harmony export */   ZodIssueCode: function() { return /* binding */ ZodIssueCode; },\n/* harmony export */   ZodLazy: function() { return /* binding */ ZodLazy; },\n/* harmony export */   ZodLiteral: function() { return /* binding */ ZodLiteral; },\n/* harmony export */   ZodMap: function() { return /* binding */ ZodMap; },\n/* harmony export */   ZodNaN: function() { return /* binding */ ZodNaN; },\n/* harmony export */   ZodNativeEnum: function() { return /* binding */ ZodNativeEnum; },\n/* harmony export */   ZodNever: function() { return /* binding */ ZodNever; },\n/* harmony export */   ZodNull: function() { return /* binding */ ZodNull; },\n/* harmony export */   ZodNullable: function() { return /* binding */ ZodNullable; },\n/* harmony export */   ZodNumber: function() { return /* binding */ ZodNumber; },\n/* harmony export */   ZodObject: function() { return /* binding */ ZodObject; },\n/* harmony export */   ZodOptional: function() { return /* binding */ ZodOptional; },\n/* harmony export */   ZodParsedType: function() { return /* binding */ ZodParsedType; },\n/* harmony export */   ZodPipeline: function() { return /* binding */ ZodPipeline; },\n/* harmony export */   ZodPromise: function() { return /* binding */ ZodPromise; },\n/* harmony export */   ZodReadonly: function() { return /* binding */ ZodReadonly; },\n/* harmony export */   ZodRecord: function() { return /* binding */ ZodRecord; },\n/* harmony export */   ZodSchema: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodSet: function() { return /* binding */ ZodSet; },\n/* harmony export */   ZodString: function() { return /* binding */ ZodString; },\n/* harmony export */   ZodSymbol: function() { return /* binding */ ZodSymbol; },\n/* harmony export */   ZodTransformer: function() { return /* binding */ ZodEffects; },\n/* harmony export */   ZodTuple: function() { return /* binding */ ZodTuple; },\n/* harmony export */   ZodType: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodUndefined: function() { return /* binding */ ZodUndefined; },\n/* harmony export */   ZodUnion: function() { return /* binding */ ZodUnion; },\n/* harmony export */   ZodUnknown: function() { return /* binding */ ZodUnknown; },\n/* harmony export */   ZodVoid: function() { return /* binding */ ZodVoid; },\n/* harmony export */   addIssueToContext: function() { return /* binding */ addIssueToContext; },\n/* harmony export */   any: function() { return /* binding */ anyType; },\n/* harmony export */   array: function() { return /* binding */ arrayType; },\n/* harmony export */   bigint: function() { return /* binding */ bigIntType; },\n/* harmony export */   boolean: function() { return /* binding */ booleanType; },\n/* harmony export */   coerce: function() { return /* binding */ coerce; },\n/* harmony export */   custom: function() { return /* binding */ custom; },\n/* harmony export */   date: function() { return /* binding */ dateType; },\n/* harmony export */   datetimeRegex: function() { return /* binding */ datetimeRegex; },\n/* harmony export */   \"default\": function() { return /* binding */ z; },\n/* harmony export */   defaultErrorMap: function() { return /* binding */ errorMap; },\n/* harmony export */   discriminatedUnion: function() { return /* binding */ discriminatedUnionType; },\n/* harmony export */   effect: function() { return /* binding */ effectsType; },\n/* harmony export */   \"enum\": function() { return /* binding */ enumType; },\n/* harmony export */   \"function\": function() { return /* binding */ functionType; },\n/* harmony export */   getErrorMap: function() { return /* binding */ getErrorMap; },\n/* harmony export */   getParsedType: function() { return /* binding */ getParsedType; },\n/* harmony export */   \"instanceof\": function() { return /* binding */ instanceOfType; },\n/* harmony export */   intersection: function() { return /* binding */ intersectionType; },\n/* harmony export */   isAborted: function() { return /* binding */ isAborted; },\n/* harmony export */   isAsync: function() { return /* binding */ isAsync; },\n/* harmony export */   isDirty: function() { return /* binding */ isDirty; },\n/* harmony export */   isValid: function() { return /* binding */ isValid; },\n/* harmony export */   late: function() { return /* binding */ late; },\n/* harmony export */   lazy: function() { return /* binding */ lazyType; },\n/* harmony export */   literal: function() { return /* binding */ literalType; },\n/* harmony export */   makeIssue: function() { return /* binding */ makeIssue; },\n/* harmony export */   map: function() { return /* binding */ mapType; },\n/* harmony export */   nan: function() { return /* binding */ nanType; },\n/* harmony export */   nativeEnum: function() { return /* binding */ nativeEnumType; },\n/* harmony export */   never: function() { return /* binding */ neverType; },\n/* harmony export */   \"null\": function() { return /* binding */ nullType; },\n/* harmony export */   nullable: function() { return /* binding */ nullableType; },\n/* harmony export */   number: function() { return /* binding */ numberType; },\n/* harmony export */   object: function() { return /* binding */ objectType; },\n/* harmony export */   objectUtil: function() { return /* binding */ objectUtil; },\n/* harmony export */   oboolean: function() { return /* binding */ oboolean; },\n/* harmony export */   onumber: function() { return /* binding */ onumber; },\n/* harmony export */   optional: function() { return /* binding */ optionalType; },\n/* harmony export */   ostring: function() { return /* binding */ ostring; },\n/* harmony export */   pipeline: function() { return /* binding */ pipelineType; },\n/* harmony export */   preprocess: function() { return /* binding */ preprocessType; },\n/* harmony export */   promise: function() { return /* binding */ promiseType; },\n/* harmony export */   quotelessJson: function() { return /* binding */ quotelessJson; },\n/* harmony export */   record: function() { return /* binding */ recordType; },\n/* harmony export */   set: function() { return /* binding */ setType; },\n/* harmony export */   setErrorMap: function() { return /* binding */ setErrorMap; },\n/* harmony export */   strictObject: function() { return /* binding */ strictObjectType; },\n/* harmony export */   string: function() { return /* binding */ stringType; },\n/* harmony export */   symbol: function() { return /* binding */ symbolType; },\n/* harmony export */   transformer: function() { return /* binding */ effectsType; },\n/* harmony export */   tuple: function() { return /* binding */ tupleType; },\n/* harmony export */   undefined: function() { return /* binding */ undefinedType; },\n/* harmony export */   union: function() { return /* binding */ unionType; },\n/* harmony export */   unknown: function() { return /* binding */ unknownType; },\n/* harmony export */   util: function() { return /* binding */ util; },\n/* harmony export */   \"void\": function() { return /* binding */ voidType; },\n/* harmony export */   z: function() { return /* binding */ z; }\n/* harmony export */ });\nvar util;\n(function(util) {\n    util.assertEqual = (val)=>val;\n    function assertIs(_arg) {}\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items)=>{\n        const obj = {};\n        for (const item of items){\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj)=>{\n        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys){\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj)=>{\n        return util.objectKeys(obj).map(function(e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban\n     : (object)=>{\n        const keys = [];\n        for(const key in object){\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    util.find = (arr, checker)=>{\n        for (const item of arr){\n            if (checker(item)) return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban\n     : (val)=>typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array) {\n        let separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \" | \";\n        return array.map((val)=>typeof val === \"string\" ? \"'\".concat(val, \"'\") : val).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value)=>{\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil) {\n    objectUtil.mergeShapes = (first, second)=>{\n        return {\n            ...first,\n            ...second\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\"\n]);\nconst getParsedType = (data)=>{\n    const t = typeof data;\n    switch(t){\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\"\n]);\nconst quotelessJson = (obj)=>{\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper || function(issue) {\n            return issue.message;\n        };\n        const fieldErrors = {\n            _errors: []\n        };\n        const processError = (error)=>{\n            for (const issue of error.issues){\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                } else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                } else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                } else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                } else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while(i < issue.path.length){\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                        // if (typeof el === \"string\") {\n                        //   curr[el] = curr[el] || { _errors: [] };\n                        // } else if (typeof el === \"number\") {\n                        //   const errorArray: any = [];\n                        //   errorArray._errors = [];\n                        //   curr[el] = curr[el] || errorArray;\n                        // }\n                        } else {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(\"Not a ZodError: \".concat(value));\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten() {\n        let mapper = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (issue)=>issue.message;\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues){\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            } else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return {\n            formErrors,\n            fieldErrors\n        };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n    constructor(issues){\n        var _this;\n        super(), _this = this;\n        this.issues = [];\n        this.addIssue = (sub)=>{\n            this.issues = [\n                ...this.issues,\n                sub\n            ];\n        };\n        this.addIssues = function() {\n            let subs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n            _this.issues = [\n                ..._this.issues,\n                ...subs\n            ];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        } else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n}\nZodError.create = (issues)=>{\n    const error = new ZodError(issues);\n    return error;\n};\nconst errorMap = (issue, _ctx)=>{\n    let message;\n    switch(issue.code){\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            } else {\n                message = \"Expected \".concat(issue.expected, \", received \").concat(issue.received);\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = \"Invalid literal value, expected \".concat(JSON.stringify(issue.expected, util.jsonStringifyReplacer));\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = \"Unrecognized key(s) in object: \".concat(util.joinValues(issue.keys, \", \"));\n            break;\n        case ZodIssueCode.invalid_union:\n            message = \"Invalid input\";\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = \"Invalid discriminator value. Expected \".concat(util.joinValues(issue.options));\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = \"Invalid enum value. Expected \".concat(util.joinValues(issue.options), \", received '\").concat(issue.received, \"'\");\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = \"Invalid function arguments\";\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = \"Invalid function return type\";\n            break;\n        case ZodIssueCode.invalid_date:\n            message = \"Invalid date\";\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = 'Invalid input: must include \"'.concat(issue.validation.includes, '\"');\n                    if (typeof issue.validation.position === \"number\") {\n                        message = \"\".concat(message, \" at one or more positions greater than or equal to \").concat(issue.validation.position);\n                    }\n                } else if (\"startsWith\" in issue.validation) {\n                    message = 'Invalid input: must start with \"'.concat(issue.validation.startsWith, '\"');\n                } else if (\"endsWith\" in issue.validation) {\n                    message = 'Invalid input: must end with \"'.concat(issue.validation.endsWith, '\"');\n                } else {\n                    util.assertNever(issue.validation);\n                }\n            } else if (issue.validation !== \"regex\") {\n                message = \"Invalid \".concat(issue.validation);\n            } else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\") message = \"Array must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"more than\", \" \").concat(issue.minimum, \" element(s)\");\n            else if (issue.type === \"string\") message = \"String must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"over\", \" \").concat(issue.minimum, \" character(s)\");\n            else if (issue.type === \"number\") message = \"Number must be \".concat(issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \").concat(issue.minimum);\n            else if (issue.type === \"date\") message = \"Date must be \".concat(issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \").concat(new Date(Number(issue.minimum)));\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\") message = \"Array must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"less than\", \" \").concat(issue.maximum, \" element(s)\");\n            else if (issue.type === \"string\") message = \"String must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"under\", \" \").concat(issue.maximum, \" character(s)\");\n            else if (issue.type === \"number\") message = \"Number must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\", \" \").concat(issue.maximum);\n            else if (issue.type === \"bigint\") message = \"BigInt must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\", \" \").concat(issue.maximum);\n            else if (issue.type === \"date\") message = \"Date must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"smaller than or equal to\" : \"smaller than\", \" \").concat(new Date(Number(issue.maximum)));\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = \"Invalid input\";\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = \"Intersection results could not be merged\";\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = \"Number must be a multiple of \".concat(issue.multipleOf);\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return {\n        message\n    };\n};\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\nconst makeIssue = (params)=>{\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [\n        ...path,\n        ...issueData.path || []\n    ];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps.filter((m)=>!!m).slice().reverse();\n    for (const map of maps){\n        errorMessage = map(fullIssue, {\n            data,\n            defaultError: errorMessage\n        }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            overrideMap,\n            overrideMap === errorMap ? undefined : errorMap\n        ].filter((x)=>!!x)\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    dirty() {\n        if (this.value === \"valid\") this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\") this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results){\n            if (s.status === \"aborted\") return INVALID;\n            if (s.status === \"dirty\") status.dirty();\n            arrayValue.push(s.value);\n        }\n        return {\n            status: status.value,\n            value: arrayValue\n        };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs){\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs){\n            const { key, value } = pair;\n            if (key.status === \"aborted\") return INVALID;\n            if (value.status === \"aborted\") return INVALID;\n            if (key.status === \"dirty\") status.dirty();\n            if (value.status === \"dirty\") status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return {\n            status: status.value,\n            value: finalObject\n        };\n    }\n    constructor(){\n        this.value = \"valid\";\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\"\n});\nconst DIRTY = (value)=>({\n        status: \"dirty\",\n        value\n    });\n_c = DIRTY;\nconst OK = (value)=>({\n        status: \"valid\",\n        value\n    });\n_c1 = OK;\nconst isAborted = (x)=>x.status === \"aborted\";\nconst isDirty = (x)=>x.status === \"dirty\";\nconst isValid = (x)=>x.status === \"valid\";\nconst isAsync = (x)=>typeof Promise !== \"undefined\" && x instanceof Promise;\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nvar errorUtil;\n(function(errorUtil) {\n    errorUtil.errToObj = (message)=>typeof message === \"string\" ? {\n            message\n        } : message || {};\n    errorUtil.toString = (message)=>typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            } else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n    constructor(parent, value, path, key){\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n}\nconst handleResult = (ctx, result)=>{\n    if (isValid(result)) {\n        return {\n            success: true,\n            data: result.value\n        };\n    } else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error () {\n                if (this._error) return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            }\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params) return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error('Can\\'t use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.');\n    }\n    if (errorMap) return {\n        errorMap: errorMap,\n        description\n    };\n    const customMap = (iss, ctx)=>{\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return {\n                message: message !== null && message !== void 0 ? message : ctx.defaultError\n            };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return {\n                message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError\n            };\n        }\n        if (iss.code !== \"invalid_type\") return {\n            message: ctx.defaultError\n        };\n        return {\n            message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError\n        };\n    };\n    return {\n        errorMap: customMap,\n        description\n    };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent\n        };\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent\n            }\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const result = this._parseSync({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({\n                    data,\n                    path: [],\n                    parent: ctx\n                });\n                return isValid(result) ? {\n                    value: result.value\n                } : {\n                    issues: ctx.common.issues\n                };\n            } catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true\n                };\n            }\n        }\n        return this._parseAsync({\n            data,\n            path: [],\n            parent: ctx\n        }).then((result)=>isValid(result) ? {\n                value: result.value\n            } : {\n                issues: ctx.common.issues\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const maybeAsyncResult = this._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val)=>{\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return {\n                    message\n                };\n            } else if (typeof message === \"function\") {\n                return message(val);\n            } else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx)=>{\n            const result = check(val);\n            const setError = ()=>ctx.addIssue({\n                    code: ZodIssueCode.custom,\n                    ...getIssueProperties(val)\n                });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data)=>{\n                    if (!data) {\n                        setError();\n                        return false;\n                    } else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx)=>{\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"refinement\",\n                refinement\n            }\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([\n            this,\n            option\n        ], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"transform\",\n                transform\n            }\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def)\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n    constructor(def){\n        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data)=>this[\"~validate\"](data)\n        };\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\";\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = \"((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))\";\nconst dateRegex = new RegExp(\"^\".concat(dateRegexSource, \"$\"));\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = \"([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d\";\n    if (args.precision) {\n        regex = \"\".concat(regex, \"\\\\.\\\\d{\").concat(args.precision, \"}\");\n    } else if (args.precision == null) {\n        regex = \"\".concat(regex, \"(\\\\.\\\\d+)?\");\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(\"^\".concat(timeRegexSource(args), \"$\"));\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = \"\".concat(dateRegexSource, \"T\").concat(timeRegexSource(args));\n    const opts = [];\n    opts.push(args.local ? \"Z?\" : \"Z\");\n    if (args.offset) opts.push(\"([+-]\\\\d{2}:?\\\\d{2})\");\n    regex = \"\".concat(regex, \"(\").concat(opts.join(\"|\"), \")\");\n    return new RegExp(\"^\".concat(regex, \"$\"));\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt)) return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null) return false;\n        if (!decoded.typ || !decoded.alg) return false;\n        if (alg && decoded.alg !== alg) return false;\n        return true;\n    } catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    } else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    }\n                    status.dirty();\n                }\n            } else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                } catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            } else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            includes: check.value,\n                            position: check.position\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            } else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            } else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            startsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            endsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data)=>regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    email(message) {\n        return this._addCheck({\n            kind: \"email\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    url(message) {\n        return this._addCheck({\n            kind: \"url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    emoji(message) {\n        return this._addCheck({\n            kind: \"emoji\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    uuid(message) {\n        return this._addCheck({\n            kind: \"uuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    nanoid(message) {\n        return this._addCheck({\n            kind: \"nanoid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid(message) {\n        return this._addCheck({\n            kind: \"cuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid2(message) {\n        return this._addCheck({\n            kind: \"cuid2\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    ulid(message) {\n        return this._addCheck({\n            kind: \"ulid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    base64(message) {\n        return this._addCheck({\n            kind: \"base64\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    jwt(options) {\n        return this._addCheck({\n            kind: \"jwt\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    ip(options) {\n        return this._addCheck({\n            kind: \"ip\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    cidr(options) {\n        return this._addCheck({\n            kind: \"cidr\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    date(message) {\n        return this._addCheck({\n            kind: \"date\",\n            message\n        });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    duration(message) {\n        return this._addCheck({\n            kind: \"duration\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */ nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"trim\"\n                }\n            ]\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toLowerCase\"\n                }\n            ]\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toUpperCase\"\n                }\n            ]\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch)=>ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params)=>{\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return valInt % stepInt / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message)\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message)\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message)\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            } else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            } else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n}\nZodNumber.create = (params)=>{\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBigInt extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            } catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n}\nZodBigInt.create = (params)=>{\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params)=>{\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime())\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params)=>{\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params)=>{\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params)=>{\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params)=>{\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params)\n    });\n};\nclass ZodAny extends ZodType {\n    _parse(input) {\n        return OK(input.data);\n    }\n    constructor(){\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n}\nZodAny.create = (params)=>{\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnknown extends ZodType {\n    _parse(input) {\n        return OK(input.data);\n    }\n    constructor(){\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n}\nZodUnknown.create = (params)=>{\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params)=>{\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params)\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params)=>{\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params)\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: tooSmall ? def.exactLength.value : undefined,\n                    maximum: tooBig ? def.exactLength.value : undefined,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([\n                ...ctx.data\n            ].map((item, i)=>{\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result)=>{\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [\n            ...ctx.data\n        ].map((item, i)=>{\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: {\n                value: minLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: {\n                value: maxLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: {\n                value: len,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params)=>{\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params)\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for(const key in schema.shape){\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: ()=>newShape\n        });\n    } else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element)\n        });\n    } else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));\n    } else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    _getCached() {\n        if (this._cached !== null) return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return this._cached = {\n            shape,\n            keys\n        };\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for(const key in ctx.data){\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys){\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: {\n                    status: \"valid\",\n                    value: key\n                },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys){\n                    pairs.push({\n                        key: {\n                            status: \"valid\",\n                            value: key\n                        },\n                        value: {\n                            status: \"valid\",\n                            value: ctx.data[key]\n                        }\n                    });\n                }\n            } else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys\n                    });\n                    status.dirty();\n                }\n            } else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(\"Internal ZodObject error: invalid unknownKeys value.\");\n            }\n        } else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys){\n                const value = ctx.data[key];\n                pairs.push({\n                    key: {\n                        status: \"valid\",\n                        value: key\n                    },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve().then(async ()=>{\n                const syncPairs = [];\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet\n                    });\n                }\n                return syncPairs;\n            }).then((syncPairs)=>{\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...message !== undefined ? {\n                errorMap: (issue, ctx)=>{\n                    var _a, _b, _c, _d;\n                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                    if (issue.code === \"unrecognized_keys\") return {\n                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n                    };\n                    return {\n                        message: defaultError\n                    };\n                }\n            } : {}\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\"\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\"\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...augmentation\n                })\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */ merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...merging._def.shape()\n                }),\n            typeName: ZodFirstPartyTypeKind.ZodObject\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({\n            [key]: schema\n        });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key)=>{\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    /**\n     * @deprecated\n     */ deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            } else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            } else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while(newField instanceof ZodOptional){\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n    constructor(){\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */ this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */ this.augment = this.extend;\n    }\n}\nZodObject.create = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.strictCreate = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.lazycreate = (shape, params)=>{\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results){\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results){\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option)=>{\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx\n                    }),\n                    ctx: childCtx\n                };\n            })).then(handleResults);\n        } else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options){\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                } else if (result.status === \"dirty\" && !dirty) {\n                    dirty = {\n                        result,\n                        ctx: childCtx\n                    };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues)=>new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params)=>{\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params)\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type)=>{\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    } else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    } else if (type instanceof ZodLiteral) {\n        return [\n            type.value\n        ];\n    } else if (type instanceof ZodEnum) {\n        return type.options;\n    } else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    } else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    } else if (type instanceof ZodUndefined) {\n        return [\n            undefined\n        ];\n    } else if (type instanceof ZodNull) {\n        return [\n            null\n        ];\n    } else if (type instanceof ZodOptional) {\n        return [\n            undefined,\n            ...getDiscriminator(type.unwrap())\n        ];\n    } else if (type instanceof ZodNullable) {\n        return [\n            null,\n            ...getDiscriminator(type.unwrap())\n        ];\n    } else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    } else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    } else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    } else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [\n                    discriminator\n                ]\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        } else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */ static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options){\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(\"A discriminator value for key `\".concat(discriminator, \"` could not be extracted from all schema options\"));\n            }\n            for (const value of discriminatorValues){\n                if (optionsMap.has(value)) {\n                    throw new Error(\"Discriminator property \".concat(String(discriminator), \" has duplicate value \").concat(String(value)));\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params)\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);\n        const newObj = {\n            ...a,\n            ...b\n        };\n        for (const key of sharedKeys){\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return {\n            valid: true,\n            data: newObj\n        };\n    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return {\n                valid: false\n            };\n        }\n        const newArray = [];\n        for(let index = 0; index < a.length; index++){\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return {\n            valid: true,\n            data: newArray\n        };\n    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else {\n        return {\n            valid: false\n        };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight)=>{\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return {\n                status: status.value,\n                value: merged.data\n            };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                })\n            ]).then((param)=>{\n                let [left, right] = param;\n                return handleParsed(left, right);\n            });\n        } else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params)=>{\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params)\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            status.dirty();\n        }\n        const items = [\n            ...ctx.data\n        ].map((item, itemIndex)=>{\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema) return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        }).filter((x)=>!!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results)=>{\n                return ParseStatus.mergeArray(status, results);\n            });\n        } else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest\n        });\n    }\n}\nZodTuple.create = (schemas, params)=>{\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params)\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for(const key in ctx.data){\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third)\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second)\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [\n            ...ctx.data.entries()\n        ].map((param, index)=>{\n            let [key, value] = param;\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [\n                    index,\n                    \"key\"\n                ])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [\n                    index,\n                    \"value\"\n                ]))\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async ()=>{\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return {\n                    status: status.value,\n                    value: finalMap\n                };\n            });\n        } else {\n            const finalMap = new Map();\n            for (const pair of pairs){\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return {\n                status: status.value,\n                value: finalMap\n            };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params)=>{\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements){\n                if (element.status === \"aborted\") return INVALID;\n                if (element.status === \"dirty\") status.dirty();\n                parsedSet.add(element.value);\n            }\n            return {\n                status: status.value,\n                value: parsedSet\n            };\n        }\n        const elements = [\n            ...ctx.data.values()\n        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements)=>finalizeSet(elements));\n        } else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: {\n                value: minSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: {\n                value: maxSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params)=>{\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params)\n    });\n};\nclass ZodFunction extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error\n                }\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error\n                }\n            });\n        }\n        const params = {\n            errorMap: ctx.common.contextualErrorMap\n        };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        } else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([\n                        makeArgsIssue(args, parsedArgs.error)\n                    ]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([\n                        makeReturnsIssue(result, parsedReturns.error)\n                    ]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args() {\n        for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){\n            items[_key] = arguments[_key];\n        }\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create())\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params)\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.validate = this.implement;\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({\n            data: ctx.data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n}\nZodLazy.create = (getter, params)=>{\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params)\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params)=>{\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params)\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params)\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        let newDef = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._def;\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef\n        });\n    }\n    exclude(values) {\n        let newDef = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._def;\n        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)), {\n            ...this._def,\n            ...newDef\n        });\n    }\n    constructor(){\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n    constructor(){\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params)=>{\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params)\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data)=>{\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params)=>{\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params)\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg)=>{\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                } else {\n                    status.dirty();\n                }\n            },\n            get path () {\n                return ctx.path;\n            }\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed)=>{\n                    if (status.value === \"aborted\") return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                    if (result.status === \"aborted\") return INVALID;\n                    if (result.status === \"dirty\") return DIRTY(result.value);\n                    if (status.value === \"dirty\") return DIRTY(result.value);\n                    return result;\n                });\n            } else {\n                if (status.value === \"aborted\") return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (result.status === \"aborted\") return INVALID;\n                if (result.status === \"dirty\") return DIRTY(result.value);\n                if (status.value === \"dirty\") return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc)=>{\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inner.status === \"aborted\") return INVALID;\n                if (inner.status === \"dirty\") status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return {\n                    status: status.value,\n                    value: inner.value\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((inner)=>{\n                    if (inner.status === \"aborted\") return INVALID;\n                    if (inner.status === \"dirty\") status.dirty();\n                    return executeRefinement(inner.value).then(()=>{\n                        return {\n                            status: status.value,\n                            value: inner.value\n                        };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (!isValid(base)) return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(\"Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return {\n                    status: status.value,\n                    value: result\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((base)=>{\n                    if (!isValid(base)) return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({\n                            status: status.value,\n                            value: result\n                        }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params)=>{\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params)\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params)=>{\n    return new ZodEffects({\n        schema,\n        effect: {\n            type: \"preprocess\",\n            transform: preprocess\n        },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params)\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params)=>{\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params)=>{\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params)=>{\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : ()=>params.default,\n        ...processCreateParams(params)\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: []\n            }\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx\n            }\n        });\n        if (isAsync(result)) {\n            return result.then((result)=>{\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                        get error () {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data\n                    })\n                };\n            });\n        } else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                    get error () {\n                        return new ZodError(newCtx.common.issues);\n                    },\n                    input: newCtx.data\n                })\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params)=>{\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : ()=>params.catch,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n}\nZodNaN.create = (params)=>{\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params)\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async ()=>{\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inResult.status === \"aborted\") return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                } else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                }\n            };\n            return handleAsync();\n        } else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n            if (inResult.status === \"aborted\") return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value\n                };\n            } else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data)=>{\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data)=>freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params)=>{\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params)\n    });\n};\nfunction custom(check) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, /**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */ fatal = arguments.length > 2 ? arguments[2] : void 0;\n    if (check) return ZodAny.create().superRefine((data, ctx)=>{\n        var _a, _b;\n        if (!check(data)) {\n            const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? {\n                message: params\n            } : params;\n            const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n            const p2 = typeof p === \"string\" ? {\n                message: p\n            } : p;\n            ctx.addIssue({\n                code: \"custom\",\n                ...p2,\n                fatal: _fatal\n            });\n        }\n    });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = function(// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n        message: \"Input not instance of \".concat(cls.name)\n    };\n    return custom((data)=>data instanceof cls, params);\n};\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = ()=>stringType().optional();\nconst onumber = ()=>numberType().optional();\nconst oboolean = ()=>booleanType().optional();\nconst coerce = {\n    string: (arg)=>ZodString.create({\n            ...arg,\n            coerce: true\n        }),\n    number: (arg)=>ZodNumber.create({\n            ...arg,\n            coerce: true\n        }),\n    boolean: (arg)=>ZodBoolean.create({\n            ...arg,\n            coerce: true\n        }),\n    bigint: (arg)=>ZodBigInt.create({\n            ...arg,\n            coerce: true\n        }),\n    date: (arg)=>ZodDate.create({\n            ...arg,\n            coerce: true\n        })\n};\nconst NEVER = INVALID;\nvar z = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () {\n        return util;\n    },\n    get objectUtil () {\n        return objectUtil;\n    },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () {\n        return ZodFirstPartyTypeKind;\n    },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    \"enum\": enumType,\n    \"function\": functionType,\n    \"instanceof\": instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    \"null\": nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    \"undefined\": undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    \"void\": voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nvar _c, _c1;\n$RefreshReg$(_c, \"DIRTY\");\n$RefreshReg$(_c1, \"OK\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/lib/index.mjs\n"));

/***/ })

}]);